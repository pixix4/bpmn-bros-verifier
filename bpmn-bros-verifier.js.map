{"version":3,"file":"bpmn-bros-verifier.js","sources":["collections/Maps.kt","text/regex/RegexExtensions.kt","kotlin/math.kt","generated/_Collections.kt","collections/Collections.kt","text/Strings.kt","kotlin/Comparator.kt","collections/Sets.kt","kotlin/collections.kt","collections/MutableCollections.kt","../../../../src/main/kotlin/io/framed/model/bros/Connections.kt","../../../../../src/commonMain/kotlin/de/westermann/kobserve/event/EventBus.kt","../../../../src/main/kotlin/de/westermann/kwebview/AttributeDelegate.kt","kotlin/text/string.kt","../../../../src/main/kotlin/de/westermann/kwebview/ClassDelegate.kt","../../../../src/main/kotlin/de/westermann/kwebview/ClassList.kt","../../../../src/main/kotlin/de/westermann/kwebview/DataSet.kt","org.w3c/org.w3c.dom.kt","../../../../src/main/kotlin/de/westermann/kwebview/Dimension.kt","../../../../src/main/kotlin/de/westermann/kwebview/KWebViewDsl.kt","../../../../src/main/kotlin/de/westermann/kwebview/Point.kt","../../../../src/main/kotlin/de/westermann/kwebview/TouchPolyfill.kt","../../../../src/main/kotlin/de/westermann/kwebview/extensions.kt","../../../../src/main/kotlin/de/westermann/kwebview/View.kt","util/Standard.kt","../../../../../../../../../dummy.kt","../../../../src/main/kotlin/de/westermann/kwebview/ViewCollection.kt","../../../../src/main/kotlin/de/westermann/kwebview/ViewForLabel.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Body.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/BoxView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Button.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Checkbox.kt","comparisons/Comparisons.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/FilterList.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Heading.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/IconView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/ImageView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/InputView.kt","generated/_Arrays.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Label.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Link.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/ListView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/MaterialIcon.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/OptionView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/SelectView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Table.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableCaption.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableCell.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableRow.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableSection.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TextArea.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TextView.kt","../../../../src/main/kotlin/de/westermann/kwebview/extra/ListFactory.kt","../../../../src/main/kotlin/de/westermann/kwebview/i18n.kt","kotlin/promise.kt","../../../../src/main/kotlin/io/framed/framework/Context.kt","../../../../src/main/kotlin/io/framed/framework/ModelRelation.kt","../../../../src/main/kotlin/io/framed/framework/ModelTree.kt","../../../../src/main/kotlin/io/framed/framework/matcher/Matcher.kt","../../../../src/main/kotlin/io/framed/framework/matcher/PredefinedMatch.kt","../../../../src/main/kotlin/io/framed/framework/matcher/StringMatcher.kt","../../../../src/main/kotlin/io/framed/framework/matcher/TreeMatcher.kt","../../../../src/main/kotlin/io/framed/framework/verifier/BpmnVerifier.kt","../../../../src/main/kotlin/io/framed/framework/verifier/BrosVerifier.kt","../../../../src/main/kotlin/io/framed/framework/verifier/Result.kt","../../../../src/main/kotlin/io/framed/framework/verifier/TreeVerifier.kt","../../../../src/main/kotlin/io/framed/framework/verifier/Verifier.kt","../../../../src/main/kotlin/io/framed/main.kt","../../../../src/main/kotlin/io/framed/model/bpmn/BpmnModel.kt","util/Lazy.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnElement.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnEvent.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnFlowObject.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnGateway.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnLane.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnLaneSet.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnMessageFlow.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnProcess.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnSequenceFlow.kt","../../../../src/main/kotlin/io/framed/model/bpmn/model/BpmnTask.kt","../../../../src/main/kotlin/io/framed/model/bpmn/xml/BpmnParser.kt","../../../../src/main/kotlin/io/framed/model/bpmn/xml/XmlElement.kt","../../../../src/main/kotlin/io/framed/model/bros/BrosDocument.kt","../../../../src/main/kotlin/io/framed/model/bros/BrosParser.kt","../../../../src/main/kotlin/io/framed/model/bros/PolymorphicClassDesc.kt","../../../../src/main/kotlin/io/framed/model/bros/PolymorphicListSerializer.kt","../../../../src/main/kotlin/io/framed/model/bros/PolymorphicSerializer.kt","util/Preconditions.kt","../../../../src/main/kotlin/io/framed/model/bros/PolymorphicSetSerializer.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosAggregation.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosElement.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosConnection.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosAttribute.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosClass.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosCompartment.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosComposition.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosCreateRelation.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosDestroyRelation.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosEvent.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosEventType.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosFulfillment.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosInheritance.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosMethod.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosObject.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosObjectGroup.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosPackage.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosParameter.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosRelationship.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosReturnEvent.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosRoleType.kt","../../../../src/main/kotlin/io/framed/model/bros/model/BrosScene.kt","../../../../src/main/kotlin/io/framed/modules/Rule1BpmnProcess.kt","../../../../src/main/kotlin/io/framed/modules/Rule2BpmnLane.kt","../../../../src/main/kotlin/io/framed/modules/Rule3BpmnTerminationEvent.kt","../../../../src/main/kotlin/io/framed/modules/Rule4BpmnEndEvent.kt","../../../../src/main/kotlin/io/framed/modules/Rule5BpmnStartEvent.kt","../../../../src/main/kotlin/io/framed/modules/Rule6BrosEvent.kt","../../../../src/main/kotlin/io/framed/ui/Application.kt","org.w3c/org.w3c.files.kt","../../../../src/main/kotlin/io/framed/ui/CopyView.kt","../../../../src/main/kotlin/io/framed/ui/FeatureState.kt","../../../../src/main/kotlin/io/framed/ui/FileTextBox.kt","../../../../src/main/kotlin/io/framed/ui/ResultEntry.kt","../../../../src/main/kotlin/io/framed/ui/ResultFeature.kt","../../../../src/main/kotlin/io/framed/ui/ResultField.kt","../../../../src/main/kotlin/io/framed/ui/ResultStats.kt","../../../../src/main/kotlin/io/framed/ui/ResultTab.kt","../../../../src/main/kotlin/io/framed/ui/ResultTabList.kt","../../../../src/main/kotlin/io/framed/ui/ResultView.kt","generated/_Sequences.kt","../../../../src/main/kotlin/io/framed/verification.kt","../../../../src/main/kotlin/io/framed/modules/Main.kt"],"sourcesContent":["/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n\npackage kotlin.collections\n\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [LinkedHashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (js(\"ArrayBuffer\").isView(destination) && js(\"ArrayBuffer\").isView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n","package io.framed.model.bros\n\nimport io.framed.model.bros.model.BrosConnection\nimport kotlinx.serialization.Serializable\n\n@Serializable\nclass Connections {\n\n    @Serializable(with = PolymorphicSetSerializer::class)\n    var connections: Set<BrosConnection> = emptySet()\n\n    fun maxId(): Long = listOfNotNull(\n            connections.maxBy { it.id }?.id\n    ).max() ?: 0\n}",null,"package de.westermann.kwebview\n\nimport kotlin.reflect.KProperty\n\n/**\n * Delegate to easily access html attributes.\n *\n * @author lars\n */\nclass AttributeDelegate(\n        private val paramName: String? = null\n) {\n\n    private fun getParamName(property: KProperty<*>): String = paramName ?: property.name.toLowerCase()\n\n    operator fun getValue(container: View, property: KProperty<*>) = container.html.getAttribute(getParamName(property))\n\n    operator fun setValue(container: View, property: KProperty<*>, value: String?) {\n        if (value == null) {\n            container.html.removeAttribute(getParamName(property))\n        } else {\n            container.html.setAttribute(getParamName(property), value.toString())\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n@ExperimentalStdlibApi\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.property.property\nimport kotlin.reflect.KProperty\n\n/**\n * Delegate to easily set css classes as boolean attributes.\n *\n * @author lars\n */\nclass ClassDelegate(\n        className: String? = null\n) {\n\n    private lateinit var container: View\n    private lateinit var paramName: String\n    private lateinit var classProperty: Property<Boolean>\n\n    operator fun getValue(container: View, property: KProperty<*>): Property<Boolean> {\n        if (!this::container.isInitialized) {\n            this.container = container\n        }\n\n        if (!this::paramName.isInitialized) {\n            var name = property.name.toDashCase()\n            if (name.endsWith(\"-property\")) {\n                name = name.replace(\"-property\", \"\")\n            }\n            paramName = name\n        }\n\n        if (!this::classProperty.isInitialized) {\n            classProperty = property(container.html.classList.contains(paramName))\n\n            classProperty.onChange {\n                container.html.classList.toggle(paramName, classProperty.value)\n            }\n        }\n\n        return classProperty\n    }\n\n    init {\n        if (className != null) {\n            this.paramName = className\n        }\n    }\n}","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.EventListener\nimport de.westermann.kobserve.property.property\nimport org.w3c.dom.DOMTokenList\nimport kotlin.collections.set\n\n/**\n * Represents the css classes of an html element.\n *\n * @author lars\n */\nclass ClassList(\n    private val list: DOMTokenList\n) : Iterable<String> {\n\n    private val bound: MutableMap<String, Bound> = mutableMapOf()\n\n\n    /**\n     * Add css class.\n     */\n    fun add(clazz: String) {\n        if (clazz in bound) {\n            val p = bound[clazz] ?: return\n            if (p.property is Property<Boolean>) {\n                p.property.value = true\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        } else {\n            list.add(clazz)\n        }\n    }\n\n    /**\n     * Add css class.\n     */\n    operator fun plusAssign(clazz: String) = add(clazz)\n\n    /**\n     * Add css class.\n     */\n    fun remove(clazz: String) {\n        if (clazz in bound) {\n            val p = bound[clazz] ?: return\n            if (p.property is Property<Boolean>) {\n                p.property.value = false\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        } else {\n            list.remove(clazz)\n        }\n    }\n\n    /**\n     * Remove css class.\n     */\n    operator fun minusAssign(clazz: String) = remove(clazz)\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun get(clazz: String): Boolean = list.contains(clazz)\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun contains(clazz: String): Boolean = list.contains(clazz)\n\n    /**\n     * Set css class present.\n     */\n    operator fun set(clazz: String, present: Boolean) =\n        if (present) {\n            add(clazz)\n        } else {\n            remove(clazz)\n        }\n\n    /**\n     * Toggle css class.\n     */\n    fun toggle(clazz: String, force: Boolean? = null) = set(clazz, force ?: !contains(clazz))\n\n    fun bind(clazz: String, property: ReadOnlyProperty<Boolean>) {\n        if (clazz in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        set(clazz, property.value)\n        bound[clazz] = Bound(property,\n            property.onChange.reference {\n                list.toggle(clazz, property.value)\n            }\n        )\n    }\n\n    fun property(clazz: String): Property<Boolean> {\n        if (clazz in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        val property = property(get(clazz))\n\n        bound[clazz] = Bound(property,\n            property.onChange.reference {\n                list.toggle(clazz, property.value)\n            }\n        )\n\n        return property\n    }\n\n\n    fun unbind(clazz: String) {\n        if (clazz !in bound) {\n            throw IllegalArgumentException(\"Class is not bound!\")\n        }\n\n        bound[clazz]?.reference?.detach()\n        bound -= clazz\n    }\n\n    override fun iterator(): Iterator<String> {\n        return toString().split(\" +\".toRegex()).iterator()\n    }\n\n    override fun toString(): String = list.value\n\n    fun clear() {\n        for (element in this) {\n            remove(element)\n        }\n    }\n\n    private data class Bound(\n        val property: ReadOnlyProperty<Boolean>,\n        val reference: EventListener<Unit>?\n    )\n}","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.EventListener\nimport org.w3c.dom.DOMStringMap\nimport org.w3c.dom.get\nimport org.w3c.dom.set\nimport kotlin.collections.set\n\n/**\n * Represents the css classes of an html element.\n *\n * @author lars\n */\nclass DataSet(\n    private val map: DOMStringMap\n) {\n\n    private val bound: MutableMap<String, Bound> = mutableMapOf()\n\n    /**\n     * Add css class.\n     */\n    operator fun plusAssign(entry: Pair<String, String>) {\n        if (entry.first in bound) {\n            bound[entry.first]?.set(entry.second)\n        } else {\n            map[entry.first] = entry.second\n        }\n    }\n\n    /**\n     * Remove css class.\n     */\n    operator fun minusAssign(key: String) {\n        if (key in bound) {\n            bound[key]?.set(null)\n        } else {\n            delete(map, key)\n        }\n    }\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun get(key: String): String? = map[key]\n\n    /**\n     * Set css class present.\n     */\n    operator fun set(key: String, value: String?) =\n        if (value == null) {\n            this -= key\n        } else {\n            this += key to value\n        }\n\n    fun bind(key: String, property: ReadOnlyProperty<String>) {\n        if (key in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        bound[key] = Bound(key, null, property)\n    }\n\n    fun bind(key: String, property: ReadOnlyProperty<String?>) {\n        if (key in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        bound[key] = Bound(key, property, null)\n    }\n\n    fun property(key: String): Property<String?> {\n        if (key in bound) {\n            return bound[key]?.propertyNullable as? Property<String?> ?: throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        val property = de.westermann.kobserve.property.property(get(key))\n\n        bound[key] = Bound(key, property, null)\n\n        return property\n    }\n\n    fun unbind(key: String) {\n        if (key !in bound) {\n            throw IllegalArgumentException(\"Class is not bound!\")\n        }\n\n        bound[key]?.reference?.detach()\n        bound -= key\n    }\n\n    private inner class Bound(\n        val key: String,\n        val propertyNullable: ReadOnlyProperty<String?>?,\n        val property: ReadOnlyProperty<String>?\n    ) {\n\n        var reference: EventListener<Unit>? = null\n\n        fun set(value: String?) {\n            if (propertyNullable != null && propertyNullable is Property) {\n                propertyNullable.value = value\n            } else if (property != null && property is Property && value != null) {\n                property.value = value\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        }\n\n        init {\n            if (propertyNullable != null) {\n                reference = propertyNullable.onChange.reference {\n                    val value = propertyNullable.value\n                    if (value == null) {\n                        delete(map, key)\n                    } else {\n                        map[key] = value\n                    }\n                }\n\n                val value = propertyNullable.value\n                if (value == null) {\n                    delete(map, key)\n                } else {\n                    map[key] = value\n                }\n            } else if (property != null) {\n                reference = property.onChange.reference {\n                    map[key] = property.value\n                }\n\n                map[key] = property.value\n            }\n\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n    open val maxTouchPoints: Int\n    open val mediaDevices: MediaDevices\n    open val clipboard: Clipboard\n    fun vibrate(pattern: dynamic): Boolean\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit): Unit\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    open val rootElement: SVGSVGElement?\n    var title: String\n    open val referrer: String\n    var domain: String\n    open val activeElement: Element?\n    open val location: Location?\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun exitFullscreen(): Promise<Unit>\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close(): Unit\n    fun write(vararg text: String): Unit\n    fun writeln(vararg text: String): Unit\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear(): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(interface_: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n@kotlin.internal.InlineOnly inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindow {\n    override val performance: Performance\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close(): Unit\n    fun stop(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert(): Unit\n    fun alert(message: String): Unit\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print(): Unit\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int): Unit\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int): Unit\n    fun moveBy(x: Int, y: Int): Unit\n    fun resizeTo(x: Int, y: Int): Unit\n    fun resizeBy(x: Int, y: Int): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n@kotlin.internal.InlineOnly inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n//    fun namedItem(name: String): UnionElementOrHTMLCollection?\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n}\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection {\n//    override fun namedItem(name: String): UnionElementOrRadioNodeList?\n}\n//@kotlin.internal.InlineOnly override inline operator fun HTMLFormControlsCollection.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun forceSpellCheck(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap {\n}\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.set(name: String, value: String): Unit { asDynamic()[name] = value; }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var scope: String\n    open var workerType: WorkerType\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    @JsName(\"as\") open var as_: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, TexImageSource, HTMLOrSVGImageElement {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load(): Unit\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double): Unit\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause(): Unit\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue): Unit\n    fun removeCue(cue: TextTrackCue): Unit\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption(): Unit\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead(): Unit\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot(): Unit\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit(): Unit\n    fun reset(): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally): Unit\n    fun stepDown(n: Int = definedExternally): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun close(returnValue: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n\n    o[\"flatten\"] = flatten\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally): Unit\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save(): Unit\n    fun restore(): Unit\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double): Unit\n    fun rotate(angle: Double): Unit\n    fun translate(x: Double, y: Double): Unit\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun setTransform(transform: dynamic = definedExternally): Unit\n    fun resetTransform(): Unit\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n    var fillStyle: dynamic\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: dynamic, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun fillRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double): Unit\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath(): Unit\n    fun fill(fillRule: CanvasFillRule = definedExternally): Unit\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun stroke(): Unit\n    fun stroke(path: Path2D): Unit\n    fun clip(fillRule: CanvasFillRule = definedExternally): Unit\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun resetClip(): Unit\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element): Unit\n    fun drawFocusIfNeeded(path: Path2D, element: Element): Unit\n    fun scrollPathIntoView(): Unit\n    fun scrollPathIntoView(path: Path2D): Unit\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: dynamic, dx: Double, dy: Double): Unit\n    fun drawImage(image: dynamic, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n    fun drawImage(image: dynamic, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally): Unit\n    fun removeHitRegion(id: String): Unit\n    fun clearHitRegions(): Unit\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double): Unit\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double): Unit\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>): Unit\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath(): Unit\n    fun moveTo(x: Double, y: Double): Unit\n    fun lineTo(x: Double, y: Double): Unit\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally): Unit\n    override fun closePath(): Unit\n    override fun moveTo(x: Double, y: Double): Unit\n    override fun lineTo(x: Double, y: Double): Unit\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    override fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val region: String?\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?): Unit\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally): Unit\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n\n    o[\"extends\"] = extends\n\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int): Unit\n    fun getData(format: String): String\n    fun setData(format: String, data: String): Unit\n    fun clearData(format: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?): Unit\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally): Unit\n    fun back(): Unit\n    fun forward(): Unit\n    fun pushState(data: Any?, title: String, url: String? = definedExternally): Unit\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String): Unit\n    fun replace(url: String): Unit\n    fun reload(): Unit\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update(): Unit\n    fun abort(): Unit\n    fun swapCache(): Unit\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n    var onpointermove: ((PointerEvent) -> dynamic)?\n    var onpointerup: ((PointerEvent) -> dynamic)?\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n    var onpointerover: ((PointerEvent) -> dynamic)?\n    var onpointerout: ((PointerEvent) -> dynamic)?\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onblur: ((FocusEvent) -> dynamic)?\n    var oncancel: ((Event) -> dynamic)?\n    var oncanplay: ((Event) -> dynamic)?\n    var oncanplaythrough: ((Event) -> dynamic)?\n    var onchange: ((Event) -> dynamic)?\n    var onclick: ((MouseEvent) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n    var oncuechange: ((Event) -> dynamic)?\n    var ondblclick: ((MouseEvent) -> dynamic)?\n    var ondrag: ((DragEvent) -> dynamic)?\n    var ondragend: ((DragEvent) -> dynamic)?\n    var ondragenter: ((DragEvent) -> dynamic)?\n    var ondragexit: ((DragEvent) -> dynamic)?\n    var ondragleave: ((DragEvent) -> dynamic)?\n    var ondragover: ((DragEvent) -> dynamic)?\n    var ondragstart: ((DragEvent) -> dynamic)?\n    var ondrop: ((DragEvent) -> dynamic)?\n    var ondurationchange: ((Event) -> dynamic)?\n    var onemptied: ((Event) -> dynamic)?\n    var onended: ((Event) -> dynamic)?\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    var onfocus: ((FocusEvent) -> dynamic)?\n    var oninput: ((InputEvent) -> dynamic)?\n    var oninvalid: ((Event) -> dynamic)?\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onloadeddata: ((Event) -> dynamic)?\n    var onloadedmetadata: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onmousedown: ((MouseEvent) -> dynamic)?\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n    var onmousemove: ((MouseEvent) -> dynamic)?\n    var onmouseout: ((MouseEvent) -> dynamic)?\n    var onmouseover: ((MouseEvent) -> dynamic)?\n    var onmouseup: ((MouseEvent) -> dynamic)?\n    var onwheel: ((WheelEvent) -> dynamic)?\n    var onpause: ((Event) -> dynamic)?\n    var onplay: ((Event) -> dynamic)?\n    var onplaying: ((Event) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onratechange: ((Event) -> dynamic)?\n    var onreset: ((Event) -> dynamic)?\n    var onresize: ((Event) -> dynamic)?\n    var onscroll: ((Event) -> dynamic)?\n    var onseeked: ((Event) -> dynamic)?\n    var onseeking: ((Event) -> dynamic)?\n    var onselect: ((Event) -> dynamic)?\n    var onshow: ((Event) -> dynamic)?\n    var onstalled: ((Event) -> dynamic)?\n    var onsubmit: ((Event) -> dynamic)?\n    var onsuspend: ((Event) -> dynamic)?\n    var ontimeupdate: ((Event) -> dynamic)?\n    var ontoggle: ((Event) -> dynamic)?\n    var onvolumechange: ((Event) -> dynamic)?\n    var onwaiting: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n    var onbeforeprint: ((Event) -> dynamic)?\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n    var onlanguagechange: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onoffline: ((Event) -> dynamic)?\n    var ononline: ((Event) -> dynamic)?\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n    var onrejectionhandled: ((Event) -> dynamic)?\n    var onstorage: ((StorageEvent) -> dynamic)?\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    var onunload: ((Event) -> dynamic)?\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n    var oncut: ((ClipboardEvent) -> dynamic)?\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val caches: CacheStorage\n    val origin: String\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally): Unit\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally): Unit\n    fun createImageBitmap(image: dynamic, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: dynamic, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String): Unit\n    fun registerContentHandler(mimeType: String, url: String, title: String): Unit\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String): Unit\n    fun unregisterContentHandler(mimeType: String, url: String): Unit\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    override val length: Int\n    fun refresh(reload: Boolean = definedExternally): Unit\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close(): Unit\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindow?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindow?, ports: Array<MessagePort>): Unit\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindow? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindow? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close(): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n\n    o[\"withCredentials\"] = withCredentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Int\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally): Unit\n    fun send(data: String): Unit\n    fun send(data: Blob): Unit\n    fun send(data: ArrayBuffer): Unit\n    fun send(data: ArrayBufferView): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindow, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun start(): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String): Unit\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate(): Unit\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Int\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open var href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String): Unit\n    fun removeItem(key: String): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n@kotlin.internal.InlineOnly inline operator fun Storage.set(key: String, value: String): Unit { asDynamic()[key] = value; }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start(): Unit\n    fun stop(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n}\n\npublic external interface External {\n    fun AddSearchProvider(): Unit\n    fun IsSearchProviderInstalled(): Unit\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?): Unit\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n    val lastElementChild: Element?\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic): Unit\n    fun append(vararg nodes: dynamic): Unit\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n    val nextElementSibling: Element?\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic): Unit\n    fun after(vararg nodes: dynamic): Unit\n    fun replaceWith(vararg nodes: dynamic): Unit\n    fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override val length: Int\n    override fun item(index: Int): Node?\n}\n@kotlin.internal.InlineOnly inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : UnionElementOrHTMLCollection, ItemArrayLike<Element> {\n    override val length: Int\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally): Unit\n    fun disconnect(): Unit\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize(): Unit\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\npublic external interface ElementCreationOptions {\n    @JsName(\"is\") var is_: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(is_: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n\n    o[\"is\"] = is_\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrProcessingInstruction, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent {\n    open var innerHTML: String\n    open var outerHTML: String\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    fun requestFullscreen(): Promise<Unit>\n    fun setPointerCapture(pointerId: Int): Unit\n    fun releasePointerCapture(pointerId: Int): Unit\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun insertAdjacentHTML(position: String, text: String): Unit\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String): Unit\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String): Unit\n    fun removeAttribute(qualifiedName: String): Unit\n    fun removeAttributeNS(namespace: String?, localName: String): Unit\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String): Unit\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView(): Unit\n    fun scrollIntoView(arg: dynamic): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n\n    o[\"mode\"] = mode\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    override val length: Int\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n}\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String): Unit\n    fun insertData(offset: Int, data: String): Unit\n    fun deleteData(offset: Int, count: Int): Unit\n    fun replaceData(offset: Int, count: Int, data: String): Unit\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    fun splitText(offset: Int): Text\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun createContextualFragment(fragment: String): DocumentFragment\n    fun setStart(node: Node, offset: Int): Unit\n    fun setEnd(node: Node, offset: Int): Unit\n    fun setStartBefore(node: Node): Unit\n    fun setStartAfter(node: Node): Unit\n    fun setEndBefore(node: Node): Unit\n    fun setEndAfter(node: Node): Unit\n    fun collapse(toStart: Boolean = definedExternally): Unit\n    fun selectNode(node: Node): Unit\n    fun selectNodeContents(node: Node): Unit\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents(): Unit\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node): Unit\n    fun surroundContents(newParent: Node): Unit\n    fun cloneRange(): Range\n    fun detach(): Unit\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach(): Unit\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    override val length: Int\n    open var value: String\n    override fun item(index: Int): String?\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String): Unit\n    fun remove(vararg tokens: String): Unit\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String): Unit\n    fun supports(token: String): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n@kotlin.internal.InlineOnly inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?): Unit\n    fun addListener(listener: ((Event) -> Unit)?): Unit\n    fun removeListener(listener: EventListener?): Unit\n    fun removeListener(listener: ((Event) -> Unit)?): Unit\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\npublic external @marker interface UnionElementOrProcessingInstruction {\n}\n\npublic external @marker interface UnionElementOrHTMLCollection {\n}\n\npublic external @marker interface UnionElementOrRadioNodeList {\n}\n\npublic external @marker interface UnionHTMLOptGroupElementOrHTMLOptionElement {\n}\n\npublic external @marker interface UnionAudioTrackOrTextTrackOrVideoTrack {\n}\n\npublic external @marker interface UnionElementOrMouseEvent {\n}\n\npublic external @marker interface UnionMessagePortOrWindow {\n}\n\npublic external @marker interface UnionMessagePortOrServiceWorker {\n}\n\npublic external @marker interface HTMLOrSVGScriptElement {\n}\n\npublic external @marker interface RenderingContext {\n}\n\npublic external @marker interface HTMLOrSVGImageElement {\n}\n\n/* please, don't implement this interface! */\npublic external interface DocumentReadyState {\n    companion object\n}\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\npublic external interface CanPlayTypeResult {\n    companion object\n}\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackMode {\n    companion object\n}\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackKind {\n    companion object\n}\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\npublic external interface SelectionMode {\n    companion object\n}\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasFillRule {\n    companion object\n}\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\npublic external interface ImageSmoothingQuality {\n    companion object\n}\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineCap {\n    companion object\n}\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineJoin {\n    companion object\n}\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextAlign {\n    companion object\n}\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextBaseline {\n    companion object\n}\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasDirection {\n    companion object\n}\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollRestoration {\n    companion object\n}\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\npublic external interface ImageOrientation {\n    companion object\n}\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\npublic external interface PremultiplyAlpha {\n    companion object\n}\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\npublic external interface ColorSpaceConversion {\n    companion object\n}\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\npublic external interface ResizeQuality {\n    companion object\n}\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\npublic external interface BinaryType {\n    companion object\n}\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\npublic external interface WorkerType {\n    companion object\n}\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\npublic external interface ShadowRootMode {\n    companion object\n}\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollBehavior {\n    companion object\n}\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollLogicalPosition {\n    companion object\n}\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\npublic external interface CSSBoxType {\n    companion object\n}\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()\n\n","package de.westermann.kwebview\n\nimport kotlin.math.abs\nimport kotlin.math.min\n\n/**\n * @author lars\n */\ndata class Dimension(\n    val left: Double,\n    val top: Double,\n    val width: Double = 0.0,\n    val height: Double = 0.0\n) {\n\n    constructor(position: Point, size: Point = Point.ZERO) : this(position.x, position.y, size.x, size.y)\n\n    val position: Point\n        get() = Point(left, top)\n\n    val size: Point\n        get() = Point(width, height)\n\n    val right: Double\n        get() = left + width\n\n    val bottom: Double\n        get() = top + height\n\n    val center: Point\n        get() = Point(left + width / 2.0, top + height / 2.0)\n\n    val edges: Set<Point>\n        get() = setOf(\n            Point(left, top),\n            Point(right, top),\n            Point(left, bottom),\n            Point(right, bottom)\n        )\n\n    val normalized: Dimension\n        get() {\n            val l = min(left, right)\n            val t = min(top, bottom)\n            return Dimension(l, t, abs(width), abs(width))\n        }\n\n    operator fun contains(other: Dimension): Boolean = !(other.left > right ||\n            other.right < left ||\n            other.top > bottom ||\n            other.bottom < top)\n\n\n    operator fun contains(other: Point): Boolean {\n        val n = normalized\n        return (n.left <= other.x && (n.left + width) >= other.x)\n                && (n.top <= other.y && (n.top + height) >= other.y)\n    }\n\n    operator fun plus(point: Point) = copy(left + point.x, top + point.y)\n\n    companion object {\n        val ZERO = Dimension(0.0, 0.0)\n    }\n}","package de.westermann.kwebview\n\n@DslMarker\nannotation class KWebViewDsl\n","package de.westermann.kwebview\n\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sqrt\n\n/**\n * @author lars\n */\ndata class Point(\n        val x: Double,\n        val y: Double\n) {\n    constructor(x: Int, y: Int) : this(x.toDouble(), y.toDouble())\n\n    operator fun plus(number: Int) = Point(x + number, y + number)\n    operator fun plus(number: Double) = Point(x + number, y + number)\n    operator fun plus(point: Point) = Point(x + point.x, y + point.y)\n\n    operator fun minus(number: Int) = Point(x - number, y - number)\n    operator fun minus(number: Double) = Point(x - number, y - number)\n    operator fun minus(point: Point) = Point(x - point.x, y - point.y)\n\n    operator fun times(number: Int) = Point(x * number, y * number)\n    operator fun times(number: Double) = Point(x * number, y * number)\n    operator fun times(point: Point) = Point(x * point.x, y * point.y)\n\n    operator fun div(number: Int) = Point(x / number, y / number)\n    operator fun div(number: Double) = Point(x / number, y / number)\n    operator fun div(point: Point) = Point(x / point.x, y / point.y)\n\n    operator fun unaryMinus(): Point = Point(-x, -y)\n\n    fun min(): Double = min(x, y)\n    fun max(): Double = max(x, y)\n\n    val isZero: Boolean\n        get() = x == 0.0 && y == 0.0\n\n    companion object {\n        val ZERO = Point(0.0, 0.0)\n    }\n\n    val asPx: String\n        get() = \"${x}px, ${y}px\"\n\n    fun distance(): Double = sqrt(x * x + y * y)\n\n    infix fun distance(other: Point) = (this - other).distance()\n}\n","package de.westermann.robots.website.toolkit.view\n\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.UIEvent\n\n/**\n * @author lars\n */\n\nopen external class TouchEvent(type: String) : UIEvent {\n    open val changedTouches: TouchList\n    open val targetTouches: TouchList\n    open val touches: TouchList\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    fun getModifierState(keyArg: String): Boolean\n}\n\nopen external class TouchList() {\n    open val length: Int\n    open fun item(index: Int): Touch?\n}\n\nopen external class Touch() {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Int\n    open val screenY: Int\n    open val clientX: Int\n    open val clientY: Int\n    open val pageX: Int\n    open val pageY: Int\n}\n\noperator fun TouchList.get(index: Int) = item(index)\nfun TouchList.all(): List<Touch> = (0..length).map { item(it) }.filterNotNull()\nfun TouchList.find(identifier: Int): Touch? = all().find { it.identifier == identifier }","package de.westermann.kwebview\n\nimport de.westermann.kobserve.event.EventHandler\nimport de.westermann.robots.website.toolkit.view.TouchEvent\nimport de.westermann.robots.website.toolkit.view.get\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.xhr.FormData\nimport org.w3c.xhr.XMLHttpRequest\nimport kotlin.browser.document\nimport kotlin.browser.window\n\noperator fun HTMLCollection.iterator() = object : Iterator<HTMLElement> {\n    private var index = 0\n    override fun hasNext(): Boolean {\n        return index < this@iterator.length\n    }\n\n    override fun next(): HTMLElement {\n        return this@iterator.get(index++) as HTMLElement\n    }\n\n}\n\noperator fun NodeList.iterator() = object : Iterator<Node> {\n    private var index = 0\n    override fun hasNext(): Boolean {\n        return index < this@iterator.length\n    }\n\n    override fun next(): Node {\n        return this@iterator.get(index++)!!\n    }\n\n}\n\ninline fun <reified V : HTMLElement> createHtmlView(tag: String? = null): V {\n    var tagName: String\n    if (tag != null) {\n        tagName = tag\n    } else {\n        tagName = V::class.js.name.toLowerCase().replace(\"html([a-z]*)element\".toRegex(), \"$1\")\n        if (tagName.isBlank()) tagName = \"div\"\n        if (tagName == \"anchor\") tagName = \"a\"\n    }\n    return document.createElement(tagName) as V\n}\n\nfun String.toDashCase() = replace(\"([a-z])([A-Z])\".toRegex(), \"$1-$2\").toLowerCase()\n\ninline fun <reified T> EventHandler<T>.bind(element: HTMLElement, event: String) {\n    val listener = object : EventListener {\n        override fun handleEvent(event: Event) {\n            this@bind.emit(event as T)\n        }\n    }\n    var isAttached = false\n\n    val updateState = {\n        if (isEmpty() && isAttached) {\n            element.removeEventListener(event, listener)\n            isAttached = false\n        } else if (!isEmpty() && !isAttached) {\n            element.addEventListener(event, listener)\n            isAttached = true\n        }\n    }\n\n    onAttach = updateState\n    onDetach = updateState\n    updateState()\n}\n\nfun MouseEvent.toPoint(): Point = Point(clientX, clientY)\nfun TouchEvent.toPoint(): Point? = touches[0]?.let { Point(it.clientX, it.clientY) }\nfun DOMRect.toDimension(): Dimension = Dimension(x, y, width, height)\n\nfun Number.format(digits: Int): String = this.asDynamic().toFixed(digits)\n\nexternal fun delete(p: dynamic): Boolean = definedExternally\n\nfun delete(thing: dynamic, key: String) {\n    delete(thing[key])\n}\n\n/**\n * Apply current dom changes and recalculate all sizes. Executes the given block afterwards.\n *\n * @param timeout Optionally set a timeout for this call. Defaults to 1.\n * @param block Callback\n */\nfun async(timeout: Int = 1, block: () -> Unit): Int {\n    if (timeout < 1) throw IllegalArgumentException(\"Timeout must be greater than 0!\")\n    return window.setTimeout(block, timeout)\n}\n\nfun interval(delay: Int, block: () -> Unit): Int {\n    if (delay < 1) throw IllegalArgumentException(\"Delay must be greater than 0!\")\n    return window.setInterval(block, delay)\n}\n\nfun clearTimeout(id: Int) {\n    window.clearTimeout(id)\n}\n\nfun clearInterval(id: Int) {\n    window.clearInterval(id)\n}\n\nfun get(\n    url: String,\n    data: Map<String, String> = emptyMap(),\n    onError: (Int) -> Unit = {},\n    onSuccess: (String) -> Unit = {}\n) {\n    val xhttp = XMLHttpRequest()\n\n    xhttp.onreadystatechange = {\n        if (xhttp.readyState == 4.toShort()) {\n            if (xhttp.status == 200.toShort() || xhttp.status == 304.toShort()) {\n                onSuccess(xhttp.responseText)\n            } else {\n                onError(xhttp.status.toInt())\n            }\n        }\n    }\n    xhttp.open(\"GET\", url, true)\n\n    if (data.isNotEmpty()) {\n        xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        val formData = FormData()\n        for ((key, value) in data) {\n            formData.append(key, value)\n        }\n        xhttp.send(formData)\n    } else {\n        xhttp.send()\n    }\n}\n\nfun postForm(\n    url: String,\n    data: Map<String, String> = emptyMap(),\n    onError: (Int) -> Unit = {},\n    onSuccess: (String) -> Unit = {}\n) {\n    val xhttp = XMLHttpRequest()\n\n    xhttp.onreadystatechange = {\n        if (xhttp.readyState == 4.toShort()) {\n            console.log(xhttp.status)\n            if (xhttp.status == 200.toShort() || xhttp.status == 304.toShort()) {\n                onSuccess(xhttp.responseText)\n            } else {\n                onError(xhttp.status.toInt())\n            }\n        }\n    }\n    xhttp.open(\"POST\", url, true)\n\n    if (data.isNotEmpty()) {\n        xhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        val formData = FormData()\n        for ((key, value) in data) {\n            formData.append(key, value)\n        }\n        xhttp.send(formData)\n    } else {\n        xhttp.send()\n    }\n}\n\nfun postJson(\n    url: String,\n    data: dynamic,\n    onError: (Int) -> Unit = {},\n    onSuccess: (String) -> Unit = {}\n) {\n    val xhttp = XMLHttpRequest()\n\n    xhttp.onreadystatechange = {\n        if (xhttp.readyState == 4.toShort()) {\n            console.log(xhttp.status)\n            if (xhttp.status == 200.toShort() || xhttp.status == 304.toShort()) {\n                onSuccess(xhttp.responseText)\n            } else {\n                onError(xhttp.status.toInt())\n            }\n        }\n    }\n    xhttp.open(\"POST\", url, true)\n\n    if (data.isNotEmpty()) {\n        xhttp.setRequestHeader(\"Content-type\", \"application/json\");\n        xhttp.send(data)\n    } else {\n        xhttp.send()\n    }\n}\n\nfun jsonObject(block: (dynamic) -> Unit): dynamic {\n    val json = js(\"{}\")\n    block(json)\n    return json\n}\n\nfun jsonArray(block: (dynamic) -> Unit): dynamic {\n    val json = js(\"[]\")\n    block(json)\n    return json\n}\n","package de.westermann.kwebview\n\nimport de.westermann.kobserve.event.EventHandler\nimport org.w3c.dom.DragEvent\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.css.CSSStyleDeclaration\nimport org.w3c.dom.events.FocusEvent\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.events.WheelEvent\n\nabstract class View(view: HTMLElement = createHtmlView()) {\n\n    open val html: HTMLElement = view.also { view ->\n        this::class.simpleName?.let { name ->\n            view.classList.add(name.toDashCase())\n        }\n    }\n\n    val classList = ClassList(view.classList)\n    val dataset = DataSet(view.dataset)\n\n    var id by AttributeDelegate()\n\n    val clientLeft: Int\n        get() = html.clientLeft\n    val clientTop: Int\n        get() = html.clientTop\n    val clientWidth: Int\n        get() = html.clientWidth\n    val clientHeight: Int\n        get() = html.clientHeight\n\n    val offsetLeft: Int\n        get() = html.offsetLeft\n    val offsetTop: Int\n        get() = html.offsetTop\n    val offsetWidth: Int\n        get() = html.offsetWidth\n    val offsetHeight: Int\n        get() = html.offsetHeight\n\n    val offsetLeftTotal: Int\n        get() {\n            var element: HTMLElement? = html\n            var offset = 0\n            while (element != null) {\n                offset += element.offsetLeft\n                element = element.offsetParent as? HTMLElement\n            }\n            return offset\n        }\n    val offsetTopTotal: Int\n        get() {\n            var element: HTMLElement? = html\n            var offset = 0\n            while (element != null) {\n                offset += element.offsetTop\n                element = element.offsetParent as? HTMLElement\n            }\n            return offset\n        }\n\n    val dimension: Dimension\n        get() = html.getBoundingClientRect().toDimension()\n\n    val point: Point\n        get() = dimension.position\n\n    var title by AttributeDelegate()\n\n    val style = view.style\n    fun style(block: CSSStyleDeclaration.() -> Unit) {\n        block(style)\n    }\n\n    fun focus() {\n        html.focus()\n    }\n\n    fun blur() {\n        html.blur()\n    }\n\n    fun click() {\n        html.click()\n    }\n\n    val onClick = EventHandler<MouseEvent>()\n    val onDblClick = EventHandler<MouseEvent>()\n    val onContext = EventHandler<MouseEvent>()\n\n    val onMouseDown = EventHandler<MouseEvent>()\n    val onMouseMove = EventHandler<MouseEvent>()\n    val onMouseUp = EventHandler<MouseEvent>()\n    val onMouseEnter = EventHandler<MouseEvent>()\n    val onMouseLeave = EventHandler<MouseEvent>()\n\n    val onWheel = EventHandler<WheelEvent>()\n\n    val onKeyDown = EventHandler<KeyboardEvent>()\n    val onKeyPress = EventHandler<KeyboardEvent>()\n    val onKeyUp = EventHandler<KeyboardEvent>()\n\n    val onFocus = EventHandler<FocusEvent>()\n    val onBlur = EventHandler<FocusEvent>()\n\n\n    val onDragStart = EventHandler<DragEvent>()\n    val onDrag = EventHandler<DragEvent>()\n    val onDragEnter = EventHandler<DragEvent>()\n    val onDragLeave = EventHandler<DragEvent>()\n    val onDragOver = EventHandler<DragEvent>()\n    val onDrop = EventHandler<DragEvent>()\n    val onDragEnd = EventHandler<DragEvent>()\n\n    init {\n        onClick.bind(view, \"click\")\n        onDblClick.bind(view, \"dblclick\")\n        onContext.bind(view, \"contextmenu\")\n\n        onMouseDown.bind(view, \"mousedown\")\n        onMouseMove.bind(view, \"mousemove\")\n        onMouseUp.bind(view, \"mouseup\")\n        onMouseEnter.bind(view, \"mouseenter\")\n        onMouseLeave.bind(view, \"mouseleave\")\n\n        onWheel.bind(view, \"wheel\")\n\n        onKeyDown.bind(view, \"keydown\")\n        onKeyPress.bind(view, \"keypress\")\n        onKeyUp.bind(view, \"keyup\")\n\n        onFocus.bind(view, \"focus\")\n        onBlur.bind(view, \"blur\")\n\n        onDragStart.bind(view, \"dragstart\")\n        onDrag.bind(view, \"drag\")\n        onDragEnter.bind(view, \"dragenter\")\n        onDragLeave.bind(view, \"dragleave\")\n        onDragOver.bind(view, \"dragover\")\n        onDrop.bind(view, \"drop\")\n        onDragEnd.bind(view, \"dragend\")\n    }\n\n    companion object {\n        fun wrap(htmlElement: HTMLElement, init: View.() -> Unit = {}) = object : View(htmlElement) {}.also(init)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n",null,"package de.westermann.kwebview\n\nimport org.w3c.dom.HTMLElement\nimport kotlin.dom.clear\n\n/**\n * @author lars\n */\nabstract class ViewCollection<V : View>(view: HTMLElement = createHtmlView()) : View(view), Collection<V> {\n\n    protected val children: MutableList<V> = mutableListOf()\n\n    protected inline fun <reified T : HTMLElement> wrapContent(classes: String = \"\", transform: (T) -> V?) {\n        for (element in html.children.iterator()) {\n            val html = element as? T ?: continue\n            if (classes !in html.className) continue\n            children += transform(html) ?: continue\n        }\n    }\n\n    protected inline fun wrapContent(classes: String = \"\", transform: (HTMLElement) -> V?) = wrapContent<HTMLElement>(classes, transform)\n\n    fun append(view: V) {\n        children += view\n        html.appendChild(view.html)\n    }\n\n    operator fun plusAssign(view: V) = append(view)\n\n    fun prepand(view: V) {\n        children.add(0, view)\n        html.insertBefore(view.html, html.firstChild)\n    }\n\n    fun remove(view: V) {\n        if (children.contains(view)) {\n            children -= view\n            html.removeChild(view.html)\n        }\n    }\n\n    fun replace(oldView: V, newView: V) {\n        if (children.contains(oldView)) {\n            children.add(children.indexOf(oldView), newView)\n            html.insertBefore(newView.html, oldView.html)\n            children -= oldView\n            html.removeChild(oldView.html)\n        }\n    }\n\n    fun add(view: V) = append(view)\n\n    fun add(index: Int, view: V) {\n        if (index >= size) {\n            append(view)\n        } else {\n            html.insertBefore(view.html, children[index].html)\n            children.add(index, view)\n        }\n    }\n\n    operator fun get(index: Int): V {\n        return children[index]\n    }\n\n    fun removeAt(index: Int) {\n        if (index in 0 until size) {\n            remove(children[index])\n        }\n    }\n\n    fun toForeground(view: V) {\n        if (view in children && children.indexOf(view) < children.size - 1) {\n            remove(view)\n            append(view)\n        }\n    }\n\n    fun toBackground(view: V) {\n        if (view in children && children.indexOf(view) > 0) {\n            remove(view)\n            prepand(view)\n        }\n    }\n\n    fun first(): V = children.first()\n    fun last(): V = children.last()\n\n    operator fun minusAssign(view: V) = remove(view)\n\n    override fun isEmpty(): Boolean = children.isEmpty()\n\n    fun clear() {\n        children.clear()\n        html.clear()\n    }\n\n    override fun iterator(): Iterator<V> = children.iterator()\n\n    override val size: Int\n        get() = children.size\n\n    override fun contains(element: V) = children.contains(element)\n\n    override fun containsAll(elements: Collection<V>): Boolean = children.containsAll(elements)\n\n    operator fun V.unaryPlus() {\n        append(this)\n    }\n}\n","package de.westermann.kwebview\n\nimport de.westermann.kwebview.components.Label\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLInputElement\nimport kotlin.math.abs\nimport kotlin.random.Random\n\nabstract class ViewForLabel(\n    view: HTMLElement\n) : View(view) {\n\n    private var label: Label? = null\n\n    fun setLabel(label: Label) {\n        if (this.label != null) {\n            throw IllegalStateException(\"Label already set!\")\n        }\n\n        this.label = label\n\n        val id = id\n        if (id?.isNotBlank() == true) {\n            label.html.htmlFor = id\n        } else {\n            val newId = this::class.simpleName?.toDashCase() + \"-\" + generateId()\n            this.id = newId\n            label.html.htmlFor = newId\n        }\n    }\n\n    private var requiredInternal by AttributeDelegate(\"required\")\n    var required: Boolean\n        get() = requiredInternal != null\n        set(value) {\n            requiredInternal = if (value) \"required\" else null\n        }\n    private var readonlyInternal by AttributeDelegate(\"readonly\")\n    var readonly: Boolean\n        get() = readonlyInternal != null\n        set(value) {\n            readonlyInternal = if (value) \"readonly\" else null\n        }\n\n    var tabindex by AttributeDelegate()\n    fun preventTabStop() {\n        tabindex = \"-1\"\n    }\n\n    companion object {\n        fun generateId(length: Int = 16): String {\n            var str = \"\"\n            while (str.length <= length) {\n                str += abs(Random.nextLong()).toString(36)\n            }\n            return str.take(length)\n        }\n    }\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.i18n\nimport org.w3c.dom.DocumentReadyState\nimport org.w3c.dom.HTMLBodyElement\nimport org.w3c.dom.LOADING\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nobject Body : ViewCollection<View>(document.body\n        ?: throw NullPointerException(\"Access to body before body was loaded\")) {\n    override val html = super.html as HTMLBodyElement\n}\n\n@KWebViewDsl\nfun init(language: String? = null, block: Body.() -> Unit) {\n    var done = if (language == null) 1 else 2\n    if (document.readyState == DocumentReadyState.LOADING) {\n        window.onload = {\n            done -= 1\n            if (done <= 0) {\n                block(Body)\n            }\n        }\n    } else {\n        done -= 1\n        if (done <= 0) {\n            block(Body)\n        }\n    }\n    if (language != null) {\n        i18n.load(language) {\n            done -= 1\n            if (done <= 0) {\n                block(Body)\n            }\n        }\n    }\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLDivElement\n\nclass BoxView() : ViewCollection<View>(createHtmlView<HTMLDivElement>()) {\n    override val html = super.html as HTMLDivElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in BoxView>.boxView(vararg classes: String, init: BoxView.() -> Unit = {}): BoxView {\n    val view = BoxView()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLButtonElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass Button(view: HTMLButtonElement = createHtmlView()) : ViewCollection<View>(view) {\n\n    constructor(text: String) : this() {\n        this.text = text\n    }\n\n    override val html = super.html as HTMLButtonElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    companion object {\n        fun wrap(view: HTMLButtonElement) = Button(view)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(text: String = \"\", init: Button.() -> Unit = {}) =\n        Button(text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(text: ReadOnlyProperty<String>, init: Button.() -> Unit = {}) =\n        Button(text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(init: Button.() -> Unit = {}) =\n        Button().also(this::append).also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.ViewForLabel\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\n\nclass Checkbox(\n        initValue: Boolean = false,\n        view: HTMLInputElement = createHtmlView()\n) : ViewForLabel(view) {\n\n    override val html = super.html as HTMLInputElement\n\n    fun bind(property: ReadOnlyProperty<Boolean>) {\n        checkedProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<Boolean>) {\n        checkedProperty.bindBidirectional(property)\n    }\n\n    fun unbind() {\n        checkedProperty.unbind()\n    }\n\n    var checked: Boolean\n        get() = html.checked\n        set(value) {\n            html.checked = value\n            checkedProperty.invalidate()\n        }\n\n    val checkedProperty: Property<Boolean> = property(this::checked)\n\n    init {\n        checked = initValue\n        html.type = \"checkbox\"\n\n        var lastValue = checked\n        val changeListener = object : EventListener {\n            override fun handleEvent(event: Event) {\n                val value = checked\n                if (value != checkedProperty.value || value != lastValue) {\n                    lastValue = value\n                    checkedProperty.value = value\n                }\n            }\n        }\n\n        html.addEventListener(\"change\", changeListener)\n        html.addEventListener(\"keyup\", changeListener)\n        html.addEventListener(\"keypress\", changeListener)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: Boolean = false, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: ReadOnlyProperty<Boolean>, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value.value).also(this::append).also { it.bind(value) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: Property<Boolean>, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value.value).also(this::append).also { it.bind(value) }.also(init)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\n\nclass FilterList<T, V : View>(\n        val property: ReadOnlyProperty<T>,\n        val filter: Filter<T, V>\n) : ViewCollection<V>(createHtmlView()) {\n\n    private val content: MutableMap<T, V> = mutableMapOf()\n\n    fun update() {\n        val list = filter.filter(property.value)\n        var missing = list\n\n        for ((element, view) in content.entries) {\n            if (element in list) {\n                missing -= element\n            } else {\n                if (contains(view)) {\n                    remove(view)\n                }\n                if (!filter.useCache) {\n                    content -= element\n                }\n            }\n        }\n\n        for (element in missing) {\n            val view = filter.render(element)\n            append(view)\n            if (property is Property<T>) {\n                view.onClick {\n                    property.value = element\n                }\n            }\n            content[element] = view\n        }\n\n        clear()\n\n        for (element in list) {\n            append(content[element]!!)\n        }\n    }\n\n    init {\n        update()\n\n        property.onChange {\n            update()\n        }\n    }\n}\n\ninterface Filter<T, V : View> {\n    fun filter(partial: T): List<T>\n    fun render(element: T): V\n\n    val useCache: Boolean\n}\n\nclass StringFilter(\n        private val dataSet: List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String): List<String> {\n        val lower = partial.trim().toLowerCase()\n        return dataSet.filter {\n            it.toLowerCase().contains(lower)\n        }.sortedBy { it.length + it.toLowerCase().indexOf(partial) * 2 }\n    }\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = true\n}\n\nclass StaticStringFilter(\n        private val dataSet: List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String) = dataSet\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = true\n}\n\n\nclass DynamicStringFilter(\n        private val filter: (partial: String) -> List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String) = filter.invoke(partial)\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = false\n}\n\n\nfun <T, V : View> ViewCollection<in FilterList<T, V>>.filterList(property: ReadOnlyProperty<T>, filter: Filter<T, V>, init: FilterList<T, V>.() -> Unit = {}) =\n        FilterList(property, filter).also(this::append).also(init)","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLHeadingElement\n\nclass Heading(\n        val type: Type,\n        value: String = \"\"\n) : View(createHtmlView<HTMLHeadingElement>(type.tagName)) {\n\n    override val html = super.html as HTMLHeadingElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    init {\n        text = value\n    }\n\n    enum class Type(val tagName: String) {\n        H1(\"h1\"),\n        H2(\"h2\"),\n        H3(\"h3\"),\n        H4(\"h4\"),\n        H5(\"h5\"),\n        H6(\"h6\")\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h1(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H1, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h1(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H1, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h2(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H2, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h2(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H2, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h3(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H3, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h3(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H3, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h4(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H4, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h4(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H4, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h5(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H5, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h5(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H5, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h6(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H6, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h6(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H6, text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLSpanElement\nimport kotlin.dom.clear\n\n/**\n * Represents all kinds of icon views.\n *\n * @author lars\n */\nclass IconView(icon: Icon?) : View(createHtmlView<HTMLSpanElement>()) {\n\n    override val html = super.html as HTMLSpanElement\n\n    fun bind(property: ReadOnlyProperty<Icon?>) {\n        iconProperty.bind(property)\n    }\n\n    fun unbind() {\n        iconProperty.unbind()\n    }\n\n    var icon: Icon? = null\n        set(value) {\n            field = value\n            html.clear()\n            value?.let {\n                html.appendChild(it.element)\n            }\n            iconProperty.invalidate()\n        }\n\n    val iconProperty: Property<Icon?> = property(this::icon)\n\n    init {\n        this.icon = icon\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in IconView>.iconView(icon: Icon? = null, init: IconView.() -> Unit = {}) =\n        IconView(icon).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in IconView>.iconView(icon: ReadOnlyProperty<Icon?>, init: IconView.() -> Unit = {}) =\n        IconView(icon.value).also(this::append).also { it.bind(icon) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLImageElement\n\nclass ImageView(\n        src: String\n) : View(createHtmlView<HTMLImageElement>(\"img\")) {\n\n    override val html = super.html as HTMLImageElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        sourceProperty.bind(property)\n    }\n\n    fun unbind() {\n        sourceProperty.unbind()\n    }\n\n    var source: String\n        get() = html.src\n        set(value) {\n            html.src = value\n            sourceProperty.invalidate()\n        }\n\n    val sourceProperty: Property<String> = property(this::source)\n\n\n    var alt by AttributeDelegate(\"alt\")\n\n    init {\n        source = src\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in ImageView>.imageView(src: String = \"\", init: ImageView.() -> Unit = {}) =\n        ImageView(src).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in ImageView>.imageView(src: ReadOnlyProperty<String>, init: ImageView.() -> Unit = {}) =\n        ImageView(src.value).also(this::append).also { it.bind(src) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.ValidationProperty\nimport de.westermann.kobserve.not\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.KeyboardEvent\n\nclass InputView(\n    type: InputType,\n    initValue: String = \"\",\n    view: HTMLInputElement = createHtmlView()\n) : ViewForLabel(view) {\n\n    override val html = super.html as HTMLInputElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        valueProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<String>) {\n        valueProperty.bindBidirectional(property)\n    }\n\n    fun bind(property: ValidationProperty<String>) {\n        valueProperty.bindBidirectional(property)\n        invalidProperty.bind(!property.validProperty)\n    }\n\n    fun unbind() {\n        valueProperty.unbind()\n        if (invalidProperty.isBound) {\n            invalidProperty.unbind()\n        }\n    }\n\n    var value: String\n        get() = html.value\n        set(value) {\n            html.value = value\n            valueProperty.invalidate()\n        }\n\n    val valueProperty: Property<String> = property(this::value)\n\n    var placeholder: String\n        get() = html.placeholder\n        set(value) {\n            html.placeholder = value\n            placeholderProperty.invalidate()\n        }\n\n    val placeholderProperty: Property<String> = property(this::placeholder)\n\n    val invalidProperty by ClassDelegate(\"invalid\")\n    var invalid by invalidProperty\n\n    private var typeInternal by AttributeDelegate(\"type\")\n    var type: InputType?\n        get() = typeInternal?.let(InputType.Companion::find)\n        set(value) {\n            typeInternal = value?.html\n        }\n    private var minInternal by AttributeDelegate(\"min\")\n    var min: Double?\n        get() = minInternal?.toDoubleOrNull()\n        set(value) {\n            minInternal = value?.toString()\n        }\n    private var maxInternal by AttributeDelegate(\"max\")\n    var max: Double?\n        get() = maxInternal?.toDoubleOrNull()\n        set(value) {\n            maxInternal = value?.toString()\n        }\n    private var stepInternal by AttributeDelegate(\"step\")\n    var step: Double?\n        get() = stepInternal?.toDoubleOrNull()\n        set(value) {\n            stepInternal = value?.toString()\n        }\n\n    init {\n        value = initValue\n        this.type = type\n\n        var lastValue = value\n        val changeListener = object : EventListener {\n            override fun handleEvent(event: Event) {\n                val value = value\n                if (value != valueProperty.value || value != lastValue) {\n                    lastValue = value\n                    valueProperty.value = value\n                }\n\n                (event as? KeyboardEvent)?.let { e ->\n                    when (e.keyCode) {\n                        13, 27 -> blur()\n                    }\n                }\n            }\n        }\n\n        html.addEventListener(\"change\", changeListener)\n        html.addEventListener(\"keyup\", changeListener)\n        html.addEventListener(\"keypress\", changeListener)\n    }\n\n    companion object {\n        fun wrap(type: InputType, view: HTMLInputElement) = InputView(type, view.value, view)\n    }\n}\n\nenum class InputType(val html: String) {\n    TEXT(\"text\"),\n    NUMBER(\"number\"),\n    PASSWORD(\"password\"),\n    SEARCH(\"search\"),\n    FILE(\"file\");\n\n    companion object {\n        fun find(html: String): InputType? = values().find { it.html == html }\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: String = \"\", init: InputView.() -> Unit = {}) =\n    InputView(InputType.TEXT, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: ReadOnlyProperty<String>, init: InputView.() -> Unit = {}) =\n    InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: Property<String>, init: InputView.() -> Unit = {}) =\n    InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: ValidationProperty<String>, init: InputView.() -> Unit = {}) =\n    InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(\n    type: InputType = InputType.TEXT,\n    text: String = \"\",\n    init: InputView.() -> Unit = {}\n) =\n    InputView(type, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(\n    type: InputType = InputType.TEXT,\n    text: ReadOnlyProperty<String>,\n    init: InputView.() -> Unit = {}\n) =\n    InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(\n    type: InputType = InputType.TEXT,\n    text: Property<String>,\n    init: InputView.() -> Unit = {}\n) =\n    InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(\n    type: InputType = InputType.TEXT,\n    text: ValidationProperty<String>,\n    init: InputView.() -> Unit = {}\n) =\n    InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLLabelElement\n\n/**\n * Represents a html label element.\n *\n * @author lars\n */\nclass Label(\n    inputElement: ViewForLabel,\n    value: String = \"\"\n) : View(createHtmlView<HTMLLabelElement>()) {\n\n    override val html = super.html as HTMLLabelElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    init {\n        text = value\n\n        inputElement.setLabel(this)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Label>.label(inputElement: ViewForLabel, text: String = \"\", init: Label.() -> Unit = {}) =\n    Label(inputElement, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Label>.label(inputElement: ViewForLabel, text: ReadOnlyProperty<String>, init: Label.() -> Unit = {}) =\n    Label(inputElement, text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLAnchorElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass Link(view: HTMLAnchorElement = createHtmlView()) : View(view) {\n\n    constructor(target: String, view: HTMLAnchorElement = createHtmlView()): this(view) {\n        this.target = target\n    }\n\n    override val html = super.html as HTMLAnchorElement\n\n    var text: String?\n        get() = html.textContent\n        set(value) {\n            html.textContent = value\n        }\n\n    var target: String\n        get() = html.href\n        set(value) {\n            html.href = value\n        }\n\n    companion object {\n        fun wrap(view: HTMLAnchorElement) = Link(view)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Link>.link(target: String, text: String? = null, init: Link.() -> Unit = {}): Link {\n    val view = Link(target)\n    if (text != null) {\n        view.text = text\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLElement\n\nclass ListView<T : View>(view: HTMLElement = createHtmlView()) : ViewCollection<T>(view) {\n    override val html = super.html as HTMLDivElement\n\n    companion object {\n        fun <T : View> wrap(view: HTMLElement) = ListView<T>(view)\n    }\n}\n\n@KWebViewDsl\nfun <T : View> ViewCollection<in ListView<T>>.listView(\n    vararg classes: String,\n    init: ListView<T>.() -> Unit = {}\n): ListView<T> {\n    val view = ListView<T>()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport org.w3c.dom.Element\nimport kotlin.browser.document\n\n/**\n * List of material design icons.\n */\nenum class MaterialIcon(private val ligature: String) : Icon {\n    ROTATION_3D(\"3d_rotation\"),\n    AC_UNIT(\"ac_unit\"),\n    ACCESS_ALARM(\"access_alarm \"),\n    ACCESS_ALARMS(\"access_alarms\"),\n    ACCESS_TIME(\"access_time\"),\n    ACCESSIBILITY(\"accessibility\"),\n    ACCESSIBLE(\"accessible\"),\n    ACCOUNT_BALANCE(\"account_balance\"),\n    ACCOUNT_BALANCE_WALLET(\"account_balance_wallet\"),\n    ACCOUNT_BOX(\"account_box\"),\n    ACCOUNT_CIRCLE(\"account_circle\"),\n    ADB(\"adb\"),\n    ADD(\"add\"),\n    ADD_A_PHOTO(\"add_a_photo\"),\n    ADD_ALARM(\"add_alarm\"),\n    ADD_ALERT(\"add_alert\"),\n    ADD_BOX(\"add_box\"),\n    ADD_CIRCLE(\"add_circle\"),\n    ADD_CIRCLE_OUTLINE(\"add_circle_outline\"),\n    ADD_LOCATION(\"add_location \"),\n    ADD_SHOPPING_CART(\"add_shopping_cart\"),\n    ADD_TO_PHOTOS(\"add_to_photos\"),\n    ADD_TO_QUEUE(\"add_to_queue \"),\n    ADJUST(\"adjust\"),\n    AIRLINE_SEAT_FLAT(\"airline_seat_flat\"),\n    AIRLINE_SEAT_FLAT_ANGLED(\"airline_seat_flat_angled\"),\n    AIRLINE_SEAT_INDIVIDUAL_SUITE(\"airline_seat_individual_suite\"),\n    AIRLINE_SEAT_LEGROOM_EXTRA(\"airline_seat_legroom_extra\"),\n    AIRLINE_SEAT_LEGROOM_NORMAL(\"airline_seat_legroom_normal\"),\n    AIRLINE_SEAT_LEGROOM_REDUCED(\"airline_seat_legroom_reduced\"),\n    AIRLINE_SEAT_RECLINE_EXTRA(\"airline_seat_recline_extra\"),\n    AIRLINE_SEAT_RECLINE_NORMAL(\"airline_seat_recline_normal\"),\n    AIRPLANEMODE_ACTIVE(\"airplanemode_active\"),\n    AIRPLANEMODE_INACTIVE(\"airplanemode_inactive\"),\n    AIRPLAY(\"airplay\"),\n    AIRPORT_SHUTTLE(\"airport_shuttle\"),\n    ALARM(\"alarm\"),\n    ALARM_ADD(\"alarm_add\"),\n    ALARM_OFF(\"alarm_off\"),\n    ALARM_ON(\"alarm_on\"),\n    ALBUM(\"album\"),\n    ALL_INCLUSIVE(\"all_inclusive\"),\n    ALL_OUT(\"all_out\"),\n    ANDROID(\"android\"),\n    ANNOUNCEMENT(\"announcement \"),\n    APPS(\"apps\"),\n    ARCHIVE(\"archive\"),\n    ARROW_BACK(\"arrow_back\"),\n    ARROW_DOWNWARD(\"arrow_downward\"),\n    ARROW_DROP_DOWN(\"arrow_drop_down\"),\n    ARROW_DROP_DOWN_CIRCLE(\"arrow_drop_down_circle\"),\n    ARROW_DROP_UP(\"arrow_drop_up\"),\n    ARROW_FORWARD(\"arrow_forward\"),\n    ARROW_UPWARD(\"arrow_upward \"),\n    ART_TRACK(\"art_track\"),\n    ASPECT_RATIO(\"aspect_ratio \"),\n    ASSESSMENT(\"assessment\"),\n    ASSIGNMENT(\"assignment\"),\n    ASSIGNMENT_IND(\"assignment_ind\"),\n    ASSIGNMENT_LATE(\"assignment_late\"),\n    ASSIGNMENT_RETURN(\"assignment_return\"),\n    ASSIGNMENT_RETURNED(\"assignment_returned\"),\n    ASSIGNMENT_TURNED_IN(\"assignment_turned_in\"),\n    ASSISTANT(\"assistant\"),\n    ASSISTANT_PHOTO(\"assistant_photo\"),\n    ATTACH_FILE(\"attach_file\"),\n    ATTACH_MONEY(\"attach_money \"),\n    ATTACHMENT(\"attachment\"),\n    AUDIOTRACK(\"audiotrack\"),\n    AUTORENEW(\"autorenew\"),\n    AV_TIMER(\"av_timer\"),\n    BACKSPACE(\"backspace\"),\n    BACKUP(\"backup\"),\n    BATTERY_ALERT(\"battery_alert\"),\n    BATTERY_CHARGING_FULL(\"battery_charging_full\"),\n    BATTERY_FULL(\"battery_full \"),\n    BATTERY_STD(\"battery_std\"),\n    BATTERY_UNKNOWN(\"battery_unknown\"),\n    BEACH_ACCESS(\"beach_access \"),\n    BEENHERE(\"beenhere\"),\n    BLOCK(\"block\"),\n    BLUETOOTH(\"bluetooth\"),\n    BLUETOOTH_AUDIO(\"bluetooth_audio\"),\n    BLUETOOTH_CONNECTED(\"bluetooth_connected\"),\n    BLUETOOTH_DISABLED(\"bluetooth_disabled\"),\n    BLUETOOTH_SEARCHING(\"bluetooth_searching\"),\n    BLUR_CIRCULAR(\"blur_circular\"),\n    BLUR_LINEAR(\"blur_linear\"),\n    BLUR_OFF(\"blur_off\"),\n    BLUR_ON(\"blur_on\"),\n    BOOK(\"book\"),\n    BOOKMARK(\"bookmark\"),\n    BOOKMARK_BORDER(\"bookmark_border\"),\n    BORDER_ALL(\"border_all\"),\n    BORDER_BOTTOM(\"border_bottom\"),\n    BORDER_CLEAR(\"border_clear \"),\n    BORDER_COLOR(\"border_color \"),\n    BORDER_HORIZONTAL(\"border_horizontal\"),\n    BORDER_INNER(\"border_inner \"),\n    BORDER_LEFT(\"border_left\"),\n    BORDER_OUTER(\"border_outer \"),\n    BORDER_RIGHT(\"border_right \"),\n    BORDER_STYLE(\"border_style \"),\n    BORDER_TOP(\"border_top\"),\n    BORDER_VERTICAL(\"border_vertical\"),\n    BRANDING_WATERMARK(\"branding_watermark\"),\n    BRIGHTNESS_1(\"brightness_1 \"),\n    BRIGHTNESS_2(\"brightness_2 \"),\n    BRIGHTNESS_3(\"brightness_3 \"),\n    BRIGHTNESS_4(\"brightness_4 \"),\n    BRIGHTNESS_5(\"brightness_5 \"),\n    BRIGHTNESS_6(\"brightness_6 \"),\n    BRIGHTNESS_7(\"brightness_7 \"),\n    BRIGHTNESS_AUTO(\"brightness_auto\"),\n    BRIGHTNESS_HIGH(\"brightness_high\"),\n    BRIGHTNESS_LOW(\"brightness_low\"),\n    BRIGHTNESS_MEDIUM(\"brightness_medium\"),\n    BROKEN_IMAGE(\"broken_image \"),\n    BRUSH(\"brush\"),\n    BUBBLE_CHART(\"bubble_chart \"),\n    BUG_REPORT(\"bug_report\"),\n    BUILD(\"build\"),\n    BURST_MODE(\"burst_mode\"),\n    BUSINESS(\"business\"),\n    BUSINESS_CENTER(\"business_center\"),\n    CACHED(\"cached\"),\n    CAKE(\"cake\"),\n    CALL(\"call\"),\n    CALL_END(\"call_end\"),\n    CALL_MADE(\"call_made\"),\n    CALL_MERGE(\"call_merge\"),\n    CALL_MISSED(\"call_missed\"),\n    CALL_MISSED_OUTGOING(\"call_missed_outgoing\"),\n    CALL_RECEIVED(\"call_received\"),\n    CALL_SPLIT(\"call_split\"),\n    CALL_TO_ACTION(\"call_to_action\"),\n    CAMERA(\"camera\"),\n    CAMERA_ALT(\"camera_alt\"),\n    CAMERA_ENHANCE(\"camera_enhance\"),\n    CAMERA_FRONT(\"camera_front \"),\n    CAMERA_REAR(\"camera_rear\"),\n    CAMERA_ROLL(\"camera_roll\"),\n    CANCEL(\"cancel\"),\n    CARD_GIFTCARD(\"card_giftcard\"),\n    CARD_MEMBERSHIP(\"card_membership\"),\n    CARD_TRAVEL(\"card_travel\"),\n    CASINO(\"casino\"),\n    CAST(\"cast\"),\n    CAST_CONNECTED(\"cast_connected\"),\n    CENTER_FOCUS_STRONG(\"center_focus_strong\"),\n    CENTER_FOCUS_WEAK(\"center_focus_weak\"),\n    CHANGE_HISTORY(\"change_history\"),\n    CHAT(\"chat\"),\n    CHAT_BUBBLE(\"chat_bubble\"),\n    CHAT_BUBBLE_OUTLINE(\"chat_bubble_outline\"),\n    CHECK(\"checkUpdates\"),\n    CHECK_BOX(\"check_box\"),\n    CHECK_BOX_OUTLINE_BLANK(\"check_box_outline_blank\"),\n    CHECK_CIRCLE(\"check_circle \"),\n    CHEVRON_LEFT(\"chevron_left \"),\n    CHEVRON_RIGHT(\"chevron_right\"),\n    CHILD_CARE(\"child_care\"),\n    CHILD_FRIENDLY(\"child_friendly\"),\n    CHROME_RR_MODE(\"chrome_rr_mode\"),\n    CLASS(\"class\"),\n    CLEAR(\"clear\"),\n    CLEAR_ALL(\"clear_all\"),\n    CLOSE(\"close\"),\n    CLOSED_CAPTION(\"closed_caption\"),\n    CLOUD(\"cloud\"),\n    CLOUD_CIRCLE(\"cloud_circle \"),\n    CLOUD_DONE(\"cloud_done\"),\n    CLOUD_DOWNLOAD(\"cloud_download\"),\n    CLOUD_OFF(\"cloud_off\"),\n    CLOUD_QUEUE(\"cloud_queue\"),\n    CLOUD_UPLOAD(\"cloud_upload \"),\n    CODE(\"code\"),\n    COLLECTIONS(\"collections\"),\n    COLLECTIONS_BOOKMARK(\"collections_bookmark\"),\n    COLOR_LENS(\"color_lens\"),\n    COLORIZE(\"colorize\"),\n    COMMENT(\"comment\"),\n    COMPARE(\"compare\"),\n    COMPARE_ARROWS(\"compare_arrows\"),\n    COMPUTER(\"computer\"),\n    CONFIRMATION_NUMBER(\"confirmation_number\"),\n    CONTACT_MAIL(\"contact_mail \"),\n    CONTACT_PHONE(\"contact_phone\"),\n    CONTACTS(\"contacts\"),\n    CONTENT_COPY(\"content_copy \"),\n    CONTENT_CUT(\"content_cut\"),\n    CONTENT_PASTE(\"content_paste\"),\n    CONTROL_POINT(\"control_point\"),\n    CONTROL_POINT_DUPLICATE(\"control_point_duplicate\"),\n    COPYRIGHT(\"copyright\"),\n    CREATE(\"onCreate\"),\n    CREATE_NEW_FOLDER(\"create_new_folder\"),\n    CREDIT_CARD(\"credit_card\"),\n    CROP(\"crop\"),\n    CROP_16_9(\"crop_16_9\"),\n    CROP_3_2(\"crop_3_2\"),\n    CROP_5_4(\"crop_5_4\"),\n    CROP_7_5(\"crop_7_5\"),\n    CROP_DIN(\"crop_din\"),\n    CROP_FREE(\"crop_free\"),\n    CROP_LANDSCAPE(\"crop_landscape\"),\n    CROP_ORIGINAL(\"crop_original\"),\n    CROP_PORTRAIT(\"crop_portrait\"),\n    CROP_ROTATE(\"crop_rotate\"),\n    CROP_SQUARE(\"crop_square\"),\n    DASHBOARD(\"dashboard\"),\n    DATA_USAGE(\"data_usage\"),\n    DATE_RANGE(\"date_range\"),\n    DEHAZE(\"dehaze\"),\n    DELETE(\"delete\"),\n    DELETE_FOREVER(\"delete_forever\"),\n    DELETE_SWEEP(\"delete_sweep \"),\n    DESCRIPTION(\"description\"),\n    DESKTOP_MAC(\"desktop_mac\"),\n    DESKTOP_WINDOWS(\"desktop_windows\"),\n    DETAILS(\"details\"),\n    DEVELOPER_BOARD(\"developer_board\"),\n    DEVELOPER_MODE(\"developer_mode\"),\n    DEVICE_HUB(\"device_hub\"),\n    DEVICES(\"devices\"),\n    DEVICES_OTHER(\"devices_other\"),\n    DIALER_SIP(\"dialer_sip\"),\n    DIALPAD(\"dialpad\"),\n    DIRECTIONS(\"directions\"),\n    DIRECTIONS_BIKE(\"directions_bike\"),\n    DIRECTIONS_BOAT(\"directions_boat\"),\n    DIRECTIONS_BUS(\"directions_bus\"),\n    DIRECTIONS_CAR(\"directions_car\"),\n    DIRECTIONS_RAILWAY(\"directions_railway\"),\n    DIRECTIONS_RUN(\"directions_run\"),\n    DIRECTIONS_SUBWAY(\"directions_subway\"),\n    DIRECTIONS_TRANSIT(\"directions_transit\"),\n    DIRECTIONS_WALK(\"directions_walk\"),\n    DISC_FULL(\"disc_full\"),\n    DNS(\"dns\"),\n    DO_NOT_DISTURB(\"do_not_disturb\"),\n    DO_NOT_DISTURB_ALT(\"do_not_disturb_alt\"),\n    DO_NOT_DISTURB_OFF(\"do_not_disturb_off\"),\n    DO_NOT_DISTURB_ON(\"do_not_disturb_on\"),\n    DOCK(\"dock\"),\n    DOMAIN(\"domain\"),\n    DONE(\"done\"),\n    DONE_ALL(\"done_all\"),\n    DONUT_LARGE(\"donut_large\"),\n    DONUT_SMALL(\"donut_small\"),\n    DRAFTS(\"drafts\"),\n    DRAG_HANDLE(\"drag_handle\"),\n    DRIVE_ETA(\"drive_eta\"),\n    DVR(\"dvr\"),\n    EDIT(\"edit\"),\n    EDIT_LOCATION(\"edit_location\"),\n    EJECT(\"eject\"),\n    EMAIL(\"email\"),\n    ENHANCED_ENCRYPTION(\"enhanced_encryption\"),\n    EQUALIZER(\"equalizer\"),\n    ERROR(\"error\"),\n    ERROR_OUTLINE(\"error_outline\"),\n    EURO_SYMBOL(\"euro_symbol\"),\n    EV_STATION(\"ev_station\"),\n    EVENT(\"model\"),\n    EVENT_AVAILABLE(\"event_available\"),\n    EVENT_BUSY(\"event_busy\"),\n    EVENT_NOTE(\"event_note\"),\n    EVENT_SEAT(\"event_seat\"),\n    EXIT_TO_APP(\"exit_to_app\"),\n    EXPAND_LESS(\"expand_less\"),\n    EXPAND_MORE(\"expand_more\"),\n    EXPLICIT(\"explicit\"),\n    EXPLORE(\"explore\"),\n    EXPOSURE(\"exposure\"),\n    EXPOSURE_NEG_1(\"exposure_neg_1\"),\n    EXPOSURE_NEG_2(\"exposure_neg_2\"),\n    EXPOSURE_PLUS_1(\"exposure_plus_1\"),\n    EXPOSURE_PLUS_2(\"exposure_plus_2\"),\n    EXPOSURE_ZERO(\"exposure_zero\"),\n    EXTENSION(\"extension\"),\n    FACE(\"face\"),\n    FAST_FORWARD(\"fast_forward \"),\n    FAST_REWIND(\"fast_rewind\"),\n    FAVORITE(\"favorite\"),\n    FAVORITE_BORDER(\"favorite_border\"),\n    FEATURED_PLAY_LIST(\"featured_play_list\"),\n    FEATURED_VIDEO(\"featured_video\"),\n    FACK(\"fack\"),\n    FIBER_DVR(\"fiber_dvr\"),\n    FIBER_MANUAL_RECORD(\"fiber_manual_record\"),\n    FIBER_NEW(\"fiber_new\"),\n    FIBER_PIN(\"fiber_pin\"),\n    FIBER_SMART_RECORD(\"fiber_smart_record\"),\n    FILE_DOWNLOAD(\"file_download\"),\n    FILE_UPLOAD(\"file_upload\"),\n    FILTER(\"filter\"),\n    FILTER_1(\"filter_1\"),\n    FILTER_2(\"filter_2\"),\n    FILTER_3(\"filter_3\"),\n    FILTER_4(\"filter_4\"),\n    FILTER_5(\"filter_5\"),\n    FILTER_6(\"filter_6\"),\n    FILTER_7(\"filter_7\"),\n    FILTER_8(\"filter_8\"),\n    FILTER_9(\"filter_9\"),\n    FILTER_9_PLUS(\"filter_9_plus\"),\n    FILTER_B_AND_W(\"filter_b_and_w\"),\n    FILTER_CENTER_FOCUS(\"filter_center_focus\"),\n    FILTER_DRAMA(\"filter_drama \"),\n    FILTER_FRAMES(\"filter_frames\"),\n    FILTER_HDR(\"filter_hdr\"),\n    FILTER_LIST(\"filter_list\"),\n    FILTER_NONE(\"filter_none\"),\n    FILTER_TILT_SHIFT(\"filter_tilt_shift\"),\n    FILTER_VINTAGE(\"filter_vintage\"),\n    FIND_IN_PAGE(\"find_in_page \"),\n    FIND_REPLACE(\"find_replace \"),\n    FINGERPRINT(\"fingerprint\"),\n    FIRST_PAGE(\"first_page\"),\n    FITNESS_CENTER(\"fitness_center\"),\n    FLAG(\"flag\"),\n    FLARE(\"flare\"),\n    FLASH_AUTO(\"flash_auto\"),\n    FLASH_OFF(\"flash_off\"),\n    FLASH_ON(\"flash_on\"),\n    FLIGHT(\"flight\"),\n    FLIGHT_LAND(\"flight_land\"),\n    FLIGHT_TAKEOFF(\"flight_takeoff\"),\n    FLIP(\"flip\"),\n    FLIP_TO_BACK(\"flip_to_back \"),\n    FLIP_TO_FRONT(\"flip_to_front\"),\n    FOLDER(\"folder\"),\n    FOLDER_OPEN(\"folder_open\"),\n    FOLDER_SHARED(\"folder_shared\"),\n    FOLDER_SPECIAL(\"folder_special\"),\n    FONT_DOWNLOAD(\"font_download\"),\n    FORMAT_ALIGN_CENTER(\"format_align_center\"),\n    FORMAT_ALIGN_JUSTIFY(\"format_align_justify\"),\n    FORMAT_ALIGN_LEFT(\"format_align_left\"),\n    FORMAT_ALIGN_RIGHT(\"format_align_right\"),\n    FORMAT_BOLD(\"format_bold\"),\n    FORMAT_CLEAR(\"format_clear \"),\n    FORMAT_COLOR_FILL(\"format_color_fill\"),\n    FORMAT_COLOR_RESET(\"format_color_reset\"),\n    FORMAT_COLOR_TEXT(\"format_color_text\"),\n    FORMAT_INDENT_DECREASE(\"format_indent_decrease\"),\n    FORMAT_INDENT_INCREASE(\"format_indent_increase\"),\n    FORMAT_ITALIC(\"format_italic\"),\n    FORMAT_LINE_SPACING(\"format_line_spacing\"),\n    FORMAT_LIST_BULLETED(\"format_list_bulleted\"),\n    FORMAT_LIST_NUMBERED(\"format_list_numbered\"),\n    FORMAT_PAINT(\"format_paint \"),\n    FORMAT_QUOTE(\"format_quote \"),\n    FORMAT_SHAPES(\"format_shapes\"),\n    FORMAT_SIZE(\"format_size\"),\n    FORMAT_STRIKETHROUGH(\"format_strikethrough\"),\n    FORMAT_TEXTDIRECTION_L_TO_R(\"format_textdirection_l_to_r\"),\n    FORMAT_TEXTDIRECTION_R_TO_L(\"format_textdirection_r_to_l\"),\n    FORMAT_UNDERLINED(\"format_underlined\"),\n    FORUM(\"forum\"),\n    FORWARD(\"forward\"),\n    FORWARD_10(\"forward_10\"),\n    FORWARD_30(\"forward_30\"),\n    FORWARD_5(\"forward_5\"),\n    FREE_BREAKFAST(\"free_breakfast\"),\n    FULLSCREEN(\"fullscreen\"),\n    FULLSCREEN_EXIT(\"fullscreen_exit\"),\n    FUNCTIONS(\"functions\"),\n    G_TRANSLATE(\"g_translate\"),\n    GAMEPAD(\"gamepad\"),\n    GAMES(\"games\"),\n    GAVEL(\"gavel\"),\n    GESTURE(\"gesture\"),\n    GET_APP(\"get_app\"),\n    GIF(\"gif\"),\n    GOLF_COURSE(\"golf_course\"),\n    GPS_FIXED(\"gps_fixed\"),\n    GPS_NOT_FIXED(\"gps_not_fixed\"),\n    GPS_OFF(\"gps_off\"),\n    GRADE(\"grade\"),\n    GRADIENT(\"gradient\"),\n    GRAIN(\"grain\"),\n    GRAPHIC_EQ(\"graphic_eq\"),\n    GRID_OFF(\"grid_off\"),\n    GRID_ON(\"grid_on\"),\n    GROUP(\"group\"),\n    GROUP_ADD(\"group_add\"),\n    GROUP_WORK(\"group_work\"),\n    HD(\"hd\"),\n    HDR_OFF(\"hdr_off\"),\n    HDR_ON(\"hdr_on\"),\n    HDR_STRONG(\"hdr_strong\"),\n    HDR_WEAK(\"hdr_weak\"),\n    HEADSET(\"headset\"),\n    HEADSET_MIC(\"headset_mic\"),\n    HEALING(\"healing\"),\n    HEARING(\"hearing\"),\n    HELP(\"help\"),\n    HELP_OUTLINE(\"help_outline \"),\n    HIGH_QUALITY(\"high_quality \"),\n    HIGHLIGHT(\"highlight\"),\n    HIGHLIGHT_OFF(\"highlight_off\"),\n    HISTORY(\"history\"),\n    HOME(\"home\"),\n    HOT_TUB(\"hot_tub\"),\n    HOTEL(\"hotel\"),\n    HOURGLASS_EMPTY(\"hourglass_empty\"),\n    HOURGLASS_FULL(\"hourglass_full\"),\n    HTTP(\"http\"),\n    HTTPS(\"https\"),\n    IMAGE(\"image\"),\n    IMAGE_ASPECT_RATIO(\"image_aspect_ratio\"),\n    IMPORT_CONTACTS(\"import_contacts\"),\n    IMPORT_EXPORT(\"import_export\"),\n    IMPORTANT_DEVICES(\"important_devices\"),\n    INBOX(\"inbox\"),\n    INDETERMINATE_CHECK_BOX(\"indeterminate_check_box\"),\n    INFO(\"info\"),\n    INFO_OUTLINE(\"info_outline \"),\n    INPUT(\"input\"),\n    INSERT_CHART(\"insert_chart \"),\n    INSERT_COMMENT(\"insert_comment\"),\n    INSERT_DRIVE_FILE(\"insert_drive_file\"),\n    INSERT_EMOTICON(\"insert_emoticon\"),\n    INSERT_INVITATION(\"insert_invitation\"),\n    INSERT_LINK(\"insert_link\"),\n    INSERT_PHOTO(\"insert_photo \"),\n    INVERT_COLORS(\"invert_colors\"),\n    INVERT_COLORS_OFF(\"invert_colors_off\"),\n    ISO(\"iso\"),\n    KEYBOARD(\"keyboard\"),\n    KEYBOARD_ARROW_DOWN(\"keyboard_arrow_down\"),\n    KEYBOARD_ARROW_LEFT(\"keyboard_arrow_left\"),\n    KEYBOARD_ARROW_RIGHT(\"keyboard_arrow_right\"),\n    KEYBOARD_ARROW_UP(\"keyboard_arrow_up\"),\n    KEYBOARD_BACKSPACE(\"keyboard_backspace\"),\n    KEYBOARD_CAPSLOCK(\"keyboard_capslock\"),\n    KEYBOARD_HIDE(\"keyboard_hide\"),\n    KEYBOARD_RETURN(\"keyboard_return\"),\n    KEYBOARD_TAB(\"keyboard_tab \"),\n    KEYBOARD_VOICE(\"keyboard_voice\"),\n    KITCHEN(\"kitchen\"),\n    LABEL(\"label\"),\n    LABEL_OUTLINE(\"label_outline\"),\n    LANDSCAPE(\"landscape\"),\n    LANGUAGE(\"language\"),\n    LAPTOP(\"laptop\"),\n    LAPTOP_CHROMEBOOK(\"laptop_chromebook\"),\n    LAPTOP_MAC(\"laptop_mac\"),\n    LAPTOP_WINDOWS(\"laptop_windows\"),\n    LAST_PAGE(\"last_page\"),\n    LAUNCH(\"launch\"),\n    LAYERS(\"layers\"),\n    LAYERS_CLEAR(\"layers_clear \"),\n    LEAK_ADD(\"leak_add\"),\n    LEAK_REMOVE(\"leak_remove\"),\n    LENS(\"lens\"),\n    LIBRARY_ADD(\"library_add\"),\n    LIBRARY_BOOKS(\"library_books\"),\n    LIBRARY_MUSIC(\"library_music\"),\n    LIGHTBULB_OUTLINE(\"lightbulb_outline\"),\n    LINE_STYLE(\"line_style\"),\n    LINE_WEIGHT(\"line_weight\"),\n    LINEAR_SCALE(\"linear_scale \"),\n    LINK(\"link\"),\n    LINKED_CAMERA(\"linked_camera\"),\n    LIST(\"list\"),\n    LIVE_HELP(\"live_help\"),\n    LIVE_TV(\"live_tv\"),\n    LOCAL_ACTIVITY(\"local_activity\"),\n    LOCAL_AIRPORT(\"local_airport\"),\n    LOCAL_ATM(\"local_atm\"),\n    LOCAL_BAR(\"local_bar\"),\n    LOCAL_CAFE(\"local_cafe\"),\n    LOCAL_CAR_WASH(\"local_car_wash\"),\n    LOCAL_CONVENIENCE_STORE(\"local_convenience_store\"),\n    LOCAL_DINING(\"local_dining \"),\n    LOCAL_DRINK(\"local_drink\"),\n    LOCAL_FLORIST(\"local_florist\"),\n    LOCAL_GAS_STATION(\"local_gas_station\"),\n    LOCAL_GROCERY_STORE(\"local_grocery_store\"),\n    LOCAL_HOSPITAL(\"local_hospital\"),\n    LOCAL_HOTEL(\"local_hotel\"),\n    LOCAL_LAUNDRY_SERVICE(\"local_laundry_service\"),\n    LOCAL_LIBRARY(\"local_library\"),\n    LOCAL_MALL(\"local_mall\"),\n    LOCAL_MOVIES(\"local_movies \"),\n    LOCAL_OFFER(\"local_offer\"),\n    LOCAL_PARKING(\"local_parking\"),\n    LOCAL_PHARMACY(\"local_pharmacy\"),\n    LOCAL_PHONE(\"local_phone\"),\n    LOCAL_PIZZA(\"local_pizza\"),\n    LOCAL_PLAY(\"local_play\"),\n    LOCAL_POST_OFFICE(\"local_post_office\"),\n    LOCAL_PRINTSHOP(\"local_printshop\"),\n    LOCAL_SEE(\"local_see\"),\n    LOCAL_SHIPPING(\"local_shipping\"),\n    LOCAL_TAXI(\"local_taxi\"),\n    LOCATION_CITY(\"location_city\"),\n    LOCATION_DISABLED(\"location_disabled\"),\n    LOCATION_OFF(\"location_off \"),\n    LOCATION_ON(\"location_on\"),\n    LOCATION_SEARCHING(\"location_searching\"),\n    LOCK(\"lock\"),\n    LOCK_OPEN(\"lock_open\"),\n    LOCK_OUTLINE(\"lock_outline \"),\n    LOOKS(\"looks\"),\n    LOOKS_3(\"looks_3\"),\n    LOOKS_4(\"looks_4\"),\n    LOOKS_5(\"looks_5\"),\n    LOOKS_6(\"looks_6\"),\n    LOOKS_ONE(\"looks_one\"),\n    LOOKS_TWO(\"looks_two\"),\n    LOOP(\"loop\"),\n    LOUPE(\"loupe\"),\n    LOW_PRIORITY(\"low_priority \"),\n    LOYALTY(\"loyalty\"),\n    MAIL(\"mail\"),\n    MAIL_OUTLINE(\"mail_outline \"),\n    MAP(\"map\"),\n    MARKUNREAD(\"markunread\"),\n    MARKUNREAD_MAILBOX(\"markunread_mailbox\"),\n    MEMORY(\"memory\"),\n    MENU(\"menu\"),\n    MERGE_TYPE(\"merge_type\"),\n    MESSAGE(\"message\"),\n    MIC(\"mic\"),\n    MIC_NONE(\"mic_none\"),\n    MIC_OFF(\"mic_off\"),\n    MMS(\"mms\"),\n    MODE_COMMENT(\"mode_comment \"),\n    MODE_EDIT(\"mode_edit\"),\n    MONETIZATION_ON(\"monetization_on\"),\n    MONEY_OFF(\"money_off\"),\n    MONOCHROME_PHOTOS(\"monochrome_photos\"),\n    MOOD(\"mood\"),\n    MOOD_BAD(\"mood_bad\"),\n    MORE(\"more\"),\n    MORE_HORIZ(\"more_horiz\"),\n    MORE_VERT(\"more_vert\"),\n    MOTORCYCLE(\"motorcycle\"),\n    MOUSE(\"mouse\"),\n    MOVE_TO_INBOX(\"move_to_inbox\"),\n    MOVIE(\"movie\"),\n    MOVIE_CREATION(\"movie_creation\"),\n    MOVIE_FILTER(\"movie_filter \"),\n    MULTILINE_CHART(\"multiline_chart\"),\n    MUSIC_NOTE(\"music_note\"),\n    MUSIC_VIDEO(\"music_video\"),\n    MY_LOCATION(\"my_location\"),\n    NATURE(\"nature\"),\n    NATURE_PEOPLE(\"nature_people\"),\n    NAVIGATE_BEFORE(\"navigate_before\"),\n    NAVIGATE_NEXT(\"navigate_next\"),\n    NAVIGATION(\"navigationDrawer\"),\n    NEAR_ME(\"near_me\"),\n    NETWORK_CELL(\"network_cell \"),\n    NETWORK_CHECK(\"network_check\"),\n    NETWORK_LOCKED(\"network_locked\"),\n    NETWORK_WIFI(\"network_wifi \"),\n    NEW_RELEASES(\"new_releases \"),\n    NEXT_WEEK(\"next_week\"),\n    NFC(\"nfc\"),\n    NO_ENCRYPTION(\"no_encryption\"),\n    NO_SIM(\"no_sim\"),\n    NOT_INTERESTED(\"not_interested\"),\n    NOTE(\"note\"),\n    NOTE_ADD(\"note_add\"),\n    NOTIFICATIONS(\"notifications\"),\n    NOTIFICATIONS_ACTIVE(\"notifications_active\"),\n    NOTIFICATIONS_NONE(\"notifications_none\"),\n    NOTIFICATIONS_OFF(\"notifications_off\"),\n    NOTIFICATIONS_PAUSED(\"notifications_paused\"),\n    OFFLINE_PIN(\"offline_pin\"),\n    ONDEMAND_VIDEO(\"ondemand_video\"),\n    OPACITY(\"opacity\"),\n    OPEN_IN_BROWSER(\"open_in_browser\"),\n    OPEN_IN_NEW(\"open_in_new\"),\n    OPEN_WITH(\"open_with\"),\n    PAGES(\"pages\"),\n    PAGEVIEW(\"pageview\"),\n    PALETTE(\"palette\"),\n    PAN_TOOL(\"pan_tool\"),\n    PANORAMA(\"panorama\"),\n    PANORAMA_FISH_EYE(\"panorama_fish_eye\"),\n    PANORAMA_HORIZONTAL(\"panorama_horizontal\"),\n    PANORAMA_VERTICAL(\"panorama_vertical\"),\n    PANORAMA_WIDE_ANGLE(\"panorama_wide_angle\"),\n    PARTY_MODE(\"party_mode\"),\n    PAUSE(\"pause\"),\n    PAUSE_CIRCLE_FILLED(\"pause_circle_filled\"),\n    PAUSE_CIRCLE_OUTLINE(\"pause_circle_outline\"),\n    PAYMENT(\"payment\"),\n    PEOPLE(\"people\"),\n    PEOPLE_OUTLINE(\"people_outline\"),\n    PERM_CAMERA_MIC(\"perm_camera_mic\"),\n    PERM_CONTACT_CALENDAR(\"perm_contact_calendar\"),\n    PERM_DATA_SETTING(\"perm_data_setting\"),\n    PERM_DEVICE_INFORMATION(\"perm_device_information\"),\n    PERM_IDENTITY(\"perm_identity\"),\n    PERM_MEDIA(\"perm_media\"),\n    PERM_PHONE_MSG(\"perm_phone_msg\"),\n    PERM_SCAN_WIFI(\"perm_scan_wifi\"),\n    PERSON(\"person\"),\n    PERSON_ADD(\"person_add\"),\n    PERSON_OUTLINE(\"person_outline\"),\n    PERSON_PIN(\"person_pin\"),\n    PERSON_PIN_CIRCLE(\"person_pin_circle\"),\n    PERSONAL_VIDEO(\"personal_video\"),\n    PETS(\"pets\"),\n    PHONE(\"phone\"),\n    PHONE_ANDROID(\"phone_android\"),\n    PHONE_BLUETOOTH_SPEAKER(\"phone_bluetooth_speaker\"),\n    PHONE_FORWARDED(\"phone_forwarded\"),\n    PHONE_IN_TALK(\"phone_in_talk\"),\n    PHONE_IPHONE(\"phone_iphone \"),\n    PHONE_LOCKED(\"phone_locked \"),\n    PHONE_MISSED(\"phone_missed \"),\n    PHONE_PAUSED(\"phone_paused \"),\n    PHONELINK(\"phonelink\"),\n    PHONELINK_ERASE(\"phonelink_erase\"),\n    PHONELINK_LOCK(\"phonelink_lock\"),\n    PHONELINK_OFF(\"phonelink_off\"),\n    PHONELINK_RING(\"phonelink_ring\"),\n    PHONELINK_SETUP(\"phonelink_setup\"),\n    PHOTO(\"photo\"),\n    PHOTO_ALBUM(\"photo_album\"),\n    PHOTO_CAMERA(\"photo_camera \"),\n    PHOTO_FILTER(\"photo_filter \"),\n    PHOTO_LIBRARY(\"photo_library\"),\n    PHOTO_SIZE_SELECT_ACTUAL(\"photo_size_select_actual\"),\n    PHOTO_SIZE_SELECT_LARGE(\"photo_size_select_large\"),\n    PHOTO_SIZE_SELECT_SMALL(\"photo_size_select_small\"),\n    PICTURE_AS_PDF(\"picture_as_pdf\"),\n    PICTURE_IN_PICTURE(\"picture_in_picture\"),\n    PICTURE_IN_PICTURE_ALT(\"picture_in_picture_alt\"),\n    PIE_CHART(\"pie_chart\"),\n    PIE_CHART_OUTLINED(\"pie_chart_outlined\"),\n    PIN_DROP(\"pin_drop\"),\n    PLACE(\"place\"),\n    PLAY_ARROW(\"play_arrow\"),\n    PLAY_CIRCLE_FILLED(\"play_circle_filled\"),\n    PLAY_CIRCLE_OUTLINE(\"play_circle_outline\"),\n    PLAY_FOR_WORK(\"play_for_work\"),\n    PLAYLIST_ADD(\"playlist_add \"),\n    PLAYLIST_ADD_CHECK(\"playlist_add_check\"),\n    PLAYLIST_PLAY(\"playlist_play\"),\n    PLUS_ONE(\"plus_one\"),\n    POLL(\"poll\"),\n    POLYMER(\"polymer\"),\n    POOL(\"pool\"),\n    PORTABLE_WIFI_OFF(\"portable_wifi_off\"),\n    PORTRAIT(\"portrait\"),\n    POWER(\"power\"),\n    POWER_INPUT(\"power_input\"),\n    POWER_SETTINGS_NEW(\"power_settings_new\"),\n    PREGNANT_WOMAN(\"pregnant_woman\"),\n    PRESENT_TO_ALL(\"present_to_all\"),\n    PRINT(\"print\"),\n    PRIORITY_HIGH(\"priority_high\"),\n    PUBLIC(\"public\"),\n    PUBLISH(\"publish\"),\n    QUERY_BUILDER(\"query_builder\"),\n    QUESTION_ANSWER(\"question_answer\"),\n    QUEUE(\"queue\"),\n    QUEUE_MUSIC(\"queue_music\"),\n    QUEUE_PLAY_NEXT(\"queue_play_next\"),\n    RADIO(\"radio\"),\n    RADIO_BUTTON_CHECKED(\"radio_button_checked\"),\n    RADIO_BUTTON_UNCHECKED(\"radio_button_unchecked\"),\n    RATE_REVIEW(\"rate_review\"),\n    RECEIPT(\"receipt\"),\n    RECENT_ACTORS(\"recent_actors\"),\n    RECORD_VOICE_OVER(\"record_voice_over\"),\n    RM(\"rm\"),\n    REDO(\"redo\"),\n    REFRESH(\"refresh\"),\n    REMOVE(\"remove\"),\n    REMOVE_CIRCLE(\"remove_circle\"),\n    REMOVE_CIRCLE_OUTLINE(\"remove_circle_outline\"),\n    REMOVE_FROM_QUEUE(\"remove_from_queue\"),\n    REMOVE_RED_EYE(\"remove_red_eye\"),\n    REMOVE_SHOPPING_CART(\"remove_shopping_cart\"),\n    REORDER(\"reorder\"),\n    REPEAT(\"repeat\"),\n    REPEAT_ONE(\"repeat_one\"),\n    REPLAY(\"replay\"),\n    REPLAY_10(\"replay_10\"),\n    REPLAY_30(\"replay_30\"),\n    REPLAY_5(\"replay_5\"),\n    REPLY(\"reply\"),\n    REPLY_ALL(\"reply_all\"),\n    REPORT(\"report\"),\n    REPORT_PROBLEM(\"report_problem\"),\n    RESTAURANT(\"restaurant\"),\n    RESTAURANT_MENU(\"restaurant_menu\"),\n    RESTORE(\"restore\"),\n    RESTORE_PAGE(\"restore_page \"),\n    RING_VOLUME(\"ring_volume\"),\n    ROOM(\"room\"),\n    ROOM_SERVICE(\"room_service \"),\n    ROTATE_90_DEGREES_CCW(\"rotate_90_degrees_ccw\"),\n    ROTATE_LEFT(\"rotate_left\"),\n    ROTATE_RIGHT(\"rotate_right \"),\n    ROUNDED_CORNER(\"rounded_corner\"),\n    ROUTER(\"router\"),\n    ROWING(\"rowing\"),\n    RSS_FEED(\"rss_feed\"),\n    RV_HOOKUP(\"rv_hookup\"),\n    SATELLITE(\"satellite\"),\n    SAVE(\"save\"),\n    SCANNER(\"scanner\"),\n    SCHEDULE(\"schedule\"),\n    SCHOOL(\"school\"),\n    SCREEN_LOCK_LANDSCAPE(\"screen_lock_landscape\"),\n    SCREEN_LOCK_PORTRAIT(\"screen_lock_portrait\"),\n    SCREEN_LOCK_ROTATION(\"screen_lock_rotation\"),\n    SCREEN_ROTATION(\"screen_rotation\"),\n    SCREEN_SHARE(\"screen_share \"),\n    SD_CARD(\"sd_card\"),\n    SD_STORAGE(\"sd_storage\"),\n    SEARCH(\"search\"),\n    SECURITY(\"security\"),\n    SELECT_ALL(\"select_all\"),\n    SEND(\"send\"),\n    SENTIMENT_DISSATISFIED(\"sentiment_dissatisfied\"),\n    SENTIMENT_NEUTRAL(\"sentiment_neutral\"),\n    SENTIMENT_SATISFIED(\"sentiment_satisfied\"),\n    SENTIMENT_VERY_DISSATISFIED(\"sentiment_very_dissatisfied\"),\n    SENTIMENT_VERY_SATISFIED(\"sentiment_very_satisfied\"),\n    SETTINGS(\"settings\"),\n    SETTINGS_APPLICATIONS(\"settings_applications\"),\n    SETTINGS_BACKUP_RESTORE(\"settings_backup_restore\"),\n    SETTINGS_BLUETOOTH(\"settings_bluetooth\"),\n    SETTINGS_BRIGHTNESS(\"settings_brightness\"),\n    SETTINGS_CELL(\"settings_cell\"),\n    SETTINGS_ETHERNET(\"settings_ethernet\"),\n    SETTINGS_INPUT_ANTENNA(\"settings_input_antenna\"),\n    SETTINGS_INPUT_COMPONENT(\"settings_input_component\"),\n    SETTINGS_INPUT_COMPOSITE(\"settings_input_composite\"),\n    SETTINGS_INPUT_HDMI(\"settings_input_hdmi\"),\n    SETTINGS_INPUT_SVIDEO(\"settings_input_svideo\"),\n    SETTINGS_OVERSCAN(\"settings_overscan\"),\n    SETTINGS_PHONE(\"settings_phone\"),\n    SETTINGS_POWER(\"settings_power\"),\n    SETTINGS_REMOTE(\"settings_remote\"),\n    SETTINGS_SYSTEM_DAYDREAM(\"settings_system_daydream\"),\n    SETTINGS_VOICE(\"settings_voice\"),\n    SHARE(\"share\"),\n    SHOP(\"shop\"),\n    SHOP_TWO(\"shop_two\"),\n    SHOPPING_BASKET(\"shopping_basket\"),\n    SHOPPING_CART(\"shopping_cart\"),\n    SHORT_TEXT(\"short_text\"),\n    SHOW_CHART(\"show_chart\"),\n    SHUFFLE(\"shuffle\"),\n    SIGNAL_CELLULAR_4_BAR(\"signal_cellular_4_bar\"),\n    SIGNAL_CELLULAR_CONNECTED_NO_INTERNET_4_BAR(\"signal_cellular_connected_no_internet_4_bar\"),\n    SIGNAL_CELLULAR_NO_SIM(\"signal_cellular_no_sim\"),\n    SIGNAL_CELLULAR_NULL(\"signal_cellular_null\"),\n    SIGNAL_CELLULAR_OFF(\"signal_cellular_off\"),\n    SIGNAL_WIFI_4_BAR(\"signal_wifi_4_bar\"),\n    SIGNAL_WIFI_4_BAR_LOCK(\"signal_wifi_4_bar_lock\"),\n    SIGNAL_WIFI_OFF(\"signal_wifi_off\"),\n    SIM_CARD(\"sim_card\"),\n    SIM_CARD_ALERT(\"sim_card_alert\"),\n    SKIP_NEXT(\"skip_next\"),\n    SKIP_PREVIOUS(\"skip_previous\"),\n    SLIDESHOW(\"slideshow\"),\n    SLOW_MOTION_VIDEO(\"slow_motion_video\"),\n    SMARTPHONE(\"smartphone\"),\n    SMOKE_FREE(\"smoke_free\"),\n    SMOKING_ROOMS(\"smoking_rooms\"),\n    SMS(\"sms\"),\n    SMS_FAILED(\"sms_failed\"),\n    SNOOZE(\"snooze\"),\n    SORT(\"sort\"),\n    SORT_BY_ALPHA(\"sort_by_alpha\"),\n    SPA(\"spa\"),\n    SPACE_BAR(\"space_bar\"),\n    SPEAKER(\"speaker\"),\n    SPEAKER_GROUP(\"speaker_group\"),\n    SPEAKER_NOTES(\"speaker_notes\"),\n    SPEAKER_NOTES_OFF(\"speaker_notes_off\"),\n    SPEAKER_PHONE(\"speaker_phone\"),\n    SPELLCHECK(\"spellcheck\"),\n    STAR(\"star\"),\n    STAR_BORDER(\"star_border\"),\n    STAR_HALF(\"star_half\"),\n    STARS(\"stars\"),\n    STAY_CURRENT_LANDSCAPE(\"stay_current_landscape\"),\n    STAY_CURRENT_PORTRAIT(\"stay_current_portrait\"),\n    STAY_PRIMARY_LANDSCAPE(\"stay_primary_landscape\"),\n    STAY_PRIMARY_PORTRAIT(\"stay_primary_portrait\"),\n    STOP(\"stop\"),\n    STOP_SCREEN_SHARE(\"stop_screen_share\"),\n    STORAGE(\"storage\"),\n    STORE(\"store\"),\n    STORE_MALL_DIRECTORY(\"store_mall_directory\"),\n    STRAIGHTEN(\"straighten\"),\n    STREETVIEW(\"streetview\"),\n    STRIKETHROUGH_S(\"strikethrough_s\"),\n    STYLE(\"style\"),\n    SUBDIRECTORY_ARROW_LEFT(\"subdirectory_arrow_left\"),\n    SUBDIRECTORY_ARROW_RIGHT(\"subdirectory_arrow_right\"),\n    SUBJECT(\"subject\"),\n    SUBSCRIPTIONS(\"subscriptions\"),\n    SUBTITLES(\"subtitles\"),\n    SUBWAY(\"subway\"),\n    SUPERVISOR_ACCOUNT(\"supervisor_account\"),\n    SURROUND_SOUND(\"surround_sound\"),\n    SWAP_CALLS(\"swap_calls\"),\n    SWAP_HORIZ(\"swap_horiz\"),\n    SWAP_VERT(\"swap_vert\"),\n    SWAP_VERTICAL_CIRCLE(\"swap_vertical_circle\"),\n    SWITCH_CAMERA(\"switch_camera\"),\n    SWITCH_VIDEO(\"switch_video \"),\n    SYNC(\"sync\"),\n    SYNC_DISABLED(\"sync_disabled\"),\n    SYNC_PROBLEM(\"sync_problem \"),\n    SYSTEM_UPDATE(\"system_update\"),\n    SYSTEM_UPDATE_ALT(\"system_update_alt\"),\n    TAB(\"tab\"),\n    TAB_UNSELECTED(\"tab_unselected\"),\n    TABLET(\"tablet\"),\n    TABLET_ANDROID(\"tablet_android\"),\n    TABLET_MAC(\"tablet_mac\"),\n    TAG_FACES(\"tag_faces\"),\n    TAP_AND_PLAY(\"tap_and_play \"),\n    TERRAIN(\"terrain\"),\n    TEXT_FIELDS(\"text_fields\"),\n    TEXT_FORMAT(\"text_format\"),\n    TEXTSMS(\"textsms\"),\n    TEXTURE(\"texture\"),\n    THEATERS(\"theaters\"),\n    THUMB_DOWN(\"thumb_down\"),\n    THUMB_UP(\"thumb_up\"),\n    THUMBS_UP_DOWN(\"thumbs_up_down\"),\n    TIME_TO_LEAVE(\"time_to_leave\"),\n    TIMELAPSE(\"timelapse\"),\n    TIMELINE(\"timeline\"),\n    TIMER(\"timer\"),\n    TIMER_10(\"timer_10\"),\n    TIMER_3(\"timer_3\"),\n    TIMER_OFF(\"timer_off\"),\n    TITLE(\"title\"),\n    TOC(\"toc\"),\n    TODAY(\"today\"),\n    TOLL(\"toll\"),\n    TONALITY(\"tonality\"),\n    TOUCH_APP(\"touch_app\"),\n    TOYS(\"toys\"),\n    TRACK_CHANGES(\"track_changes\"),\n    TRAFFIC(\"traffic\"),\n    TRAIN(\"train\"),\n    TRAM(\"tram\"),\n    TRANSFER_WITHIN_A_STATION(\"transfer_within_a_station\"),\n    TRANSFORM(\"transform\"),\n    TRANSLATE(\"translate\"),\n    TRENDING_DOWN(\"trending_down\"),\n    TRENDING_FLAT(\"trending_flat\"),\n    TRENDING_UP(\"trending_up\"),\n    TUNE(\"tune\"),\n    TURNED_IN(\"turned_in\"),\n    TURNED_IN_NOT(\"turned_in_not\"),\n    TV(\"tv\"),\n    UNARCHIVE(\"unarchive\"),\n    UNDO(\"undo\"),\n    UNFOLD_LESS(\"unfold_less\"),\n    UNFOLD_MORE(\"unfold_more\"),\n    UPDATE(\"update\"),\n    USB(\"usb\"),\n    VERIFIED_USER(\"verified_user\"),\n    VERTICAL_ALIGN_BOTTOM(\"vertical_align_bottom\"),\n    VERTICAL_ALIGN_CENTER(\"vertical_align_center\"),\n    VERTICAL_ALIGN_TOP(\"vertical_align_top\"),\n    VIBRATION(\"vibration\"),\n    VIDEO_CALL(\"video_call\"),\n    VIDEO_LABEL(\"video_label\"),\n    VIDEO_LIBRARY(\"video_library\"),\n    VIDEOCAM(\"videocam\"),\n    VIDEOCAM_OFF(\"videocam_off \"),\n    VIDEOGAME_ASSET(\"videogame_asset\"),\n    VIEW_AGENDA(\"view_agenda\"),\n    VIEW_ARRAY(\"view_array\"),\n    VIEW_CAROUSEL(\"view_carousel\"),\n    VIEW_COLUMN(\"view_column\"),\n    VIEW_COMFY(\"view_comfy\"),\n    VIEW_COMPACT(\"view_compact \"),\n    VIEW_DAY(\"view_day\"),\n    VIEW_HEADLINE(\"view_headline\"),\n    VIEW_LIST(\"view_list\"),\n    VIEW_MODULE(\"view_module\"),\n    VIEW_QUILT(\"view_quilt\"),\n    VIEW_STREAM(\"view_stream\"),\n    VIEW_WEEK(\"view_week\"),\n    VIGNETTE(\"vignette\"),\n    VISIBILITY(\"visibility\"),\n    VISIBILITY_OFF(\"visibility_off\"),\n    VOICE_CHAT(\"voice_chat\"),\n    VOICEMAIL(\"voicemail\"),\n    VOLUME_DOWN(\"volume_down\"),\n    VOLUME_MUTE(\"volume_mute\"),\n    VOLUME_OFF(\"volume_off\"),\n    VOLUME_UP(\"volume_up\"),\n    VPN_KEY(\"vpn_key\"),\n    VPN_LOCK(\"vpn_lock\"),\n    WALLPAPER(\"wallpaper\"),\n    WARNING(\"warning\"),\n    WATCH(\"watch\"),\n    WATCH_LATER(\"watch_later\"),\n    WB_AUTO(\"wb_auto\"),\n    WB_CLOUDY(\"wb_cloudy\"),\n    WB_INCANDESCENT(\"wb_incandescent\"),\n    WB_IRIDESCENT(\"wb_iridescent\"),\n    WB_SUNNY(\"wb_sunny\"),\n    WC(\"wc\"),\n    WEB(\"web\"),\n    WEB_ASSET(\"web_asset\"),\n    WEEKEND(\"weekend\"),\n    WHATSHOT(\"whatshot\"),\n    WIDGETS(\"widgets\"),\n    WIFI(\"wifi\"),\n    WIFI_LOCK(\"wifi_lock\"),\n    WIFI_TETHERING(\"wifi_tethering\"),\n    WORK(\"work\"),\n    WRAP_TEXT(\"wrap_text\"),\n    YOUTUBE_SEARCHED_FOR(\"youtube_searched_for\"),\n    ZOOM_IN(\"zoom_in\"),\n    ZOOM_OUT(\"zoom_out\"),\n    ZOOM_OUT_MAP(\"zoom_out_map \");\n\n    override val element: Element\n        get() = document.createElement(\"i\").apply {\n            classList.add(\"material-icons\")\n            textContent = ligature\n        }\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLOptionElement\n\nclass OptionView<T>(val value: T) : View(createHtmlView<HTMLOptionElement>()) {\n\n    override val html = super.html as HTMLOptionElement\n\n    var htmlValue: String\n        get() = html.value\n        set(value) {\n            html.value = value\n        }\n\n    var text: String\n        get() = html.text\n        set(value) {\n            html.text = value\n        }\n\n    val index: Int\n        get() = html.index\n\n    var selected: Boolean\n        get() = html.selected\n        set(value) {\n            html.selected = value\n        }\n\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.AttributeDelegate\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLSelectElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\n\nclass SelectView<T : Any>(\n        dataSet: List<T>,\n        private val initValue: T,\n        val transform: (T) -> String = { it.toString() }\n) : ViewCollection<OptionView<T>>(createHtmlView<HTMLSelectElement>()) {\n\n    override val html = super.html as HTMLSelectElement\n\n    fun bind(property: ReadOnlyProperty<T>) {\n        valueProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<T>) {\n        valueProperty.bindBidirectional(property)\n    }\n\n    fun unbind() {\n        valueProperty.unbind()\n    }\n\n    var dataSet: List<T> = emptyList()\n        set(value) {\n            field = value\n            clear()\n\n            value.forEachIndexed { index, v ->\n                +OptionView(v).also { option ->\n                    option.text = transform(v)\n                    option.htmlValue = index.toString()\n                }\n            }\n        }\n\n    var index: Int\n        get() = html.selectedIndex\n        set(value) {\n            val invalidate = html.selectedIndex != value\n            html.selectedIndex = value\n            if (invalidate) {\n                valueProperty.invalidate()\n            }\n        }\n\n    var value: T\n        get() = dataSet.getOrNull(index) ?: initValue\n        set(value) {\n            index = dataSet.indexOf(value)\n        }\n    val valueProperty = property(this::value)\n\n    private var readonlyInternal by AttributeDelegate(\"readonly\")\n    var readonly: Boolean\n        get() = readonlyInternal != null\n        set(value) {\n            readonlyInternal = if (value) \"readonly\" else null\n        }\n\n    var tabindex by AttributeDelegate()\n    fun preventTabStop() {\n        tabindex = \"-1\"\n    }\n\n    init {\n        this.dataSet = dataSet\n        this.value = initValue\n\n        html.addEventListener(\"change\", object : EventListener {\n            override fun handleEvent(event: Event) {\n                valueProperty.invalidate()\n            }\n        })\n    }\n}\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, initValue: T, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, initValue, transform).also(this::append).also(init)\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, property: ReadOnlyProperty<T>, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, property: Property<T>, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(initValue: T, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), initValue, transform).also(this::append).also(init)\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(property: ReadOnlyProperty<T>, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(property: Property<T>, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), property.value, transform).apply { bind(property) }.also(this::append).also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableElement\n\nclass Table() : ViewCollection<View>(createHtmlView<HTMLTableElement>()) {\n    override val html = super.html as HTMLTableElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in Table>.table(vararg classes: String, init: Table.() -> Unit = {}): Table {\n    val view = Table()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableCaptionElement\n\nclass TableCaption() : ViewCollection<View>(createHtmlView<HTMLTableCaptionElement>(\"caption\")) {\n    override val html = super.html as HTMLTableCaptionElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCaption>.caption(init: TableCaption.() -> Unit = {}): TableCaption {\n    val view = TableCaption()\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLTableCellElement\n\nclass TableCell(val isHead: Boolean) :\n        ViewCollection<View>(createHtmlView<HTMLTableCellElement>(if (isHead) \"th\" else \"td\")) {\n    override val html = super.html as HTMLTableCellElement\n\n    private var colSpanInternal by AttributeDelegate(\"colspan\")\n    var colSpan: Int?\n        get() = colSpanInternal?.toIntOrNull()\n        set(value) {\n            colSpanInternal = value?.toString()\n        }\n\n    private var rowSpanInternal by AttributeDelegate(\"rowspan\")\n    var rowSpan: Int?\n        get() = rowSpanInternal?.toIntOrNull()\n        set(value) {\n            rowSpanInternal = value?.toString()\n        }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCell>.cell(colSpan: Int? = null, init: TableCell.() -> Unit = {}): TableCell {\n    val view = TableCell(false)\n    view.colSpan = colSpan\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCell>.head(colSpan: Int? = null, init: TableCell.() -> Unit = {}): TableCell {\n    val view = TableCell(true)\n    view.colSpan = colSpan\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableRowElement\n\nclass TableRow() : ViewCollection<TableCell>(createHtmlView<HTMLTableRowElement>(\"tr\")) {\n    override val html = super.html as HTMLTableRowElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableRow>.row(vararg classes: String, init: TableRow.() -> Unit = {}): TableRow {\n    val view = TableRow()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableSectionElement\n\nclass TableSection(val type: Type) : ViewCollection<TableRow>(createHtmlView<HTMLTableSectionElement>(type.tagName)) {\n    override val html = super.html as HTMLTableSectionElement\n\n    enum class Type(val tagName: String) {\n        THEAD(\"thead\"),\n        TBODY(\"tbody\"),\n        TFOOT(\"tfoot\")\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.thead(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.THEAD)\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.tbody(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.TBODY)\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.tfoot(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.TFOOT)\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.ValidationProperty\nimport de.westermann.kobserve.not\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.HTMLTextAreaElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.KeyboardEvent\n\nclass TextArea(\n    initValue: String = \"\",\n    view: HTMLTextAreaElement = createHtmlView()\n) : ViewForLabel(view) {\n\n    override val html = super.html as HTMLTextAreaElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        valueProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<String>) {\n        valueProperty.bindBidirectional(property)\n    }\n\n    fun bind(property: ValidationProperty<String>) {\n        valueProperty.bindBidirectional(property)\n        invalidProperty.bind(!property.validProperty)\n    }\n\n    fun unbind() {\n        valueProperty.unbind()\n        if (invalidProperty.isBound) {\n            invalidProperty.unbind()\n        }\n    }\n\n    var value: String\n        get() = html.value\n        set(value) {\n            html.value = value\n            valueProperty.invalidate()\n        }\n\n    val valueProperty: Property<String> = property(this::value)\n\n    var placeholder: String\n        get() = html.placeholder\n        set(value) {\n            html.placeholder = value\n            placeholderProperty.invalidate()\n        }\n\n    val placeholderProperty: Property<String> = property(this::placeholder)\n\n    val invalidProperty by ClassDelegate(\"invalid\")\n    var invalid by invalidProperty\n\n    private var typeInternal by AttributeDelegate(\"type\")\n    var type: InputType?\n        get() = typeInternal?.let(InputType.Companion::find)\n        set(value) {\n            typeInternal = value?.html\n        }\n    private var minInternal by AttributeDelegate(\"min\")\n    var min: Double?\n        get() = minInternal?.toDoubleOrNull()\n        set(value) {\n            minInternal = value?.toString()\n        }\n    private var maxInternal by AttributeDelegate(\"max\")\n    var max: Double?\n        get() = maxInternal?.toDoubleOrNull()\n        set(value) {\n            maxInternal = value?.toString()\n        }\n    private var stepInternal by AttributeDelegate(\"step\")\n    var step: Double?\n        get() = stepInternal?.toDoubleOrNull()\n        set(value) {\n            stepInternal = value?.toString()\n        }\n\n    init {\n        value = initValue\n        this.type = type\n\n        var lastValue = value\n        val changeListener = object : EventListener {\n            override fun handleEvent(event: Event) {\n                val value = value\n                if (value != valueProperty.value || value != lastValue) {\n                    lastValue = value\n                    valueProperty.value = value\n                }\n\n                (event as? KeyboardEvent)?.let { e ->\n                    when (e.keyCode) {\n                        13, 27 -> blur()\n                    }\n                }\n            }\n        }\n\n        html.addEventListener(\"change\", changeListener)\n        html.addEventListener(\"keyup\", changeListener)\n        html.addEventListener(\"keypress\", changeListener)\n    }\n\n    companion object {\n        fun wrap(view: HTMLTextAreaElement) = TextArea(view.value, view)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TextArea>.textArea(text: String = \"\", init: TextArea.() -> Unit = {}) =\n    TextArea(text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in TextArea>.textArea(text: ReadOnlyProperty<String>, init: TextArea.() -> Unit = {}) =\n    TextArea(text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in TextArea>.textArea(text: Property<String>, init: TextArea.() -> Unit = {}) =\n    TextArea(text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in TextArea>.textArea(text: ValidationProperty<String>, init: TextArea.() -> Unit = {}) =\n    TextArea(text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLSpanElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass TextView(\n    value: String = \"\",\n    view: HTMLSpanElement = createHtmlView()\n) : View(view) {\n\n    override val html = super.html as HTMLSpanElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    var contentEditable: Boolean\n        get() = html.isContentEditable\n        set(value) {\n            html.contentEditable = value.toString()\n        }\n\n    private var internalTabIndex by AttributeDelegate(\"tabIndex\")\n    var tabIndex: Int?\n        get() = internalTabIndex?.toIntOrNull()\n        set(value) {\n            internalTabIndex = value?.toString()\n        }\n\n    init {\n        text = value\n    }\n\n    companion object {\n        fun wrap(view: HTMLSpanElement) = TextView(view.textContent ?: \"\", view)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TextView>.textView(text: String = \"\", init: TextView.() -> Unit = {}) =\n    TextView(text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in TextView>.textView(text: ReadOnlyProperty<String>, init: TextView.() -> Unit = {}) =\n    TextView(text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.extra\n\nimport de.westermann.kobserve.list.ObservableReadOnlyList\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.async\n\nfun <T, V : View> ViewCollection<in V>.listFactory(\n    list: ObservableReadOnlyList<T>,\n    factory: (T) -> V,\n    animateAdd: Int? = null,\n    animateRemove: Int? = null\n) {\n    for (element in list) {\n        +factory(element)\n    }\n    list.onAdd { (index, element) ->\n        val view = factory(element)\n        add(index, view)\n\n        if (animateAdd != null) {\n            classList += \"animate-add\"\n            view.classList += \"active\"\n\n            async(animateAdd) {\n                classList -= \"animate-add\"\n                view.classList -= \"active\"\n            }\n        }\n    }\n    list.onRemove { (index) ->\n        @Suppress(\"UNCHECKED_CAST\") val view = this[index] as V\n\n        if (animateRemove == null) {\n            remove(view)\n        } else {\n            classList += \"animate-remove\"\n            view.classList += \"active\"\n\n            async(animateRemove) {\n                classList -= \"animate-remove\"\n                view.classList -= \"active\"\n                remove(view)\n            }\n        }\n    }\n    list.onUpdate { (oldIndex, newIndex, element) ->\n        removeAt(oldIndex)\n        add(newIndex, factory(element))\n    }\n}\n\nfun <V : View> ViewCollection<in V>.listFactory(\n    list: ObservableReadOnlyList<V>,\n    animateAdd: Int? = null,\n    animateRemove: Int? = null\n) = listFactory(\n    list,\n    { it },\n    animateAdd,\n    animateRemove\n)","package de.westermann.kwebview\n\nimport kotlin.browser.window\n\n@Suppress(\"ClassName\")\nobject i18n {\n    private val data: MutableMap<String, Locale> = mutableMapOf()\n\n    private var fallbackLocale: Locale? = null\n    private var locale: Locale? = null\n\n    fun register(id: String, name: String, path: String, fallback: Boolean = false) {\n        val locale = Locale(id, name, path, fallback)\n\n        if (fallback) {\n            if (fallbackLocale != null) {\n                throw IllegalStateException(\"Fallback locale is already set!\")\n            }\n\n            fallbackLocale = locale\n        }\n\n        data[id] = locale\n\n        window.fetch(path).then {\n            it.json()\n        }.then {\n            locale.json = it\n            locale.isLoaded = true\n        }.catch {\n            throw it\n        }\n    }\n\n    val isReady: Boolean\n        get() = data.values.all { it.isLoaded }\n\n    fun load(id: String, block: () -> Unit) {\n        fun ready() {\n            if (isReady) {\n                locale = data[id]\n                block()\n            } else {\n                async(50) { ready() }\n            }\n        }\n        ready()\n    }\n\n    private fun findKey(locale: Locale, key: String): dynamic {\n        val keys = key.split(\".\")\n\n        var result = locale.json\n        for (k in keys) {\n            if (result.hasOwnProperty(k) as Boolean) {\n                result = result[k]\n            } else {\n                return undefined\n            }\n        }\n\n        return result\n    }\n\n    private fun findKey(key: String): dynamic {\n        var result: dynamic = undefined\n\n        if (locale != null) {\n            result = findKey(locale!!, key)\n        }\n\n        if (result == undefined) {\n            if (fallbackLocale != null) {\n                result = findKey(fallbackLocale!!, key)\n            }\n        }\n\n        if (result == undefined) {\n            throw InternationalizationError(\"Cannot find key '$key'!\")\n        } else {\n            return result\n        }\n    }\n\n    private fun replace(str: String, arguments: List<Pair<String?, Any?>>): String {\n        val unnamed = arguments.filter { it.first == null }.map { it.second }\n        val named = arguments.mapNotNull { it.first?.to(it.second) }\n\n        var s = str\n\n        for ((key, replacement) in named) {\n            s = s.replace(\"{$key}\", replacement?.toString() ?: \"null\")\n        }\n\n        for (replacement in unnamed) {\n            if (s.contains(\"{}\")) {\n                s = s.replaceFirst(\"{}\", replacement?.toString() ?: \"null\")\n            }\n        }\n\n        return s\n    }\n\n    fun t(key: String, arguments: List<Pair<String?, Any?>>): String {\n        return replace(findKey(key).toString(), arguments)\n    }\n\n    fun t(count: Number, key: String, arguments: List<Pair<String?, Any?>>): String {\n        val json = findKey(key)\n        if (count == 0 && json.hasOwnProperty(\"zero\") as Boolean) {\n            return replace(json.zero.toString(), arguments)\n        } else if (count == 1 && json.hasOwnProperty(\"one\") as Boolean) {\n            return replace(json.one.toString(), arguments)\n        }\n\n        return if (json.hasOwnProperty(\"many\") as Boolean)\n            replace(json.many.toString(), arguments)\n        else {\n            replace(json.toString(), arguments)\n        }\n\n    }\n\n    private class Locale(\n            val id: String,\n            val name: String,\n            val path: String,\n            val fallback: Boolean\n    ) {\n        var isLoaded = false\n        var json = js(\"{}\")\n    }\n}\n\nclass InternationalizationError(message: String? = null) : Error(message)\n\nfun t(key: String) = i18n.t(key, emptyList())\n\nfun t(key: String, vararg arguments: Any?) = i18n.t(key, arguments.map { null to it })\n\nfun t(key: String, vararg arguments: Pair<String?, Any?>) = i18n.t(key, arguments.asList())\n\nfun t(count: Number, key: String) = i18n.t(count, key, emptyList())\n\nfun t(count: Number, key: String, vararg arguments: Any?) = i18n.t(count, key, arguments.map { null to it })\n\nfun t(count: Number, key: String, vararg arguments: Pair<String?, Any?>) = i18n.t(count, key, arguments.asList())\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport kotlin.internal.LowPriorityInOverloadResolution\n\n/**\n * Exposes the JavaScript [Promise object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic open external class Promise<out T>(executor: (resolve: (T) -> Unit, reject: (Throwable) -> Unit) -> Unit) {\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?): Promise<S>\n\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?, onRejected: ((Throwable) -> S)?): Promise<S>\n\n    public open fun <S> catch(onRejected: (Throwable) -> S): Promise<S>\n\n    companion object {\n        public fun <S> all(promise: Array<out Promise<S>>): Promise<Array<out S>>\n\n        public fun <S> race(promise: Array<out Promise<S>>): Promise<S>\n\n        public fun reject(e: Throwable): Promise<Nothing>\n\n        public fun <S> resolve(e: S): Promise<S>\n        public fun <S> resolve(e: Promise<S>): Promise<S>\n    }\n}\n\n// It's workaround for KT-19672 since we can fix it properly until KT-11265 isn't fixed.\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled)\n}\n\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?,\n    noinline onRejected: ((Throwable) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled, onRejected)\n}\n","package io.framed.framework\n\nimport io.framed.framework.matcher.Matcher\nimport io.framed.framework.verifier.BpmnVerifier\nimport io.framed.framework.verifier.BrosVerifier\nimport io.framed.framework.verifier.Result\nimport io.framed.framework.verifier.Verifier\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\nimport kotlin.reflect.KClass\n\nclass Context {\n    val matcherList: MutableList<Matcher> = mutableListOf()\n    val verifierList: MutableList<Verifier> = mutableListOf()\n\n    inline fun <reified Bpmn : BpmnElement, reified Bros : BrosElement> match(\n            name: String? = null,\n            crossinline matcher: (bpmn: ModelTree<Bpmn>, bros: ModelTree<Bros>) -> Boolean\n    ) {\n\n        val bpmnName = Bpmn::class.simpleName\n        val brosName = Bros::class.simpleName\n\n        val matcherName: String?\n        if (bpmnName != null && brosName != null) {\n            matcherName = \"$bpmnName${brosName}Matcher\"\n        } else matcherName = null\n\n        matcherList += object : Matcher {\n            override val name = name ?: matcherName ?: super.name\n\n            override fun filterBpmn(bpmn: ModelTree<BpmnElement>) = bpmn.element is Bpmn\n\n            override fun filterBros(bros: ModelTree<BrosElement>) = bros.element is Bros\n\n            override fun match(bpmn: ModelTree<BpmnElement>, bros: ModelTree<BrosElement>): Boolean {\n                @Suppress(\"UNCHECKED_CAST\")\n                return matcher(bpmn as ModelTree<Bpmn>, bros as ModelTree<Bros>)\n            }\n        }\n    }\n\n    @PublishedApi\n    internal fun <Bpmn : BpmnElement> verifyBpmn(\n            clazz: KClass<Bpmn>,\n            name: String? = null,\n            verifier: (bpmn: ModelTree<Bpmn>) -> Result?\n    ) {\n        verifierList += object : BpmnVerifier {\n            override val name = name ?: super.name\n\n            override val filter: Set<KClass<out BpmnElement>> = setOf(clazz)\n\n            override fun verifyBpmn(element: ModelTree<BpmnElement>): Result? {\n                @Suppress(\"UNCHECKED_CAST\")\n                return verifier(element as ModelTree<Bpmn>)\n            }\n        }\n    }\n\n    inline fun <reified Bpmn : BpmnElement> verifyBpmn(\n            name: String? = null,\n            noinline verifier: (bpmn: ModelTree<Bpmn>) -> Result?\n    ) = verifyBpmn(Bpmn::class, name, verifier)\n\n    @PublishedApi\n    internal fun <Bros : BrosElement> verifyBros(\n            clazz: KClass<Bros>,\n            name: String? = null,\n            verifier: (bros: ModelTree<Bros>) -> Result?\n    ) {\n        verifierList += object : BrosVerifier {\n            override val name = name ?: super.name\n            override val filter: Set<KClass<out BrosElement>> = setOf(clazz)\n            override fun verifyBros(element: ModelTree<BrosElement>): Result? {\n                @Suppress(\"UNCHECKED_CAST\")\n                return verifier(element as ModelTree<Bros>)\n            }\n        }\n    }\n\n    inline fun <reified Bros : BrosElement> verifyBros(\n            name: String? = null,\n            noinline verifier: (bros: ModelTree<Bros>) -> Result?\n    ) = verifyBros(Bros::class, name, verifier)\n}","package io.framed.framework\n\nimport kotlin.reflect.KClass\n\nclass ModelRelation<out T : Any>(\n        val relation: T,\n        val type: KClass<out T>\n) {\n\n    lateinit var source: ModelTree<*>\n    lateinit var target: ModelTree<*>\n\n    inline fun <reified M> checkType(): Boolean {\n        return relation is M\n    }\n\n    inline fun <reified M> model(): M? {\n        return relation as? M\n    }\n\n    inline fun <reified M> checkSourceType(): Boolean {\n        return source.checkType<M>()\n    }\n\n    inline fun <reified M : Any> source(): ModelTree<M>? {\n        if (!source.checkType<M>()) return null\n        @Suppress(\"UNCHECKED_CAST\")\n        return source as ModelTree<M>\n    }\n\n    inline fun <reified M> sourceModel(): M? {\n        return source.model()\n    }\n\n    inline fun <reified M> checkTargetType(): Boolean {\n        return target.checkType<M>()\n    }\n\n    inline fun <reified M : Any> target(): ModelTree<M>? {\n        if (!target.checkType<M>()) return null\n        @Suppress(\"UNCHECKED_CAST\")\n        return target as ModelTree<M>\n    }\n\n    inline fun <reified M> targetModel(): M? {\n        return target.model()\n    }\n}","package io.framed.framework\n\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\nimport kotlin.reflect.KClass\n\nclass ModelTree<out T : Any>(\n        var parent: ModelTree<*>?,\n        val element: T,\n        val type: KClass<out T>,\n        val children: List<ModelTree<*>>\n) {\n    val isRoot: Boolean = parent == null\n\n    val relations = mutableSetOf<ModelRelation<*>>()\n\n    val matchingElementsMap = mutableMapOf<ModelTree<*>, MutableSet<String>>()\n    val matchingElements: Set<ModelTree<*>>\n        get() = matchingElementsMap.keys\n\n    inline fun <reified M> checkType(): Boolean {\n        return element is M\n    }\n\n    inline fun <reified M> model(): M? {\n        return element as? M\n    }\n\n    inline fun <reified M : Any> relations(): List<ModelRelation<M>> {\n        @Suppress(\"UNCHECKED_CAST\")\n        return relations.filter {\n            it.checkType<M>()\n        } as List<ModelRelation<M>>\n    }\n\n    fun <S : Any> asSequence() = object : Sequence<ModelTree<S>> {\n        override fun iterator() = object : Iterator<ModelTree<S>> {\n\n            private val queue = mutableListOf<ModelTree<*>>(this@ModelTree)\n\n            override fun hasNext(): Boolean = queue.isNotEmpty()\n\n            override fun next(): ModelTree<S> {\n                if (!hasNext()) throw IllegalStateException(\"End reached!\")\n\n                @Suppress(\"UNCHECKED_CAST\") val top = queue.removeAt(0) as ModelTree<S>\n\n                queue.addAll(top.children)\n\n                return top\n            }\n        }\n    }\n\n    fun asSequence() = asSequence<T>()\n\n    inline fun <reified M: Any> parent(): ModelTree<M>? {\n        val p = parent ?: return null\n        if (p.element is M) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return p as ModelTree<M>\n        }\n        return null\n    }\n\n    fun log(): dynamic {\n        val current = \"<${element::class.simpleName}> $element\"\n        val child = children.map(ModelTree<*>::log).toTypedArray()\n        val obj = js(\"{}\")\n        obj[current] = child\n        return obj\n    }\n\n    override fun toString() = when (element) {\n        is BpmnElement -> element.stringify()\n        is BrosElement -> element.stringify()\n        else -> element.toString()\n    }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other == null || this::class.js != other::class.js) return false\n\n        other as ModelTree<*>\n\n        if (element != other.element) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        return element.hashCode()\n    }\n}\n\ninline fun <reified T: Any> ModelTree<*>.transitiveParent(): List<ModelTree<T>> {\n    var element = this\n    val parents = mutableListOf<ModelTree<T>>()\n    while (element.parent != null) {\n        val p = element.parent<T>() ?: break\n        parents += p\n        element = p\n    }\n    return parents\n}\n","package io.framed.framework.matcher\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\ninterface Matcher {\n\n    fun filterBpmn(bpmn: ModelTree<BpmnElement>): Boolean\n\n    fun filterBros(bros: ModelTree<BrosElement>): Boolean\n\n    fun match(bpmn: ModelTree<BpmnElement>, bros: ModelTree<BrosElement>): Boolean\n\n    val name: String\n        get() = this::class.simpleName ?: \"UnknownMatcher\"\n}\n","package io.framed.framework.matcher\n\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.json.Json\nimport kotlinx.serialization.list\n\n@Serializable\ndata class PredefinedMatch(\n        val bpmn: String,\n        val bros: Long,\n        val type: Type\n) {\n    enum class Type {\n        MATCH, NOMATCH\n    }\n\n    companion object {\n        fun parse(data: String): List<PredefinedMatch> {\n            @Suppress(\"EXPERIMENTAL_API_USAGE\")\n            return Json.nonstrict.parse(serializer().list, data).foldRight(emptyList()) { predefinedMatch, acc ->\n                if (acc.firstOrNull { it.bpmn == predefinedMatch.bpmn && it.bros == predefinedMatch.bros } == null) {\n                    listOf(predefinedMatch) + acc\n                } else {\n                    acc\n                }\n            }\n        }\n\n        fun stringify(list: List<PredefinedMatch>): String {\n            @Suppress(\"EXPERIMENTAL_API_USAGE\")\n            return Json.indented.stringify(serializer().list, list.foldRight(emptyList()) { predefinedMatch, acc ->\n                if (acc.firstOrNull { it.bpmn == predefinedMatch.bpmn && it.bros == predefinedMatch.bros } == null) {\n                    listOf(predefinedMatch) + acc\n                } else {\n                    acc\n                }\n            })\n        }\n    }\n}","package io.framed.framework.matcher\n\nimport kotlin.math.abs\nimport kotlin.math.max\n\n/**\n * Compare two strings for similarities.\n */\nfun matchStrings(string1: String, string2: String): Boolean {\n\n    // Setup strings.\n    val a = stringToSet(string1)\n    val b = stringToSet(string2)\n\n    // Determine the shorter and the longer set.\n    val longer: Set<String>\n    val shorter: Set<String>\n    if (a.size >= b.size) {\n        longer = a\n        shorter = b\n    } else {\n        longer = b\n        shorter = a\n    }\n\n    // The shorter set should not be empty or less then 40% shorter as the longer set.\n    if (\n            shorter.isEmpty() ||\n            shorter.size.toDouble() / longer.size.toDouble() < WORD_LENGTH_THRESHOLD\n    ) {\n        return false\n\n    }\n    // Check if all strings in the shorter set are in the longer set.\n\n    return shorter.all { short ->\n        // Cut off the last two chars.\n        val s = short.take(\n                max(\n                        MIN_WORD_LENGTH,\n                        short.length - WORD_ENDING_LENGTH\n                )\n        )\n\n        // Check if current string is in the longer set.\n        longer.any { long ->\n            // Cut off the last two chars.\n            val l = long.take(\n                    max(\n                            MIN_WORD_LENGTH,\n                            long.length - WORD_ENDING_LENGTH\n                    )\n            )\n\n            // Check if a string without the ending is a substring of the other string\n            // but only if the strings only diverge in the ending.\n            long.startsWith(s) ||\n                    short.startsWith(l) &&\n                    abs(l.length - s.length) <= WORD_ENDING_LENGTH\n        }\n    }\n}\n\n/**\n * Split string by camel case and lower case substrings.\n */\nprivate fun stringToSet(str: String): Set<String> = str\n        .replace(SPLIT_CAMEL_CASE_REGEX, \"$1 $2\")\n        .split(\" \")\n        .map { it.toLowerCase().trim() }\n        .filter { it.length >= MIN_WORD_LENGTH }\n        .toSet()\n\nprivate val SPLIT_CAMEL_CASE_REGEX = \"([a-z])([A-Z])\".toRegex()\nprivate const val WORD_LENGTH_THRESHOLD = 0.6\nprivate const val MIN_WORD_LENGTH = 3\nprivate const val WORD_ENDING_LENGTH = 2\n","package io.framed.framework.matcher\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\n\nclass TreeMatcher(\n        private val bpmnTree: ModelTree<BpmnElement>,\n        private val brosTree: ModelTree<BrosElement>\n) {\n\n    private val matcherList = mutableListOf<Matcher>()\n\n    fun register(matcher: Matcher) {\n        matcherList += matcher\n    }\n\n    fun match(predefinedMatches: List<PredefinedMatch>): Int? {\n        val bpmnSequence = bpmnTree.asSequence<BpmnElement>().toList()\n        val brosSequence = brosTree.asSequence<BrosElement>().toList()\n\n        var bpmnState = bpmnSequence.associateWith { it.matchingElements.toSet() }\n        var brosState = brosSequence.associateWith { it.matchingElements.toSet() }\n        var hasChanged = true\n\n        var remainingRounds = MAX_ROUNDS\n\n        while (hasChanged && remainingRounds > 0) {\n            remainingRounds--\n            hasChanged = false\n\n            for (bpmn in bpmnSequence) {\n                for (bros in brosSequence) {\n                    for (matcher in matcherList) {\n                        if (matcher.filterBpmn(bpmn) && matcher.filterBros(bros) && matcher.match(bpmn, bros)) {\n                            bpmn.matchingElementsMap.getOrPut(bros) { mutableSetOf() } += matcher.name\n                            bros.matchingElementsMap.getOrPut(bpmn) { mutableSetOf() } += matcher.name\n                        }\n                    }\n                    for (match in predefinedMatches) {\n                        if (bpmn.element.id == match.bpmn && bros.element.id == match.bros) {\n                            when (match.type) {\n                                PredefinedMatch.Type.MATCH -> {\n                                    bpmn.matchingElementsMap.getOrPut(bros) { mutableSetOf() } += \"PredefinedMatcher\"\n                                    bros.matchingElementsMap.getOrPut(bpmn) { mutableSetOf() } += \"PredefinedMatcher\"\n                                }\n                                PredefinedMatch.Type.NOMATCH -> {\n                                    bpmn.matchingElementsMap -= bros\n                                    bros.matchingElementsMap -= bpmn\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            val newBpmnState = bpmnSequence.associateWith { it.matchingElements.toSet() }\n            val newBrosState = brosSequence.associateWith { it.matchingElements.toSet() }\n\n            if (newBpmnState != bpmnState) {\n                hasChanged = true\n            }\n            if (newBrosState != brosState) {\n                hasChanged = true\n            }\n\n            bpmnState = newBpmnState\n            brosState = newBrosState\n        }\n\n        if (remainingRounds <= 0) return null\n        return MAX_ROUNDS - remainingRounds\n    }\n\n    companion object {\n        const val MAX_ROUNDS = 100\n    }\n}\n","package io.framed.framework.verifier\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\nimport kotlin.reflect.KClass\n\ninterface BpmnVerifier : Verifier {\n\n    val filter: Set<KClass<out BpmnElement>>\n\n    override fun filterBpmn(bpmn: ModelTree<BpmnElement>): Boolean {\n        return filter.isEmpty() || bpmn.type in filter\n    }\n\n    override fun filterBros(bros: ModelTree<BrosElement>): Boolean {\n        return false\n    }\n\n    override fun verifyBros(element: ModelTree<BrosElement>): Result? {\n        throw UnsupportedOperationException(\"Cannot verify bros elements in $name:BpmnVerifier!\")\n    }\n}","package io.framed.framework.verifier\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\nimport kotlin.reflect.KClass\n\ninterface BrosVerifier : Verifier {\n\n    val filter: Set<KClass<out BrosElement>>\n\n    override fun filterBpmn(bpmn: ModelTree<BpmnElement>): Boolean {\n        return false\n    }\n\n    override fun filterBros(bros: ModelTree<BrosElement>): Boolean {\n        return filter.isEmpty() || bros.type in filter\n    }\n\n    override fun verifyBpmn(element: ModelTree<BpmnElement>): Result? {\n        throw UnsupportedOperationException(\"Cannot verify bpmn elements in $name:BrosVerifier!\")\n    }\n}","package io.framed.framework.verifier\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\n@Suppress(\"DataClassPrivateConstructor\", \"UNCHECKED_CAST\")\ndata class Result private constructor(\n        val type: Type,\n        val bpmn: ModelTree<BpmnElement>?,\n        val bros: ModelTree<BrosElement>?,\n        val message: String,\n        val verifier: Verifier?\n) {\n    companion object {\n        fun match(message: String, bpmn: ModelTree<*>? = null, bros: ModelTree<*>? = null) = Result(\n                Type.POSITIVE,\n                bpmn as? ModelTree<BpmnElement>,\n                bros as? ModelTree<BrosElement>,\n                message,\n                null\n        )\n\n        fun error(message: String, bpmn: ModelTree<*>? = null, bros: ModelTree<*>? = null) = Result(\n                Type.NEGATIVE,\n                bpmn as? ModelTree<BpmnElement>,\n                bros as? ModelTree<BrosElement>,\n                message,\n                null\n        )\n    }\n\n    enum class Type {\n        POSITIVE, NEGATIVE\n    }\n}\n","package io.framed.framework.verifier\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\nclass TreeVerifier(\n        private val bpmnTree: ModelTree<BpmnElement>,\n        private val brosTree: ModelTree<BrosElement>\n) {\n\n    private val verifierList = mutableListOf<Verifier>()\n\n    fun register(verifier: Verifier) {\n        verifierList += verifier\n    }\n\n    fun verify(): List<Result> {\n        val bpmnSequence = bpmnTree.asSequence<BpmnElement>().toList()\n        val brosSequence = brosTree.asSequence<BrosElement>().toList()\n\n        val results: MutableList<Result> = mutableListOf()\n\n        for (verifier in verifierList) {\n            if (verifier !is BrosVerifier) {\n                for (bpmn in bpmnSequence) {\n                    if (verifier.filterBpmn(bpmn)) {\n                        val result = verifier.verifyBpmn(bpmn) ?: continue\n                        results += result.copy(\n                                bpmn = bpmn,\n                                verifier = verifier\n                        )\n                    }\n                }\n            }\n\n            if (verifier !is BpmnVerifier) {\n                for (bros in brosSequence) {\n                    if (verifier.filterBros(bros)) {\n                        val result = verifier.verifyBros(bros) ?: continue\n                        results += result.copy(\n                                bros = bros,\n                                verifier = verifier\n                        )\n                    }\n                }\n            }\n        }\n\n        return results\n    }\n}","package io.framed.framework.verifier\n\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\ninterface Verifier {\n\n    fun filterBpmn(bpmn: ModelTree<BpmnElement>): Boolean\n\n    fun filterBros(bros: ModelTree<BrosElement>): Boolean\n\n    fun verifyBpmn(element: ModelTree<BpmnElement>): Result?\n\n    fun verifyBros(element: ModelTree<BrosElement>): Result?\n\n    val name: String\n        get() = this::class.simpleName ?: \"UnknownVerifier\"\n}\n\n","package io.framed\n\nimport de.westermann.kwebview.get\nimport io.framed.framework.matcher.PredefinedMatch\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.BpmnParser\nimport io.framed.model.bros.BrosDocument\nimport io.framed.model.bros.BrosParser\nimport io.framed.ui.Application\nimport kotlin.browser.document\nimport kotlin.browser.window\nimport kotlin.dom.clear\n\n@Suppress(\"UNUSED\")\nfun main() {\n    // Wait for the body to load.\n    window.onload = {\n        init()\n    }\n}\n\n/**\n * Startup the application\n */\nfun init() {\n    val application = Application()\n    document.body!!.apply {\n        clear()\n\n        appendChild(application.html)\n    }\n\n    var bros: BrosDocument? = null\n    var brosContent = \"\"\n    var bpmn: BpmnModel? = null\n    var bpmnContent = \"\"\n    var predefinedMatches: List<PredefinedMatch>? = null\n    var predefinedMatchesContent = \"\"\n\n    fun check() {\n        if (bros != null && bpmn != null && predefinedMatches != null) {\n            application.enableDemo {\n                application.bpmnFile.content = bpmnContent\n                application.brosFile.content = brosContent\n                application.predefinedFile.content = predefinedMatchesContent\n            }\n        }\n    }\n\n    get(\"restaurant.json\") {\n        bros = BrosParser.parse(it)\n        brosContent = it\n        check()\n    }\n\n    get(\"restaurant.bpmn\") {\n        bpmn = BpmnParser.parse(it)\n        bpmnContent = it\n        check()\n    }\n\n    get(\"match.json\") {\n        predefinedMatches = PredefinedMatch.parse(it)\n        predefinedMatchesContent = it\n        check()\n    }\n}\n","package io.framed.model.bpmn\n\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bpmn.model.BpmnMessageFlow\nimport io.framed.model.bpmn.model.BpmnProcess\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnModel : BpmnElement {\n\n    override val id: String = \"\"\n    override val name: String = \"\"\n    override var parent: BpmnElement? = null\n\n    @PublishedApi\n    internal val allChildren by lazy {\n        content.flatMap { it.getAllChildren() }.associateBy { it.id }\n    }\n\n    inline fun <reified T : BpmnElement> find(id: String): T? {\n        return this.allChildren[id] as? T\n    }\n\n    internal val participants: MutableList<Participant> = mutableListOf()\n\n    val content: MutableList<BpmnElement> = mutableListOf()\n\n    override fun remove(child: BpmnElement) {\n        content.remove(child)\n    }\n\n    companion object {\n        fun parse(xml: XmlElement): BpmnModel {\n            val model = BpmnModel()\n\n            for (child in xml.children) {\n                if (!child.tagName.startsWith(\"bpmn:\")) continue\n\n                when {\n                    child.tagName.contains(\"process\") -> model.content += BpmnProcess.parse(child, model)\n                    child.tagName.contains(\"collaboration\") -> {\n                        for (collaboration in child.children) {\n                            when {\n                                collaboration.tagName.contains(\"participant\", true) ->\n                                    model.participants += Participant(collaboration[\"processRef\"], collaboration[\"name\"])\n                                collaboration.tagName.contains(\"messageFlow\", true) ->\n                                    model.content += BpmnMessageFlow.parse(collaboration)\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (element in model.content) {\n                element.build(model)\n            }\n\n            return model\n        }\n    }\n\n    data class Participant(\n            val id: String,\n            val name: String\n    )\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"LazyKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin\n\nimport kotlin.reflect.KProperty\n\n/**\n * Represents a value with lazy initialization.\n *\n * To create an instance of [Lazy] use the [lazy] function.\n */\npublic interface Lazy<out T> {\n    /**\n     * Gets the lazily initialized value of the current Lazy instance.\n     * Once the value was initialized it must not change during the rest of lifetime of this Lazy instance.\n     */\n    public val value: T\n\n    /**\n     * Returns `true` if a value for this Lazy instance has been already initialized, and `false` otherwise.\n     * Once this function has returned `true` it stays `true` for the rest of lifetime of this Lazy instance.\n     */\n    public fun isInitialized(): Boolean\n}\n\n/**\n * Creates a new instance of the [Lazy] that is already initialized with the specified [value].\n */\npublic fun <T> lazyOf(value: T): Lazy<T> = InitializedLazyImpl(value)\n\n/**\n * An extension to delegate a read-only property of type [T] to an instance of [Lazy].\n *\n * This extension allows to use instances of Lazy for property delegation:\n * `val property: String by lazy { initializer }`\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Lazy<T>.getValue(thisRef: Any?, property: KProperty<*>): T = value\n\n/**\n * Specifies how a [Lazy] instance synchronizes initialization among multiple threads.\n */\npublic enum class LazyThreadSafetyMode {\n\n    /**\n     * Locks are used to ensure that only a single thread can initialize the [Lazy] instance.\n     */\n    SYNCHRONIZED,\n\n    /**\n     * Initializer function can be called several times on concurrent access to uninitialized [Lazy] instance value,\n     * but only the first returned value will be used as the value of [Lazy] instance.\n     */\n    PUBLICATION,\n\n    /**\n     * No locks are used to synchronize an access to the [Lazy] instance value; if the instance is accessed from multiple threads, its behavior is undefined.\n     *\n     * This mode should not be used unless the [Lazy] instance is guaranteed never to be initialized from more than one thread.\n     */\n    NONE,\n}\n\n\ninternal object UNINITIALIZED_VALUE\n\n// internal to be called from lazy in JS\ninternal class UnsafeLazyImpl<out T>(initializer: () -> T) : Lazy<T>, Serializable {\n    private var initializer: (() -> T)? = initializer\n    private var _value: Any? = UNINITIALIZED_VALUE\n\n    override val value: T\n        get() {\n            if (_value === UNINITIALIZED_VALUE) {\n                _value = initializer!!()\n                initializer = null\n            }\n            @Suppress(\"UNCHECKED_CAST\")\n            return _value as T\n        }\n\n    override fun isInitialized(): Boolean = _value !== UNINITIALIZED_VALUE\n\n    override fun toString(): String = if (isInitialized()) value.toString() else \"Lazy value not initialized yet.\"\n\n    private fun writeReplace(): Any = InitializedLazyImpl(value)\n}\n\ninternal class InitializedLazyImpl<out T>(override val value: T) : Lazy<T>, Serializable {\n\n    override fun isInitialized(): Boolean = true\n\n    override fun toString(): String = value.toString()\n\n}\n","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\n\ninterface BpmnElement {\n    val id: String\n    val name: String\n\n    var parent: BpmnElement?\n\n    fun build(model: BpmnModel) {}\n\n    fun remove(child: BpmnElement) {}\n\n    fun getAllChildren(): List<BpmnElement> = listOf(this)\n\n    fun stringify() = (this::class.simpleName ?: \"UnknownElement\") + if (name.isNotBlank()) \"(${name.trim()})\" else \"\"\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.xml.XmlElement\n\ninterface BpmnEvent : BpmnFlowObject {\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement) = when (xml.tagName) {\n            \"bpmn:startEvent\" -> {\n                BpmnStartEvent(xml[\"id\"], xml[\"name\"], parent)\n            }\n            \"bpmn:endEvent\" -> {\n                BpmnEndEvent(\n                        xml[\"id\"],\n                        xml[\"name\"],\n                        xml.children.find { it.tagName == \"bpmn:terminateEventDefinition\" } != null,\n                        parent\n                )\n            }\n            else -> {\n                BpmnIntermediateEvent(xml[\"id\"], xml[\"name\"], parent)\n            }\n        }\n    }\n}\n\nclass BpmnStartEvent(\n        override val id: String,\n        override val name: String,\n        override var parent: BpmnElement?\n) : BpmnEvent\n\nclass BpmnEndEvent(\n        override val id: String,\n        override val name: String,\n        val terminationEvent: Boolean,\n        override var parent: BpmnElement?\n) : BpmnEvent\n\nclass BpmnIntermediateEvent(\n        override val id: String,\n        override val name: String,\n        override var parent: BpmnElement?\n) : BpmnEvent","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.xml.XmlElement\n\ninterface BpmnFlowObject : BpmnElement {\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement): BpmnFlowObject = when {\n            xml.tagName.contains(\"event\", true) -> BpmnEvent.parse(xml, parent)\n            xml.tagName.contains(\"gateway\", true) -> BpmnGateway.parse(xml, parent)\n            xml.tagName.contains(\"task\", true) -> BpmnTask.parse(xml, parent)\n            xml.tagName.contains(\"subProcess\", true) -> BpmnTask.parse(xml, parent)\n            else -> throw IllegalArgumentException(xml.tagName)\n        }\n    }\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnGateway(\n        override val id: String,\n        override var parent: BpmnElement?\n) : BpmnFlowObject {\n\n    override val name: String = \"\"\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement) = BpmnGateway(xml[\"id\"], parent)\n    }\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnLane(\n        override val id: String,\n        override val name: String,\n        override var parent: BpmnElement?\n) : BpmnElement {\n\n    private val contentIds: MutableList<String> = mutableListOf()\n    val content: MutableList<BpmnFlowObject> = mutableListOf()\n\n    override fun build(model: BpmnModel) {\n        for (id in contentIds) {\n            val element = model.find<BpmnFlowObject>(id) ?: continue\n            content += element\n            element.parent?.remove(element)\n            element.parent = this\n        }\n    }\n\n    override fun getAllChildren(): List<BpmnElement> {\n        return super.getAllChildren() + content.flatMap { it.getAllChildren() }\n    }\n\n    override fun remove(child: BpmnElement) {\n        content.remove(child)\n    }\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement): BpmnLane {\n            val bpmn = BpmnLane(xml[\"id\"], xml[\"name\"], parent)\n\n            for (child in xml.children) {\n                bpmn.contentIds += child.textContent\n            }\n\n            return bpmn\n        }\n    }\n}\n","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnLaneSet(\n        override val id: String,\n        override var parent: BpmnElement?\n) : BpmnElement {\n\n    override val name: String = \"\"\n\n    val content = mutableListOf<BpmnLane>()\n\n    override fun getAllChildren(): List<BpmnElement> {\n        return super.getAllChildren() + content.flatMap { it.getAllChildren() }\n    }\n\n    override fun build(model: BpmnModel) {\n        for (element in content) {\n            element.build(model)\n        }\n    }\n\n    override fun remove(child: BpmnElement) {\n        content.remove(child)\n    }\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement?): BpmnLaneSet {\n            val laneSet = BpmnLaneSet(xml[\"id\"], parent)\n\n            laneSet.content.addAll(xml.children.map { child ->\n                BpmnLane.parse(child, laneSet)\n            })\n\n            return laneSet\n        }\n    }\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnMessageFlow(\n        override val id: String,\n        override val name: String,\n        var sourceRef: String,\n        var targetRef: String\n) : BpmnElement {\n\n    override var parent: BpmnElement? = null\n\n    lateinit var source: BpmnElement\n    lateinit var target: BpmnElement\n\n    override fun build(model: BpmnModel) {\n        model.find<BpmnElement>(sourceRef)?.let {\n            source = it\n        } ?: throw IllegalArgumentException(\"Cannot find sourceRef: $sourceRef\")\n        model.find<BpmnElement>(targetRef)?.let {\n            target = it\n        } ?: throw IllegalArgumentException(\"Cannot find targetRef: $targetRef\")\n    }\n\n    companion object {\n        fun parse(xml: XmlElement) = BpmnMessageFlow(\n                xml[\"id\"],\n                xml[\"name\"],\n                xml[\"sourceRef\"],\n                xml[\"targetRef\"]\n        )\n    }\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnProcess(\n        override val id: String,\n        override var parent: BpmnElement?\n) : BpmnElement {\n\n    override var name: String = \"\"\n\n    val content = mutableListOf<BpmnElement>()\n\n    override fun build(model: BpmnModel) {\n        name = model.participants.firstOrNull { it.id == id }?.name ?: \"\"\n        for (element in content) {\n            element.build(model)\n        }\n    }\n\n    override fun getAllChildren(): List<BpmnElement> {\n        return super.getAllChildren() + content.flatMap { it.getAllChildren() }\n    }\n\n    override fun remove(child: BpmnElement) {\n        content.remove(child)\n    }\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement?): BpmnProcess {\n            val process = BpmnProcess(xml[\"id\"], parent)\n\n            process.content.addAll(xml.children.map { child ->\n                when {\n                    child.tagName.contains(\"sequenceFlow\", true) -> BpmnSequenceFlow.parse(child)\n                    child.tagName.contains(\"messageFlow\", true) -> BpmnMessageFlow.parse(child)\n                    child.tagName.contains(\"laneSet\") -> BpmnLaneSet.parse(child, process)\n                    else -> BpmnFlowObject.parse(child, process)\n                }\n            })\n\n            return process\n        }\n    }\n}\n","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnSequenceFlow(\n        override val id: String,\n        override val name: String,\n        var sourceRef: String = \"\",\n        var targetRef: String = \"\"\n) : BpmnElement {\n\n    override var parent: BpmnElement? = null\n\n    lateinit var source: BpmnFlowObject\n    lateinit var target: BpmnFlowObject\n\n    override fun build(model: BpmnModel) {\n        model.find<BpmnFlowObject>(sourceRef)?.let {\n            source = it\n        } ?: throw IllegalArgumentException(\"Cannot find sourceRef: $sourceRef\")\n        model.find<BpmnFlowObject>(targetRef)?.let {\n            target = it\n        } ?: throw IllegalArgumentException(\"Cannot find targetRef: $targetRef\")\n    }\n\n    companion object {\n        fun parse(xml: XmlElement) = BpmnSequenceFlow(\n                xml[\"id\"],\n                xml[\"name\"],\n                xml[\"sourceRef\"],\n                xml[\"targetRef\"]\n        )\n    }\n}","package io.framed.model.bpmn.model\n\nimport io.framed.model.bpmn.xml.XmlElement\n\nclass BpmnTask(\n        override val id: String,\n        override val name: String,\n        override var parent: BpmnElement?\n) : BpmnFlowObject {\n\n    companion object {\n        fun parse(xml: XmlElement, parent: BpmnElement?) = BpmnTask(xml[\"id\"], xml[\"name\"], parent)\n    }\n}","package io.framed.model.bpmn.xml\n\nimport io.framed.model.bpmn.BpmnModel\nimport org.w3c.dom.parsing.DOMParser\n\n\nobject BpmnParser {\n\n    fun parse(content: String): BpmnModel? {\n        val parser = DOMParser()\n        val doc = parser.parseFromString(content, \"text/xml\")\n\n        val node = doc.getElementsByTagName(\"bpmn:definitions\").let {\n            if (it.length > 0) it.item(0) else null\n        } ?: return null\n\n        return BpmnModel.parse(XmlElement(node))\n    }\n}\n","package io.framed.model.bpmn.xml\n\nimport org.w3c.dom.Element\n\nclass XmlElement(val element: Element) {\n    val tagName: String\n        get() = element.tagName\n    val textContent: String\n        get() = element.textContent ?: \"\"\n\n    operator fun get(name: String): String = element.getAttribute(name) ?: \"\"\n\n    val children: List<XmlElement>by lazy {\n        (0 until element.childNodes.length).mapNotNull {\n            val item = element.childNodes.item(it)\n            if (item is Element) XmlElement(item) else null\n        }\n    }\n\n    override fun toString(): String {\n        return element.toString()\n    }\n}","package io.framed.model.bros\n\nimport io.framed.model.bros.model.BrosPackage\nimport kotlinx.serialization.Serializable\nimport kotlinx.serialization.Transient\nimport kotlin.math.max\n\n@Serializable\nclass BrosDocument(\n        @Serializable(with = PolymorphicSerializer::class)\n        val root: BrosPackage,\n        val connections: Connections\n) {\n\n    @Transient\n    val name: String\n        get() = root.name.toLowerCase()\n\n    fun maxId(): Long {\n        return max(root.maxId(), connections.maxId())\n    }\n}\n","package io.framed.model.bros\n\nimport io.framed.model.bros.model.*\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.json.Json\n\nobject BrosParser {\n\n    init {\n        register(BrosRelationship.serializer())\n        register(BrosFulfillment.serializer())\n        register(BrosComposition.serializer())\n        register(BrosAggregation.serializer())\n        register(BrosInheritance.serializer())\n        register(BrosCreateRelation.serializer())\n        register(BrosDestroyRelation.serializer())\n\n        register(BrosParameter.serializer())\n        register(BrosAttribute.serializer())\n        register(BrosMethod.serializer())\n        register(BrosRoleType.serializer())\n        register(BrosEvent.serializer())\n        register(BrosReturnEvent.serializer())\n        register(BrosClass.serializer())\n        register(BrosPackage.serializer())\n        register(BrosCompartment.serializer())\n        register(BrosScene.serializer())\n    }\n\n    private inline fun <reified M : BrosElement> register(serializer: KSerializer<M>) {\n        //val className = M::class.simpleName!!\n        val serialName = serializer.descriptor.name\n        PolymorphicSerializer.registerSerializer(M::class, serializer, \"io.framed.model.$serialName\")\n    }\n\n    fun parse(content: String): BrosDocument? = try {\n        @Suppress(\"EXPERIMENTAL_API_USAGE\") val document = Json.nonstrict.parse(BrosDocument.serializer(), content)\n        BrosElement.lastId = document.maxId() + 1\n        document\n    } catch (e: Exception) {\n        //console.log(e)\n        null\n    }\n}\n","package io.framed.model.bros\n\nimport kotlinx.serialization.SerialKind\nimport kotlinx.serialization.UnionKind\nimport kotlinx.serialization.internal.SerialClassDescImpl\n\nobject PolymorphicClassDesc : SerialClassDescImpl(\"kotlin.Any\") {\n    override val kind: SerialKind = UnionKind.POLYMORPHIC\n\n    init {\n        addElement(\"klass\")\n        addElement(\"value\")\n    }\n}","package io.framed.model.bros\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.internal.ArrayListSerializer\n\n/**\n * A serializer for polymorphic [List]'s relying on the [PolymorphicSerializer] (supporting multiplatform).\n */\nobject PolymorphicListSerializer : KSerializer<List<Any>> by ArrayListSerializer(PolymorphicSerializer)","package io.framed.model.bros\n\nimport kotlinx.serialization.*\nimport kotlin.reflect.KClass\n\nobject PolymorphicSerializer : KSerializer<Any> {\n\n    override val descriptor: SerialDescriptor\n        get() = PolymorphicClassDesc\n\n    private val simpleNameSerializers = mutableMapOf<String, KSerializer<Any>>()\n    private val qualifiedSerializers = mutableMapOf<String, KSerializer<Any>>()\n\n    fun <T : Any> registerSerializer(klass: KClass<T>, serializer: KSerializer<T>, qualifiedName: String) {\n        val className = klass.simpleName!!\n        @Suppress(\"UNCHECKED_CAST\")\n        val anySerializer = serializer as KSerializer<Any>\n\n        // Cannot register duplicate class names.\n        val error = \"For now, polymorphic serialization in JavaScript does not allow duplicate class names.\"\n        if (simpleNameSerializers.containsKey(className)) {\n            throw IllegalArgumentException(\"A class with the name '$className$' is already registered. $error\")\n        }\n        if (qualifiedSerializers.containsKey(qualifiedName)) {\n            throw IllegalArgumentException(\"A class with the qualified name '$qualifiedName' is already registered. $error\")\n        }\n\n        simpleNameSerializers[className] = anySerializer\n        qualifiedSerializers[qualifiedName] = anySerializer\n    }\n\n    private fun getSerializerBySimpleClassName(className: String): KSerializer<Any> {\n        if (!simpleNameSerializers.containsKey(className)) {\n            throw NoSuchElementException(\"No polymorphic serializer is registered for the class '$className'.\")\n        }\n\n        return simpleNameSerializers[className]!!\n    }\n\n    private fun getSerializerByQualifiedName(qualifiedName: String): KSerializer<Any> {\n        if (!isSerializerByQualifiedNameRegistered(qualifiedName)) {\n            throw NoSuchElementException(\"No polymorphic serializer is registered with the qualified name '$qualifiedName'.\")\n        }\n\n        return qualifiedSerializers[qualifiedName]!!\n    }\n\n    private fun isSerializerByQualifiedNameRegistered(qualifiedName: String): Boolean {\n        return qualifiedSerializers.containsKey(qualifiedName)\n    }\n\n\n    override fun serialize(encoder: Encoder, obj: Any) {\n        val saver = getSerializerBySimpleClassName(obj::class.simpleName!!)\n\n        val output = encoder.beginStructure(descriptor)\n        output.encodeStringElement(descriptor, 0, saver.descriptor.name)\n        output.encodeSerializableElement(descriptor, 1, saver, obj)\n        output.endStructure(descriptor)\n    }\n\n    override fun deserialize(decoder: Decoder): Any {\n        val input = decoder.beginStructure(descriptor)\n        var klassName: String? = null\n        var value: Any? = null\n        mainLoop@ while (true) {\n            when (input.decodeElementIndex(descriptor)) {\n                CompositeDecoder.READ_ALL -> {\n                    klassName = input.decodeStringElement(descriptor, 0)\n                    val loader = getSerializerByQualifiedName(klassName)\n                    value = input.decodeSerializableElement(descriptor, 1, loader)\n                    break@mainLoop\n                }\n                CompositeDecoder.READ_DONE -> {\n                    break@mainLoop\n                }\n                0 -> {\n                    klassName = input.decodeStringElement(descriptor, 0)\n                }\n                1 -> {\n                    klassName = requireNotNull(klassName) { \"Cannot read polymorphic value before its type token\" }\n                    val loader = getSerializerByQualifiedName(klassName)\n                    value = input.decodeSerializableElement(descriptor, 1, loader)\n                }\n                else -> throw SerializationException(\"Invalid index\")\n            }\n        }\n\n        input.endStructure(descriptor)\n        return requireNotNull(value) { \"Polymorphic value have not been read\" }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","package io.framed.model.bros\n\nimport kotlinx.serialization.KSerializer\nimport kotlinx.serialization.internal.HashSetSerializer\n\n/**\n * A serializer for polymorphic [Set]'s relying on the [PolymorphicSerializer] (supporting multiplatform).\n */\nobject PolymorphicSetSerializer : KSerializer<Set<Any>> by HashSetSerializer(PolymorphicSerializer)","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml connection.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Aggregation\")\nclass BrosAggregation() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    /**\n     * Cardinality for the source side of this connection.\n     */\n    var sourceCardinality: String = \"1\"\n\n    /**\n     * Cardinality for the target side of this connection.\n     */\n    var targetCardinality: String = \"*\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.Serializable\n\n/**\n * Base model interface for easier access.\n *\n * @author lars\n */\n@Serializable\nabstract class BrosElement {\n\n    val id: Long = lastId++\n\n    open fun maxId(): Long = id\n\n    abstract fun stringify(): String\n\n    companion object {\n        var lastId: Long = 0\n    }\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\nabstract class BrosConnection : BrosElement() {\n    var sourceId: Long = id\n    var targetId: Long = id\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml model.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Attribute\")\nclass BrosAttribute() : BrosElement() {\n\n    constructor(init: (BrosAttribute) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this model.\n     */\n    var name: String = \"unnamed\"\n\n    /**\n     * Type of this model.\n     */\n    var type: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($name:$type)\"\n}\n","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicListSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml class.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Class\")\nclass BrosClass() : BrosObject() {\n\n    constructor(init: (BrosClass) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this class\n     */\n    var name: String = \"UnnamedClass\"\n\n    /**\n     * List of class attributes\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var attributes: List<BrosAttribute> = emptyList()\n\n    /**\n     * List of class methods\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var methods: List<BrosMethod> = emptyList()\n\n    override fun maxId(): Long = listOf(\n            id,\n            attributes.map { it.maxId() }.max() ?: 0,\n            methods.map { it.maxId() }.max() ?: 0\n    ).max() ?: id\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicListSerializer\nimport io.framed.model.bros.PolymorphicSetSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an crom compartment.\n *\n * @author Sebastian\n */\n@Serializable\n@SerialName(\"Compartment\")\nclass BrosCompartment() : BrosObjectGroup() {\n\n    constructor(init: (BrosCompartment) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this class\n     */\n    var name: String = \"UnnamedCompartment\"\n\n    /**\n     * List of class attributes\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var attributes: List<BrosAttribute> = emptyList()\n\n    /**\n     * List of class methods\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var methods: List<BrosMethod> = emptyList()\n\n\n    @Serializable(with = PolymorphicSetSerializer::class)\n    override var children: Set<BrosObject> = emptySet()\n\n\n    override fun maxId(): Long = listOf(\n            id,\n            attributes.map { it.maxId() }.max() ?: 0,\n            methods.map { it.maxId() }.max() ?: 0,\n            children.map { it.maxId() }.max() ?: 0\n    ).max() ?: id\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml connection.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Composition\")\nclass BrosComposition() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    /**\n     * Cardinality for the source side of this connection.\n     */\n    var sourceCardinality: String = \"1\"\n\n    /**\n     * Cardinality for the target side of this connection.\n     */\n    var targetCardinality: String = \"*\"\n\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an BROS create relation\n *\n * @author Sebastian\n */\n@Serializable\n@SerialName(\"CreateRelationship\")\nclass BrosCreateRelation() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an BROS destroy relation\n *\n * @author Sebastian\n */\n@Serializable\n@SerialName(\"DestroyRelationship\")\nclass BrosDestroyRelation() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * The model defines an model of the modeling language\n */\n@Serializable\n@SerialName(\"Event\")\nclass BrosEvent() : BrosObject() {\n\n    constructor(init: (BrosEvent) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Type of the model\n     */\n    var type: BrosEventType = BrosEventType.STANDARD\n    /**\n     * Description of the BpmnEvent\n     */\n    var desc: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($desc)\"\n}\n","package io.framed.model.bros.model\n\n/**\n * The enum defines the model and their specifications\n */\nenum class BrosEventType(val printableName: String) {\n    TIMER(\"Timer\"),\n    MESSAGE(\"Message\"),\n    ERROR(\"Error\"),\n    STANDARD(\"Standard\"),\n    CONDITION(\"Condition\"),\n    SIGNAL(\"Signal\");\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml connection.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Fulfillment\")\nclass BrosFulfillment() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml connection.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Inheritance\")\nclass BrosInheritance() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    /**\n     * Cardinality for the source side of this connection.\n     */\n    var sourceCardinality: String = \"\"\n\n    /**\n     * Cardinality for the target side of this connection.\n     */\n    var targetCardinality: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicListSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml model.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Method\")\nclass BrosMethod() : BrosElement() {\n\n    constructor(init: (BrosMethod) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this model.\n     */\n    var name: String = \"unnamed\"\n\n    /**\n     * Return model of this model.\n     */\n    var type: String = \"\"\n\n    /**\n     * List of parameters for this model.\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var parameters: List<BrosParameter> = emptyList()\n\n    override fun stringify() = \"${this::class.simpleName}($name:$type)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.Serializable\n\n@Serializable\nabstract class BrosObject : BrosElement() {\n\n    open fun getAllChildren(): List<BrosObject> = listOf(this)\n}","package io.framed.model.bros.model\n\nimport kotlinx.serialization.Serializable\n\n/**\n * Base model interface for easier access.\n *\n * @author lars\n */\n@Serializable\nabstract class BrosObjectGroup : BrosObject() {\n\n    abstract val children: Collection<BrosObject>\n\n    final override fun getAllChildren(): List<BrosObject> = listOf(this) + children.flatMap { it.getAllChildren() }\n}\n","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicSetSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml package (package is a reserved keyword).\n *\n * It contains classes, connections, role types and nested packages.\n */\n@Serializable\n@SerialName(\"Package\")\nclass BrosPackage() : BrosObjectGroup() {\n\n    constructor(init: (BrosPackage) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this package.\n     */\n    var name: String = \"UnnamedPackage\"\n\n    @Serializable(with = PolymorphicSetSerializer::class)\n    override var children: Set<BrosObject> = emptySet()\n\n    override fun maxId(): Long = listOf(\n            id,\n            children.map { it.maxId() }.max() ?: 0\n    ).max() ?: id\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml parameter.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Parameter\")\nclass BrosParameter() : BrosElement() {\n\n    constructor(init: (BrosParameter) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this parameter.\n     */\n    var name: String = \"unnamed\"\n\n    /**\n     * Type of this parameter.\n     */\n    var type: String = \"\"\n\n    override fun toString(): String =\n            name + type.let {\n                if (type.isBlank()) \"\" else \": $it\"\n            }\n\n    override fun equals(other: Any?): Boolean {\n        if (this === other) return true\n        if (other !is BrosParameter) return false\n\n        if (name != other.name) return false\n        if (type != other.type) return false\n\n        return true\n    }\n\n    override fun hashCode(): Int {\n        var result = name.hashCode()\n        result = 31 * result + type.hashCode()\n        return result\n    }\n\n    override fun stringify() = \"${this::class.simpleName}($name:$type)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for an uml connection.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"Relationship\")\nclass BrosRelationship() : BrosConnection() {\n\n    constructor(sourceId: Long, targetId: Long) : this() {\n        this.sourceId = sourceId\n        this.targetId = targetId\n    }\n\n    /**\n     * Name of this connection.\n     */\n    var name: String = \"\"\n\n    /**\n     * Cardinality for the source side of this connection.\n     */\n    var sourceCardinality: String = \"*\"\n\n    /**\n     * Cardinality for the target side of this connection.\n     */\n    var targetCardinality: String = \"*\"\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * The model defines an model of the modeling language\n */\n@Serializable\n@SerialName(\"ReturnEvent\")\nclass BrosReturnEvent() : BrosObject() {\n\n    constructor(init: (BrosReturnEvent) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Type of the model\n     */\n    var type: BrosEventType = BrosEventType.STANDARD\n    /**\n     * Description of the BpmnEvent\n     */\n    var desc: String = \"\"\n\n    override fun stringify() = \"${this::class.simpleName}($desc)\"\n}","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicListSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model roleType for an uml roleType.\n *\n * @author lars\n */\n@Serializable\n@SerialName(\"RoleType\")\nclass BrosRoleType() : BrosObject() {\n\n    constructor(init: (BrosRoleType) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this roleType\n     */\n    var name: String = \"UnnamedRole\"\n\n    /**\n     * List of roleType attributes\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var attributes: List<BrosAttribute> = emptyList()\n\n    /**\n     * List of roleType methods\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var methods: List<BrosMethod> = emptyList()\n\n    override fun maxId(): Long = listOf(\n            id,\n            attributes.map { it.maxId() }.max() ?: 0,\n            methods.map { it.maxId() }.max() ?: 0\n    ).max() ?: id\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n}\n","package io.framed.model.bros.model\n\nimport io.framed.model.bros.PolymorphicListSerializer\nimport io.framed.model.bros.PolymorphicSetSerializer\nimport kotlinx.serialization.SerialName\nimport kotlinx.serialization.Serializable\n\n/**\n * Model class for a bros scene.\n */\n@Serializable\n@SerialName(\"Scene\")\nclass BrosScene() : BrosObjectGroup() {\n\n    constructor(init: (BrosScene) -> Unit) : this() {\n        init(this)\n    }\n\n    /**\n     * Name of this scene\n     */\n    var name: String = \"UnnamedScene\"\n\n    /**\n     * List of scene attributes\n     */\n    @Serializable(with = PolymorphicListSerializer::class)\n    var attributes: List<BrosAttribute> = emptyList()\n\n\n    @Serializable(with = PolymorphicSetSerializer::class)\n    override var children: Set<BrosObject> = emptySet()\n\n    override fun maxId(): Long = listOf(\n            id,\n            attributes.map { it.maxId() }.max() ?: 0,\n            children.map { it.maxId() }.max() ?: 0\n    ).max() ?: id\n\n    override fun stringify() = \"${this::class.simpleName}($name)\"\n\n}\n","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.matcher.matchStrings\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnProcess\nimport io.framed.model.bros.model.BrosEvent\nimport io.framed.model.bros.model.BrosRoleType\nimport io.framed.model.bros.model.BrosScene\n\nfun Context.setupRule1() {\n\n    match<BpmnProcess, BrosScene> { process, scene ->\n        matchStrings(process.element.name, scene.element.name)\n    }\n    match<BpmnProcess, BrosRoleType> { process, role ->\n        matchStrings(process.element.name, role.element.name)\n    }\n    match<BpmnProcess, BrosEvent> { process, bros ->\n        matchStrings(process.element.name, bros.element.desc)\n    }\n\n    verifyBpmn<BpmnProcess>(\"Rule 1 - BpmnProcess\") { bpmn ->\n        for (bros in bpmn.matchingElements) {\n            if (bros.checkType<BrosRoleType>()) {\n                return@verifyBpmn Result.match(\"$bpmn matches $bros\", bros = bros)\n            }\n            if (bros.checkType<BrosScene>()) {\n                return@verifyBpmn Result.match(\"$bpmn matches $bros\", bros = bros)\n            }\n            if (bros.checkType<BrosEvent>()) {\n                return@verifyBpmn Result.match(\"$bpmn matches $bros\", bros = bros)\n            }\n        }\n        Result.error(\"Cannot find matching BrosElement for $bpmn\")\n    }\n}","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.matcher.matchStrings\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnLane\nimport io.framed.model.bros.model.BrosRoleType\n\nfun Context.setupRule2() {\n    match<BpmnLane, BrosRoleType> { lane, role ->\n        matchStrings(lane.element.name, role.element.name)\n    }\n\n    verifyBpmn<BpmnLane>(\"Rule 2 - BpmnLane\") { bpmn ->\n        for (bros in bpmn.matchingElements) {\n            if (bros.checkType<BrosRoleType>()) {\n                return@verifyBpmn Result.match(\"$bpmn matches $bros\", bros = bros)\n            }\n        }\n        Result.error(\"Cannot find matching BrosElement for $bpmn\")\n    }\n}","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.matcher.matchStrings\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnEndEvent\nimport io.framed.model.bros.model.BrosReturnEvent\n\nfun Context.setupRule3() {\n\n    match<BpmnEndEvent, BrosReturnEvent>(\"ReturnEventMatcher\") { bpmn, bros ->\n        matchStrings(bpmn.element.name, bros.element.desc)\n    }\n\n    /**\n     * Bpmn termination event must match a bros return event\n     */\n    verifyBpmn<BpmnEndEvent>(\"Rule 3 - BpmnTerminationEvent\") { bpmn ->\n        if (!bpmn.element.terminationEvent) return@verifyBpmn null\n\n        for (bros in bpmn.matchingElements) {\n            if (bros.checkType<BrosReturnEvent>()) {\n                return@verifyBpmn Result.match(\"$bpmn matches $bros\", bros = bros)\n            }\n        }\n        Result.error(\"Cannot find matching BrosElement for $bpmn\")\n    }\n}","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.ModelTree\nimport io.framed.framework.matcher.matchStrings\nimport io.framed.framework.transitiveParent\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bpmn.model.BpmnEndEvent\nimport io.framed.model.bpmn.model.BpmnEvent\nimport io.framed.model.bpmn.model.BpmnMessageFlow\nimport io.framed.model.bros.model.BrosDestroyRelation\nimport io.framed.model.bros.model.BrosElement\nimport io.framed.model.bros.model.BrosEvent\nimport io.framed.model.bros.model.BrosReturnEvent\n\n@Suppress(\"UNCHECKED_CAST\")\nfun Context.setupRule4() {\n\n    match<BpmnEvent, BrosEvent> { bpmn, bros ->\n        matchStrings(bpmn.element.name, bros.element.desc)\n    }\n    match<BpmnEvent, BrosEvent> { bpmn, bros ->\n        bpmn.relations<BpmnMessageFlow>().any { flow ->\n            flow.source in bros.matchingElements ||\n                    flow.target in bros.matchingElements\n        }\n    }\n    match<BpmnEvent, BrosReturnEvent> { bpmn, bros ->\n        bpmn.relations<BpmnMessageFlow>().any { flow ->\n            flow.source in bros.matchingElements ||\n                    flow.target in bros.matchingElements\n        }\n    }\n\n    /**\n     * Bpmn end event must match a bros event that destroys the same container\n     */\n    verifyBpmn<BpmnEndEvent>(\"Rule 4 - BpmnEndEvent\") { bpmn ->\n        if (bpmn.element.terminationEvent) return@verifyBpmn null\n\n        for (bros in bpmn.matchingElements) {\n            if (bros.checkType<BrosEvent>()) {\n                val bpmnParents = bpmn.transitiveParent<BpmnElement>()\n                val brosDestroy = bros.relations<BrosDestroyRelation>().firstOrNull()?.target as? ModelTree<BrosElement>\n\n                for (bpmnParent in bpmnParents) {\n                    if (brosDestroy != null && brosDestroy in bpmnParent.matchingElements) {\n                        return@verifyBpmn Result.match(\"$bpmn matches $bros and they destroy '$bpmnParent'\", bros = bros)\n                    }\n                }\n                return@verifyBpmn Result.error(message = \"$bpmn matches $bros but they destroy different container (${bpmnParents.joinToString { it.toString() }} | $brosDestroy)\", bros = bros)\n            }\n            if (bros.checkType<BrosReturnEvent>()) {\n                val bpmnParents = bpmn.transitiveParent<BpmnElement>()\n                val brosParent = bros.parent as? ModelTree<BrosElement>\n\n                for (bpmnParent in bpmnParents) {\n                    if (brosParent != null && brosParent in bpmnParent.matchingElements) {\n                        return@verifyBpmn Result.match(\"$bpmn matches $bros and they destroy '$bpmnParent'\", bros = bros)\n                    }\n                }\n                return@verifyBpmn Result.error(\"$bpmn matches $bros but they destroy different container (${bpmnParents.joinToString { it.toString() }} | $brosParent)\", bros = bros)\n\n            }\n        }\n        Result.error(\"Cannot find matching BrosElement for $bpmn\")\n    }\n}","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.ModelTree\nimport io.framed.framework.transitiveParent\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bpmn.model.BpmnEvent\nimport io.framed.model.bpmn.model.BpmnStartEvent\nimport io.framed.model.bros.model.BrosCreateRelation\nimport io.framed.model.bros.model.BrosElement\nimport io.framed.model.bros.model.BrosEvent\n\n@Suppress(\"UNCHECKED_CAST\")\nfun Context.setupRule5() {\n\n    /**\n     * Bpmn start event must match a bros event that creates the same container\n     */\n    verifyBpmn<BpmnStartEvent>(\"Rule 5 - BpmnStartEvent\") { bpmn ->\n        for (bros in bpmn.matchingElements) {\n            if (bros.checkType<BrosEvent>()) {\n                val bpmnParents = bpmn.transitiveParent<BpmnElement>()\n                val brosCreate = bros.relations<BrosCreateRelation>()\n                        .firstOrNull()\n                        ?.source as? ModelTree<BrosElement>\n\n\n                for (bpmnParent in bpmnParents) {\n                    if (brosCreate != null && brosCreate in bpmnParent.matchingElements) {\n                        return@verifyBpmn Result.match(\"$bpmn matches $bros and they create $bpmnParent\", bros = bros)\n                    }\n                }\n                return@verifyBpmn Result.error(\"$bpmn matches $bros but they create different container (${bpmnParents.joinToString { it.toString() }} | $brosCreate)\", bros = bros)\n            }\n        }\n        Result.error(\"Cannot find matching BrosElement for $bpmn\")\n    }\n}","package io.framed.modules\n\nimport io.framed.framework.Context\nimport io.framed.framework.matcher.matchStrings\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bpmn.model.BpmnGateway\nimport io.framed.model.bpmn.model.BpmnSequenceFlow\nimport io.framed.model.bpmn.model.BpmnTask\nimport io.framed.model.bros.model.BrosEvent\nimport io.framed.model.bros.model.BrosReturnEvent\n\nfun Context.setupRule6() {\n\n    match<BpmnGateway, BrosEvent> { bpmn, bros ->\n        bpmn.relations<BpmnSequenceFlow>().any { flow ->\n            flow.relation.name.isNotBlank() &&\n                    matchStrings(flow.relation.name, bros.element.desc)\n        }\n    }\n    match<BpmnGateway, BrosReturnEvent> { bpmn, bros ->\n        bpmn.relations<BpmnSequenceFlow>().any { flow ->\n            flow.relation.name.isNotBlank() &&\n                    matchStrings(flow.relation.name, bros.element.desc)\n        }\n    }\n    match<BpmnTask, BrosEvent> { bpmn, bros ->\n        matchStrings(bpmn.element.name, bros.element.desc)\n    }\n    match<BpmnTask, BrosReturnEvent> { bpmn, bros ->\n        matchStrings(bpmn.element.name, bros.element.desc)\n    }\n\n    /**\n     * A bros event should have a matching element in bpmn.\n     */\n    verifyBros<BrosEvent>(\"Rule 6 - BrosEvent\") { bros ->\n        for (bpmn in bros.matchingElements) {\n            if (bpmn.checkType<BpmnElement>()) {\n                return@verifyBros Result.match(\"$bros matches $bpmn\", bpmn = bpmn)\n            }\n        }\n        Result.error(\"Cannot find matching BpmnElement for $bros\")\n    }\n\n    /**\n     * A bros return event should have a matching element in bpmn.\n     */\n    verifyBros<BrosReturnEvent>(\"Rule 6 - BrosReturnEvent\") { bros ->\n        for (bpmn in bros.matchingElements) {\n            if (bpmn.checkType<BpmnElement>()) {\n                return@verifyBros Result.match(\"$bros matches $bpmn\", bpmn = bpmn)\n            }\n        }\n        Result.error(\"Cannot find matching BpmnElement for $bros\")\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.event.subscribe\nimport de.westermann.kobserve.property.join\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\nimport de.westermann.kwebview.components.button\nimport de.westermann.kwebview.components.h1\nimport de.westermann.kwebview.components.textView\nimport io.framed.framework.ModelRelation\nimport io.framed.framework.matcher.PredefinedMatch\nimport io.framed.generateBpmnTree\nimport io.framed.generateBrosTree\nimport io.framed.model.bpmn.model.BpmnMessageFlow\nimport io.framed.model.bpmn.model.BpmnSequenceFlow\nimport io.framed.model.bpmn.xml.BpmnParser\nimport io.framed.model.bros.BrosParser\nimport io.framed.verify\nimport org.w3c.dom.SMOOTH\nimport org.w3c.dom.ScrollBehavior\nimport org.w3c.dom.ScrollToOptions\nimport org.w3c.dom.get\nimport org.w3c.files.File\nimport org.w3c.files.FileReader\nimport org.w3c.files.get\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nclass Application : ViewCollection<View>() {\n\n    val bpmnFile = FileTextBox(\n            \"BPMN\",\n            transform = { content ->\n                val bpmn = BpmnParser.parse(content) ?: return@FileTextBox null\n                generateBpmnTree(\n                        bpmn.allChildren.values.filter { it is BpmnSequenceFlow || it is BpmnMessageFlow }.map { ModelRelation(it, it::class).also { \"println ${it.relation.stringify()}\" } },\n                        bpmn\n                )\n            },\n            count = {\n                it.asSequence().count()\n            }\n    )\n\n    val brosFile = FileTextBox(\n            \"BROS\",\n            transform = { content ->\n                val bros = BrosParser.parse(content) ?: return@FileTextBox null\n                generateBrosTree(\n                        bros.connections.connections.map { ModelRelation(it, it::class) },\n                        bros.root\n                )\n            },\n            count = {\n                it.asSequence().count()\n            }\n    )\n    val predefinedFile = FileTextBox(\n            \"Predefined matching\",\n            transform = { content ->\n                PredefinedMatch.parse(content)\n            },\n            count = {\n                it.size\n            }\n    )\n\n    private val validProperty = brosFile.modelProperty.join(bpmnFile.modelProperty) { a, b ->\n        a != null && b != null\n    }\n    private val valid by validProperty\n\n    private fun loadFile(file: File) {\n        file.load {\n            when {\n                bpmnFile.testTransform(it) -> bpmnFile.content = it\n                brosFile.testTransform(it) -> brosFile.content = it\n                predefinedFile.testTransform(it) -> predefinedFile.content = it\n            }\n        }\n    }\n\n    fun enableDemo(action: () -> Unit) {\n        button(\"Load demo\") {\n            classList += \"load-demo\"\n            onClick { action() }\n        }\n    }\n\n    private fun update() {\n        if (valid) {\n            verify(\n                    bpmnFile.model ?: return,\n                    brosFile.model ?: return,\n                    predefinedFile.model ?: emptyList()\n            )\n        }\n    }\n\n    init {\n        bpmnFile.modelProperty.onChange { update() }\n        brosFile.modelProperty.onChange { update() }\n        predefinedFile.modelProperty.onChange { update() }\n        FeatureState.usePredefinedMatchesProperty.onChange { update() }\n\n        subscribe<UpdatePredefinedMatch> {\n            val current = predefinedFile.model ?: emptyList()\n\n            val new = if (it.type == UpdatePredefinedMatch.Type.DELETE) {\n                current - it.match\n            } else {\n                current + it.match\n            }\n\n            predefinedFile.content = PredefinedMatch.stringify(new)\n        }\n\n\n        boxView(\"start-page\") {\n            boxView(\"start-header\") {\n                boxView {\n                    h1(\"BPMN-BROS-Verifier\")\n                    textView(\"Select bpmn and bros file to start verification\")\n                }\n            }\n            boxView(\"start-files\") {\n                +bpmnFile\n                +brosFile\n                +predefinedFile\n            }\n            boxView(\"start-verify\") {\n                boxView {\n                    classList.bind(\"active\", validProperty)\n                    textView(\"Scroll down to view result\")\n\n                    onClick {\n                        document.documentElement!!.scrollTo(ScrollToOptions(\n                                0.0,\n                                window.innerHeight.toDouble(),\n                                ScrollBehavior.SMOOTH\n                        ))\n                    }\n                }\n            }\n        }\n\n        +ResultView()\n\n        boxView(\"start-drag\") {\n            textView(\"Drag file here\")\n        }\n\n        onDrop { ev ->\n            ev.preventDefault()\n            classList.remove(\"drag\")\n\n            val dataTransfer = ev.dataTransfer ?: return@onDrop\n\n            if (dataTransfer.items.length > 0) {\n                for (i in 0 until dataTransfer.items.length) {\n                    if (dataTransfer.items[i]?.kind == \"file\") {\n                        val file = dataTransfer.items[i]!!.getAsFile()!!\n                        loadFile(file)\n                    }\n                }\n            } else {\n                for (i in 0 until dataTransfer.files.length) {\n                    val file = dataTransfer.files[i]!!\n                    loadFile(file)\n                }\n            }\n        }\n        onDragOver {\n            it.preventDefault()\n            classList.add(\"drag\")\n        }\n        onDragEnter {\n            classList.add(\"drag\")\n        }\n        onDragLeave {\n            classList.remove(\"drag\")\n        }\n    }\n}\n\nfun File.load(onLoad: (String) -> Unit) {\n    val reader = FileReader()\n    reader.readAsText(this)\n    reader.onloadend = {\n        onLoad(reader.result)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.files\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) to Kotlin\n */\npublic external open class Blob(blobParts: Array<dynamic> = definedExternally, options: BlobPropertyBag = definedExternally) {\n    open val size: Int\n    open val type: String\n    open val isClosed: Boolean\n    fun slice(start: Int = definedExternally, end: Int = definedExternally, contentType: String = definedExternally): Blob\n    fun close(): Unit\n}\n\npublic external interface BlobPropertyBag {\n    var type: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BlobPropertyBag(type: String? = \"\"): BlobPropertyBag {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [File](https://developer.mozilla.org/en/docs/Web/API/File) to Kotlin\n */\npublic external open class File(fileBits: Array<dynamic>, fileName: String, options: FilePropertyBag = definedExternally) : Blob {\n    open val name: String\n    open val lastModified: Int\n}\n\npublic external interface FilePropertyBag : BlobPropertyBag {\n    var lastModified: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun FilePropertyBag(lastModified: Int? = undefined, type: String? = \"\"): FilePropertyBag {\n    val o = js(\"({})\")\n\n    o[\"lastModified\"] = lastModified\n    o[\"type\"] = type\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [FileList](https://developer.mozilla.org/en/docs/Web/API/FileList) to Kotlin\n */\npublic external abstract class FileList : ItemArrayLike<File> {\n    override val length: Int\n    override fun item(index: Int): File?\n}\n@kotlin.internal.InlineOnly inline operator fun FileList.get(index: Int): File? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [FileReader](https://developer.mozilla.org/en/docs/Web/API/FileReader) to Kotlin\n */\npublic external open class FileReader : EventTarget {\n    open val readyState: Short\n    open val result: dynamic\n    open val error: dynamic\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    fun readAsArrayBuffer(blob: Blob): Unit\n    fun readAsBinaryString(blob: Blob): Unit\n    fun readAsText(blob: Blob, label: String = definedExternally): Unit\n    fun readAsDataURL(blob: Blob): Unit\n    fun abort(): Unit\n\n    companion object {\n        val EMPTY: Short\n        val LOADING: Short\n        val DONE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [FileReaderSync](https://developer.mozilla.org/en/docs/Web/API/FileReaderSync) to Kotlin\n */\npublic external open class FileReaderSync {\n    fun readAsArrayBuffer(blob: Blob): ArrayBuffer\n    fun readAsBinaryString(blob: Blob): String\n    fun readAsText(blob: Blob, label: String = definedExternally): String\n    fun readAsDataURL(blob: Blob): String\n}\n\n","package io.framed.ui\n\nimport de.westermann.kobserve.event.emit\nimport de.westermann.kobserve.property.join\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.MaterialIcon\nimport de.westermann.kwebview.components.button\nimport de.westermann.kwebview.components.iconView\nimport de.westermann.kwebview.components.selectView\nimport io.framed.framework.matcher.PredefinedMatch\n\nobject CopyView : ViewCollection<View>() {\n\n    val bpmnNameProperty = property(\"\")\n    val bpmnIdProperty = property<String?>(null)\n\n    val brosNameProperty = property(\"\")\n    val brosIdProperty = property<Long?>(null)\n\n    private val typeProperty = property(PredefinedMatch.Type.MATCH)\n\n    private var active: Boolean\n        get() = classList[\"active\"]\n        set(value) {\n            classList[\"active\"] = value\n        }\n\n    init {\n        iconView(MaterialIcon.CLEAR) {\n            onClick {\n                active = false\n            }\n        }\n\n        +ResultField(\n                \"BPMN\",\n                bpmnNameProperty,\n                bpmnIdProperty\n        )\n\n        +ResultField(\n                \"BROS\",\n                brosNameProperty,\n                brosIdProperty\n        )\n\n        selectView(typeProperty, {\n            it.name.toLowerCase().capitalize()\n        })\n\n        button(\"Create\") {\n            onClick {\n                active = false\n\n                val match = PredefinedMatch(\n                        bpmnIdProperty.value ?: return@onClick,\n                        brosIdProperty.value ?: return@onClick,\n                        typeProperty.value\n                )\n\n                emit(UpdatePredefinedMatch(match, UpdatePredefinedMatch.Type.ADD))\n            }\n\n            property(html::disabled).bind(bpmnIdProperty.join(brosIdProperty) { a, b ->\n                if (a != null || b != null) {\n                    active = true\n                }\n                a == null || b == null\n            })\n        }\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.property.property\nimport org.w3c.dom.get\nimport org.w3c.dom.set\nimport kotlin.browser.window\nimport kotlin.reflect.KMutableProperty0\nimport kotlin.reflect.KProperty0\n\nobject FeatureState {\n    val showErrorsProperty = property(true)\n    var showErrors by showErrorsProperty\n\n    val showWarningsProperty = property(true)\n    var showWarnings by showWarningsProperty\n\n    val showInfosProperty = property(true)\n    var showInfos by showInfosProperty\n\n    val showSuccessfulProperty = property(true)\n    var showSuccessful by showSuccessfulProperty\n\n    val tabProperty = property(0)\n    var tab by tabProperty\n\n    val usePredefinedMatchesProperty = property(true)\n    var usePredefinedMatches by usePredefinedMatchesProperty\n\n    private fun save(property: KProperty0<Boolean>) {\n        window.localStorage[\"bbv-\" + property.name] = property.get().toString()\n    }\n\n    private inline fun <reified T : Any> load(property: KMutableProperty0<T>) {\n        val value = window.localStorage[\"bbv-\" + property.name] ?: return\n        val h: T = when (T::class) {\n            Boolean::class -> value.toBoolean()\n            Int::class -> value.toIntOrNull()\n            else -> null\n        } as? T ?: return\n        if (property.get() != h) {\n            property.set(h)\n        }\n    }\n\n    init {\n        load(this::showErrors)\n        load(this::showWarnings)\n        load(this::showInfos)\n        load(this::showSuccessful)\n        load(this::tab)\n\n        showErrorsProperty.onChange { save(this::showErrors) }\n        showWarningsProperty.onChange { save(this::showWarnings) }\n        showInfosProperty.onChange { save(this::showInfos) }\n        showSuccessfulProperty.onChange { save(this::showSuccessful) }\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.*\nimport org.w3c.dom.events.EventListener\nimport org.w3c.files.get\n\nclass FileTextBox<T : Any>(\n        name: String,\n        private val transform: (String) -> T?,\n        private val count: (T) -> Int\n) : ViewCollection<View>() {\n\n    val contentProperty = property(\"\")\n    var content by contentProperty\n\n    private fun saveTransform(string: String) = try {\n        transform(string)\n    } catch (_: Exception) {\n        null\n    }\n\n    val modelProperty = contentProperty.mapBinding(this::saveTransform)\n    val model by modelProperty\n\n    private val countTextProperty = modelProperty.mapBinding {\n        val m = model\n        m?.let(count)?.let {\n            if (it == 1) \"Found 1 element\" else \"Found $it elements\"\n        } ?: if (content.isBlank()) \"\" else \"Given file is not valid\"\n    }\n\n    fun testTransform(value: String) = saveTransform(value) != null\n\n    init {\n        textView(name)\n        val input = inputView(type = InputType.FILE) {\n            html.addEventListener(\"change\", EventListener {\n                val files = html.files!!\n                for (i in 0 until files.length) {\n                    files[i]?.load {\n                        content = it\n                    }\n                }\n            })\n        }\n        button(\"Select file\") {\n            onClick {\n                input.click()\n            }\n        }\n        boxView(\"text-area-box\") {\n            textArea(contentProperty)\n        }\n        boxView {\n            textView(countTextProperty)\n        }\n    }\n}\n","package io.framed.ui\n\nimport de.westermann.kobserve.property.observe\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.MaterialIcon\nimport de.westermann.kwebview.components.boxView\nimport de.westermann.kwebview.components.iconView\nimport io.framed.framework.ModelTree\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\nclass ResultEntry(\n        private val type: Type,\n        private val bpmn: ModelTree<BpmnElement>?,\n        private val bros: ModelTree<BrosElement>?,\n        private val module: String?,\n        private val message: String,\n        onDelete: (() -> Unit)? = null\n) : ViewCollection<View>() {\n\n    fun render(view: View): ResultEntry {\n        view.classList += \"contains-${type.name.toLowerCase()}\"\n        return this\n    }\n\n    init {\n        classList += \"entry\"\n        classList += \"entry-${type.name.toLowerCase()}\"\n\n        boxView {\n            +ResultField(\"BPMN\", bpmn?.toString().observe(), bpmn?.element?.id.observe()).also {\n                it.classList += \"field-1-1\"\n            }\n            +ResultField(\"BROS\", bros?.toString().observe(), bros?.element?.id.observe()).also {\n                it.classList += \"field-1-2\"\n            }\n            +ResultField(\"Module\", module.observe()).also {\n                it.classList += \"field-1-3\"\n            }\n        }\n\n        boxView {\n            +ResultField(\"Message\", message.observe()).also {\n                it.classList += \"field-2-1\"\n            }\n        }\n\n        if (onDelete != null) {\n            boxView(\"delete\") {\n                iconView(MaterialIcon.CLEAR)\n\n                onClick {\n                    onDelete()\n                }\n            }\n        }\n    }\n\n    enum class Type {\n        ERROR, WARN, INFO, ACCEPT\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.checkbox\nimport de.westermann.kwebview.components.label\n\nclass ResultFeature(\n        name: String,\n        value: Property<Boolean>\n) : ViewCollection<View>() {\n    init {\n        label(\n                checkbox(value),\n                name\n        )\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.async\nimport de.westermann.kwebview.components.textView\nimport kotlin.browser.window\n\nclass ResultField(\n        val name: String,\n        val value: ReadOnlyProperty<out Any?>,\n        val extra: ReadOnlyProperty<out Any?> = property<String?>(null)\n) : ViewCollection<View>() {\n\n    private val isBpmnId = name.equals(\"bpmn\", true)\n    private val isBrosId = name.equals(\"bros\", true)\n\n    init {\n        property(html::textContent).bind(value.mapBinding { it?.toString() })\n\n        if (!(isBpmnId || isBrosId)) {\n            value.onChange {\n                classList -= \"updated\"\n\n                async(10) {\n                    classList += \"updated\"\n                }\n            }\n        }\n\n        val clickable = extra.mapBinding { it != null }\n\n        dataset[\"title\"] = name\n        dataset.bind(\"extra\", extra.mapBinding {\n            it?.let { \"ID: $it\" }\n        })\n\n        classList.bind(\"clickable\", clickable)\n        property(this::title).bind(clickable.mapBinding { if (it) \"Click to copy ID\" else null })\n\n        onClick {\n            if (clickable.value) {\n                val clip = window.navigator.clipboard\n                clip.writeText(value.value.toString())\n\n                if (isBpmnId) {\n                    CopyView.bpmnIdProperty.value = extra.value?.toString()\n                    CopyView.bpmnNameProperty.value = value.value?.toString() ?: \"\"\n                } else if (isBrosId) {\n                    CopyView.brosIdProperty.value = extra.value?.toString()?.toLongOrNull()\n                    CopyView.brosNameProperty.value = value.value?.toString() ?: \"\"\n                }\n\n                textView(\"Copied ID !\") {\n                    classList += \"tooltip\"\n\n                    async(2000) {\n                        this@ResultField.remove(this)\n                    }\n                    onClick {\n                        it.stopPropagation()\n                        it.preventDefault()\n                        this@ResultField.remove(this)\n                    }\n                }\n            }\n        }\n    }\n}\n","package io.framed.ui\n\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\nimport io.framed.RenderableData\nimport io.framed.framework.verifier.Result\n\nclass ResultStats : ViewCollection<View>() {\n\n    val data = RenderableData.renderableProperty\n\n    init {\n        boxView {\n            dataset[\"title\"] = \"Verification stats\"\n\n            +ResultField(\"Successful checks\", data.mapBinding {\n                it?.let {\n                    val count = it.results.count { it.type == Result.Type.POSITIVE }\n                    \"$count of ${it.results.size}\"\n                }\n            })\n\n            +ResultField(\"Errors\", data.mapBinding {\n                it?.let {\n                    val count = it.results.count { it.type == Result.Type.NEGATIVE }\n                    \"$count of ${it.results.size}\"\n                }\n            })\n\n            +ResultField(\"Coverage\", data.mapBinding {\n                it?.let {\n                    val count = it.results.count { it.type == Result.Type.POSITIVE }\n                    \"${count * 100 / it.results.size}%\"\n                }\n            })\n\n            +ResultField(\"Fixed point matching rounds\", data.mapBinding {\n                it?.matchRounds?.toString()\n            })\n        }\n\n        boxView {\n            dataset[\"title\"] = \"BPMN matching stats\"\n\n            val help = data.mapBinding {\n                it?.let {\n                    var count = 0\n                    var matches = 0\n                    var doubles = 0\n                    for (element in it.bpmnTree.asSequence()) {\n                        count++\n                        if (element.matchingElements.isNotEmpty()) {\n                            matches++\n                            if (element.matchingElements.size > 1) {\n                                doubles++\n                            }\n                        }\n                    }\n\n                    Help(count, matches, doubles)\n                }\n            }\n\n            +ResultField(\"Matched elements\", help.mapBinding {\n                it?.run { \"$matches of $count\" }\n            })\n\n            +ResultField(\"Unmatched elements\", help.mapBinding {\n                it?.run { \"${count - matches} of $count\" }\n            })\n\n            +ResultField(\"Multiple matches\", help.mapBinding {\n                it?.run { doubles.toString() }\n            })\n\n            +ResultField(\"Coverage\", help.mapBinding {\n                it?.run { \"${matches * 100 / count}%\" }\n            })\n        }\n\n        boxView {\n            dataset[\"title\"] = \"BROS matching stats\"\n\n            val help = data.mapBinding {\n                it?.let {\n                    var count = 0\n                    var matches = 0\n                    var doubles = 0\n                    for (element in it.brosTree.asSequence()) {\n                        count++\n                        if (element.matchingElements.isNotEmpty()) {\n                            matches++\n                            if (element.matchingElements.size > 1) {\n                                doubles++\n                            }\n                        }\n                    }\n\n                    Help(count, matches, doubles)\n                }\n            }\n\n            +ResultField(\"Matched elements\", help.mapBinding {\n                it?.run { \"$matches of $count\" }\n            })\n\n            +ResultField(\"Unmatched elements\", help.mapBinding {\n                it?.run { \"${count - matches} of $count\" }\n            })\n\n            +ResultField(\"Multiple matches\", help.mapBinding {\n                it?.run { doubles.toString() }\n            })\n\n            +ResultField(\"Coverage\", help.mapBinding {\n                it?.run { \"${matches * 100 / count}%\" }\n            })\n        }\n\n        boxView {\n            dataset[\"title\"] = \"Features\"\n\n            +ResultFeature(\"Use predefined matching\", FeatureState.usePredefinedMatchesProperty)\n            +ResultFeature(\"Show errors\", FeatureState.showErrorsProperty)\n            +ResultFeature(\"Show warnings\", FeatureState.showWarningsProperty)\n            +ResultFeature(\"Show infos\", FeatureState.showInfosProperty)\n            +ResultFeature(\"Show successful\", FeatureState.showSuccessfulProperty)\n        }\n    }\n\n    data class Help(\n            val count: Int,\n            val matches: Int,\n            val doubles: Int\n    )\n}","package io.framed.ui\n\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.BoxView\nimport de.westermann.kwebview.components.TextView\n\nclass ResultTab(val name: String, init: ViewCollection<View>.() -> Unit) {\n\n    val selectedProperty = property(false)\n    var selected by selectedProperty\n\n    val header = TextView(name).apply {\n        classList.bind(\"active\", selectedProperty)\n\n        onClick {\n            selected = true\n        }\n    }\n\n    val content = BoxView().apply {\n        classList.bind(\"active\", selectedProperty)\n\n        init()\n    }\n}","package io.framed.ui\n\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\n\nclass ResultTabList(init: ResultTabList.() -> Unit) : ViewCollection<View>() {\n\n    private var tabs = emptyList<ResultTab>()\n\n    fun tab(name: String, init: ViewCollection<View>.() -> Unit) {\n        val newTab = ResultTab(name, init)\n        tabs += newTab\n\n        newTab.selectedProperty.onChange {\n            if (newTab.selected) {\n                for (t in tabs) {\n                    if (t != newTab) {\n                        t.selected = false\n                    }\n                }\n            }\n        }\n    }\n\n    init {\n        classList += \"container\"\n        init()\n\n        boxView(\"result-container-header\") {\n            for (tab in tabs) {\n                +tab.header\n            }\n        }\n\n        boxView(\"result-container-body\") {\n            for (tab in tabs) {\n                +tab.content\n            }\n        }\n\n        tabs.first().selected = true\n    }\n}","package io.framed.ui\n\nimport de.westermann.kobserve.event.emit\nimport de.westermann.kobserve.not\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\nimport io.framed.RenderableData\nimport io.framed.framework.ModelTree\nimport io.framed.framework.matcher.PredefinedMatch\nimport io.framed.framework.verifier.Result\nimport io.framed.model.bpmn.model.BpmnElement\nimport io.framed.model.bros.model.BrosElement\n\n@Suppress(\"UNCHECKED_CAST\")\nclass ResultView : ViewCollection<View>() {\n\n    val data = RenderableData.renderableProperty\n\n    init {\n        classList.bind(\"hidden\", data.mapBinding { it == null })\n\n        +CopyView\n        +ResultStats()\n        +ResultTabList {\n            classList.bind(\"hide-accept\", !FeatureState.showSuccessfulProperty)\n            classList.bind(\"hide-error\", !FeatureState.showErrorsProperty)\n            classList.bind(\"hide-warn\", !FeatureState.showWarningsProperty)\n            classList.bind(\"hide-info\", !FeatureState.showInfosProperty)\n\n            tab(\"Verify result\") {\n                data.onChange {\n                    clear()\n\n                    val d = data.value ?: return@onChange\n                    for ((_, l) in d.results.groupBy { it.verifier }) {\n                        boxView(\"entry-box\") {\n                            for (r in l) {\n                                +ResultEntry(\n                                        r.type.transform(),\n                                        r.bpmn,\n                                        r.bros,\n                                        r.verifier?.name.toString(),\n                                        r.message\n                                ).render(this)\n                            }\n                        }\n                    }\n                }\n            }\n            tab(\"BPMN matching\") {\n                data.onChange {\n                    clear()\n\n                    val d = data.value ?: return@onChange\n                    for (element in d.bpmnTree.asSequence()) {\n                        boxView(\"entry-box\") {\n\n                            for ((r, modules) in element.matchingElementsMap) {\n                                +ResultEntry(\n                                        ResultEntry.Type.INFO,\n                                        element,\n                                        r as ModelTree<BrosElement>,\n                                        modules.joinToString(\", \"),\n                                        \"Found name match\"\n                                ).render(this)\n                            }\n\n                            if (element.matchingElements.isEmpty()) {\n                                +ResultEntry(\n                                        ResultEntry.Type.WARN,\n                                        element,\n                                        null,\n                                        null,\n                                        \"Cannot find matching element\"\n                                ).render(this)\n                            }\n                        }\n                    }\n                }\n            }\n            tab(\"BROS matching\") {\n                data.onChange {\n                    clear()\n\n                    val d = data.value ?: return@onChange\n                    for (element in d.brosTree.asSequence()) {\n                        boxView(\"entry-box\") {\n\n                            for ((r, modules) in element.matchingElementsMap) {\n                                +ResultEntry(\n                                        ResultEntry.Type.INFO,\n                                        r as ModelTree<BpmnElement>,\n                                        element,\n                                        modules.joinToString(\", \"),\n                                        \"Found name match\"\n                                ).render(this)\n                            }\n\n                            if (element.matchingElements.isEmpty()) {\n                                +ResultEntry(\n                                        ResultEntry.Type.WARN,\n                                        null,\n                                        element,\n                                        null,\n                                        \"Cannot find matching element\"\n                                ).render(this)\n                            }\n                        }\n                    }\n                }\n            }\n            tab(\"Predefined matching\") {\n                data.onChange {\n                    clear()\n\n                    val d = data.value ?: return@onChange\n                    for (element in d.predefinedMatches) {\n                        boxView(\"entry-box\") {\n                            +ResultEntry(\n                                    when (element.type) {\n                                        PredefinedMatch.Type.MATCH -> ResultEntry.Type.ACCEPT\n                                        PredefinedMatch.Type.NOMATCH -> ResultEntry.Type.ERROR\n                                    },\n                                    d.bpmnTree.asSequence().firstOrNull {\n                                        it.element.id == element.bpmn\n                                    },\n                                    d.brosTree.asSequence().firstOrNull {\n                                        it.element.id == element.bros\n                                    },\n                                    \"PredefinedMatcher\",\n                                    \"Add rule by manuel matching\"\n                            ) {\n                                emit(UpdatePredefinedMatch(element, UpdatePredefinedMatch.Type.DELETE))\n                            }.render(this)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nclass UpdatePredefinedMatch(\n        val match: PredefinedMatch,\n        val type: Type\n) {\n    enum class Type {\n        ADD, DELETE\n    }\n}\n\nprivate fun Result.Type?.transform() = when (this) {\n    Result.Type.POSITIVE -> ResultEntry.Type.ACCEPT\n    Result.Type.NEGATIVE -> ResultEntry.Type.ERROR\n    else -> ResultEntry.Type.WARN\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, { it.iterator() })\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence of [IndexedValue] for each element of the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.1\")\npublic fun Sequence<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.toHashSet()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package io.framed\n\nimport de.westermann.kobserve.property.property\nimport io.framed.framework.Context\nimport io.framed.framework.ModelRelation\nimport io.framed.framework.ModelTree\nimport io.framed.framework.matcher.PredefinedMatch\nimport io.framed.framework.matcher.TreeMatcher\nimport io.framed.framework.verifier.Result\nimport io.framed.framework.verifier.TreeVerifier\nimport io.framed.model.bpmn.BpmnModel\nimport io.framed.model.bpmn.model.*\nimport io.framed.model.bros.model.BrosConnection\nimport io.framed.model.bros.model.BrosElement\nimport io.framed.model.bros.model.BrosObjectGroup\nimport io.framed.modules.activeModules\nimport io.framed.ui.FeatureState\n\nfun generateBpmnTree(connections: List<ModelRelation<BpmnElement>>, element: BpmnElement): ModelTree<BpmnElement> {\n    val children = when (element) {\n        is BpmnModel -> element.content.filter { it !is BpmnSequenceFlow && it !is BpmnMessageFlow }.map { generateBpmnTree(connections, it) }\n        is BpmnProcess -> element.content.filter { it !is BpmnSequenceFlow && it !is BpmnMessageFlow }.map { generateBpmnTree(connections, it) }\n        is BpmnLaneSet -> element.content.map { generateBpmnTree(connections, it) }\n        is BpmnLane -> element.content.map { generateBpmnTree(connections, it) }\n        else -> emptyList()\n    }\n\n    val tree = ModelTree(\n            null,\n            element,\n            element::class,\n            children\n    )\n\n    tree.children.forEach { it.parent = tree }\n\n    for (connection in connections) {\n        when (connection.relation) {\n            is BpmnMessageFlow -> if (element.id == connection.relation.sourceRef) {\n                tree.relations += connection\n                connection.target = tree\n            } else if (element.id == connection.relation.targetRef) {\n                tree.relations += connection\n                connection.source = tree\n            }\n            is BpmnSequenceFlow -> if (element.id == connection.relation.sourceRef) {\n                tree.relations += connection\n                connection.target = tree\n            } else if (element.id == connection.relation.targetRef) {\n                tree.relations += connection\n                connection.source = tree\n            }\n        }\n    }\n\n    return tree\n}\n\nfun generateBrosTree(connections: List<ModelRelation<BrosConnection>>, element: BrosElement): ModelTree<BrosElement> {\n    val children = if (element is BrosObjectGroup) {\n        element.children.map { generateBrosTree(connections, it) }\n    } else emptyList()\n\n    val tree = ModelTree(\n            null,\n            element,\n            element::class,\n            children\n    )\n\n    tree.children.forEach { it.parent = tree }\n\n    for (connection in connections) {\n        if (element.id == connection.relation.sourceId) {\n            tree.relations += connection\n            connection.target = tree\n        } else if (element.id == connection.relation.targetId) {\n            tree.relations += connection\n            connection.source = tree\n        }\n    }\n\n    return tree\n}\n\ndata class RenderableData(\n        val bpmnTree: ModelTree<BpmnElement>,\n        val brosTree: ModelTree<BrosElement>,\n        val predefinedMatches: List<PredefinedMatch>,\n        val results: List<Result>,\n        val matchRounds: Int? = null\n) {\n\n    init {\n        renderableProperty.value = this\n    }\n\n    companion object {\n        val renderableProperty = property<RenderableData?>(null)\n        var renderableData by renderableProperty\n    }\n}\n\n@Suppress(\"UnsafeCastFromDynamic\")\nfun verify(\n        bpmnTree: ModelTree<BpmnElement>,\n        brosTree: ModelTree<BrosElement>,\n        predefinedMatches: List<PredefinedMatch>\n) {\n    for (element in bpmnTree.asSequence()) {\n        element.matchingElementsMap.clear()\n    }\n    for (element in brosTree.asSequence()) {\n        element.matchingElementsMap.clear()\n    }\n\n    val useMatches: List<PredefinedMatch> = if (FeatureState.usePredefinedMatches) predefinedMatches else emptyList()\n\n    val context = Context()\n\n    for (module in activeModules) {\n        module(context)\n    }\n\n    val matcher = TreeMatcher(bpmnTree, brosTree)\n    for (m in context.matcherList) {\n        matcher.register(m)\n    }\n    val matchRounds = matcher.match(useMatches)\n\n    val verifier = TreeVerifier(bpmnTree, brosTree)\n    for (v in context.verifierList) {\n        verifier.register(v)\n    }\n    val results = verifier.verify()\n\n    RenderableData(\n            bpmnTree,\n            brosTree,\n            predefinedMatches,\n            results,\n            matchRounds\n    )\n}\n","package io.framed.modules\n\nimport io.framed.framework.Context\n\nval activeModules: List<Context.() -> Unit> = listOf(\n        Context::setupRule1,\n        Context::setupRule2,\n        Context::setupRule3,\n        Context::setupRule4,\n        Context::setupRule5,\n        Context::setupRule6\n)\n"],"names":[],"mappings":"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AvB7B,C;;;MAMR,0B;IAAA,C;;;IAGI,iBAAa,cAAK,QAAL,C;EACjB,C;;IAGI,iBAAa,S;EACjB,C;;;MAGiB,Q;MAAL,QAAK,OAAL,SAAK,YAAL,mBAAoB,E;IAApB,C;;MAEJ,wBAAmB,K;MACnB,iBAAa,a;IACjB,C;;;IAIJ,gC;EAAA,C;;IACwC,kBAAO,IAAP,C;EAAA,C;;;;;;;;IADxC,uC;MAAA,sB;;IAAA,gC;EAAA,C;;;;;;;IAvBA,gD;IAA4B,kB;IACxB,aAAY,I;IADhB,Y;EAAA,C;;IA6B+E,W;EAAA,C;;IAA9C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA0B,a;IAC7D,kBAAb,YAAO,IAAP,C;INiDJ,oD;aChGJ,8B;IK+C0B,CNiDtB,YMjDsB,SNiDtB,GAAM,WAAN,C;IMjDyC,INiDzC,CACO,WADP,C;IMjDI,ONkDG,W;EMlDH,C;;IAGwF,W;EAAA,C;;IAA3B,oB;MAAA,OAA0B,e;IACpE,kBAAnB,YAAO,IAAK,MAAZ,C;IN6CJ,oD;aChGJ,8B;IKmDgC,CN6C5B,YM7C4B,SN6C5B,GAAM,WAAN,C;IACO,WM9C6C,mB;IAAkB,IN6CtE,CACO,WADP,C;IM7CI,ON8CG,W;EM9CH,C;;IAGwD,W;EAAA,C;;IAA3B,oB;MAAA,OAA0B,e;IAC9C,kBAAT,Y;INyCJ,oD;aChGJ,8B;IKuDsB,CNyClB,YMzCkB,SNyClB,GAAM,WAAN,C;IMzCqC,INyCrC,CACO,WADP,C;IMzCI,ON0CG,W;EM1CH,C;;IC1CA,yB;MAAA,YAAqB,K;IACrB,oB;MTgCG,Q;MARP,W;MACA,IAF+D,IAE3D,QAAJ,C;QACI,UAH2D,I;;;QAKhC,aAAR,mCAAG,KTyIsC,c;QSzI5D,UrB7BoC,WqB6Ba,qBrB7Bb,CIqqB8C,yBiBxoBA,IjBwoBA,C;QiBvoBlF,IAAY,QAAR,OAAQ,CAAZ,C;UAAuB,UAAU,K;QACjC,IAAI,gBAAW,QAAX,CAAJ,C;UAAyB,UAAU,G;;MS9BnC,OTgCG,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,uC;;IS/BP,wBAAa,IAAb,C;IAEoB,IAAM,M;IAA1B,sBAAoB,cAAM,gEAA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AAzB,C;IVsCJ,oD;aChGJ,8B;IS0D4C,CVsCxC,YUtCwC,SVsCxC,GAAM,WAAN,C;IUtC2D,IVsC3D,CACO,WADP,C;IUtCI,OVuCG,W;EUvCH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IVkCJ,oD;aChGJ,8B;IS8DkD,CVkC9C,YUlC8C,SVkC9C,GAAM,WAAN,C;IACO,WUnC+D,mB;IAAkB,IVkCxF,CACO,WADP,C;IUlCI,OVmCG,W;EUnCH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IV8BJ,oD;aChGJ,8B;ISkE4C,CV8BxC,YU9BwC,SV8BxC,GAAM,WAAN,C;IU9B2D,IV8B3D,CACO,WADP,C;IU9BI,OV+BG,W;EU/BH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IV0BJ,oD;aChGJ,8B;ISsEkD,CV0B9C,YU1B8C,SV0B9C,GAAM,WAAN,C;IACO,WU3B+D,mB;IAAkB,IV0BxF,CACO,WADP,C;IU1BI,OV2BG,W;EU3BH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IVsBJ,oD;aChGJ,8B;IS0E4C,CVsBxC,YUtBwC,SVsBxC,GAAM,WAAN,C;IUtB2D,IVsB3D,CACO,WADP,C;IUtBI,OVuBG,W;EUvBH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IVkBJ,oD;aChGJ,8B;IS8EkD,CVkB9C,YUlB8C,SVkB9C,GAAM,WAAN,C;IACO,WUnB+D,mB;IAAkB,IVkBxF,CACO,WADP,C;IUlBI,OVmBG,W;EUnBH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IVcJ,oD;aChGJ,8B;ISkF4C,CVcxC,YUdwC,SVcxC,GAAM,WAAN,C;IUd2D,IVc3D,CACO,WADP,C;IUdI,OVeG,W;EUfH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IVUJ,oD;aChGJ,8B;ISsFkD,CVU9C,YUV8C,SVU9C,GAAM,WAAN,C;IACO,WUX+D,mB;IAAkB,IVUxF,CACO,WADP,C;IUVI,OVWG,W;EUXH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IVMJ,oD;aChGJ,8B;IS0F4C,CVMxC,YUNwC,SVMxC,GAAM,WAAN,C;IUN2D,IVM3D,CACO,WADP,C;IUNI,OVOG,W;EUPH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IVEJ,oD;aChGJ,8B;IS8FkD,CVE9C,YUF8C,SVE9C,GAAM,WAAN,C;IACO,WUH+D,mB;IAAkB,IVExF,CACO,WADP,C;IUFI,OVGG,W;EUHH,C;;;;;;;;;IZhDG,Q;IARP,W;IACA,IAF+D,IAE3D,QAAJ,C;MACI,UAH2D,I;;;MAKhC,aAAR,kCAAG,KTyIsC,c;MSzI5D,UrB7BoC,WqB6Ba,qBrB7Bb,CIqqB8C,yBiBxoBA,IjBwoBA,C;MiBvoBlF,IAAY,QAAR,OAAQ,CAAZ,C;QAAuB,UAAU,K;MACjC,IAAI,gBAAW,QAAX,CAAJ,C;QAAyB,UAAU,G;;Ia5Bb,gBb8BnB,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,sCa9BmB,C;IAEN,IAAM,M;IAA1B,sBAAoB,cAAM,wDAAN,wC;IAUpB,sBAAkB,I;IAUlB,oBAAoC,kE;aAAe,c;IAAN,CAAT,YAAS,IAAT,+B;MAAe,sB;IAAN,CAAT,YAAS,IAAT,G;IAGhC,YAAY,I;EAzBN,C;;;MAEV,0B;IAAA,C;;;IAGI,iBAAa,cAAK,QAAL,C;EACjB,C;;IAGI,iBAAa,S;EACjB,C;;;MAEA,0B;IAAA,C;;MAEQ,sBAAQ,K;MACH,MAAL,SAAK,C;MACL,kB;QACI,SAAK,aADT,KACwB,QAAf,C;;MAET,iBAAa,a;IACjB,C;;;;;;;;IAUkF,W;EAAA,C;;IAAjD,oB;MAAA,OAAc,I;IAAM,oB;MAAA,OAA4B,e;IAClE,kBAAf,aAAS,IAAT,C;IXiDJ,oD;aChGJ,8B;IU+C4B,CXiDxB,YWjDwB,SXiDxB,GAAM,WAAN,C;IWjD2C,IXiD3C,CACO,WADP,C;IWjDI,OXkDG,W;EWlDH,C;;IAG6F,W;EAAA,C;;IAA7B,oB;MAAA,OAA4B,iB;IACvE,kBAArB,aAAS,IAAK,MAAd,C;IX6CJ,oD;aChGJ,8B;IUmDkC,CX6C9B,YW7C8B,SX6C9B,GAAM,WAAN,C;IACO,WW9C+C,mB;IAAkB,IX6CxE,CACO,WADP,C;IW7CI,OX8CG,W;EW9CH,C;;IbLG,Q;IARP,W;IACA,Ic9BsC,Kd8BlC,QAAJ,C;MACI,Uc/BkC,K;;;MdiCP,aAAR,mCAAG,KTyIsC,c;MSzI5D,UrB7BoC,WqB6Ba,qBrB7Bb,CIqqB8C,yBiBxoBA,IjBwoBA,C;MiBvoBlF,IAAY,QAAR,OAAQ,CAAZ,C;QAAuB,UAAU,K;MACjC,IAAI,gBAAW,QAAX,CAAJ,C;QAAyB,UAAU,G;;IcnCvC,gBdqCO,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,uCcrCP,C;IAEoB,IAAM,M;IAA1B,sBAAoB,cAAM,wDAAN,yC;IAiBpB,sBAAuC,oE;aAAe,gB;IAAN,CAAT,YAAS,IAAT,+B;MAAe,wB;IAAN,CAAT,YAAS,IAAT,G;IAGvC,qBAAW,sBAAkB,KAAlB,C;IAGP,cAAS,G;EA3BF,C;;;MAIX,0B;IAAA,C;;;IAGI,mBAAe,cAAK,QAAL,C;EACnB,C;;IAGI,mBAAe,S;EACnB,C;;;MAGY,OAAA,SAAK,I;IAAL,C;;MAEJ,gBAAW,K;MACX,mBAAe,a;IACnB,C;;;;;aAKJ,iE;IAAA,C;;MAAA,kEX/BJ,GW+BI,C;IAAA,C;;;;;;;;IAQuF,W;EAAA,C;;IAAhD,mB;MAAA,MAAc,E;IAAI,oB;MAAA,OAA6B,gB;IACnE,kBAAf,cAAU,GAAV,C;IZwDJ,oD;aChGJ,8B;IWwC4B,CZwDxB,YYxDwB,SZwDxB,GAAM,WAAN,C;IYxD2C,IZwD3C,CACO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AEA,iC;EAPJ,C;;;IACI,sB;IAAA,8B;EAAA,C;;;IACA,sB;IAAA,gC;EAAA,C;;;IACA,sB;IAAA,kC;EAAA,C;;;IACA,sB;IAAA,gC;EAAA,C;;;IACA,sB;IAAA,8B;EAAA,C;;IAEA,mC;EAAA,C;;IACkD,gBAAT,kB;ICmjBlC,sB;;MAyXS,Q;MAAhB,iD;QAAgB,cAAhB,e;QAAsB,ID56BmC,OC46BrB,OD56BwB,KAAH,OC46BnC,C;UAAwB,qBAAO,O;UAAP,uB;;;MAC9C,qBAAO,I;;;ID76BkC,OCmjBzC,kB;EDnjByC,C;;;;;;;;IADzC,sB;IAAA,0C;MAAA,yB;;IAAA,mC;EAAA,C;;;;;;;IAPJ,qK;EAAA,C;;;IAAA,a;MAAA,Y;QAAA,mC;MAAA,c;QAAA,qC;MAAA,gB;QAAA,uC;MAAA,c;QAAA,qC;MAAA,Y;QAAA,mC;MAAA,QAAA,gF;;EAAA,C;;;IAa4F,W;EAAA,C;;IAAjD,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA6B,gB;IACvD,kBAAhC,4CAA0B,IAA1B,C;IbpCA,oD;aChGJ,8B;IYoIyC,CbpCrC,YaoCqC,SbpCrC,GAAM,WAAN,C;IaoCwD,IbpCxD,CACO,WADP,C;IaoCA,ObnCO,W;EamCP,C;;IAGqG,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAC9D,kBAAtC,4CAA0B,IAAK,MAA/B,C;IbxCA,oD;aChGJ,8B;IYwI+C,CbxC3C,YawC2C,SbxC3C,GAAM,WAAN,C;IACO,WauC4D,mB;IAAkB,IbxCrF,CACO,WADP,C;IawCA,ObvCO,W;EauCP,C;;IAG6F,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IACtD,kBAAtC,4CAA0B,IAAK,MAA/B,C;Ib5CA,oD;aChGJ,8B;IY4I+C,Cb5C3C,Ya4C2C,Sb5C3C,GAAM,WAAN,C;IACO,Wa2C4D,mB;IAAkB,Ib5CrF,CACO,WADP,C;Ia4CA,Ob3CO,W;Ea2CP,C;;IAGuG,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAChE,kBAAtC,4CAA0B,IAAK,MAA/B,C;IbhDA,oD;aChGJ,8B;IYgJ+C,CbhD3C,YagD2C,SbhD3C,GAAM,WAAN,C;IACO,Wa+C4D,mB;IAAkB,IbhDrF,CACO,WADP,C;IagDA,Ob/CO,W;Ea+CP,C;;IAO8B,W;EAAA,C;;IAF9B,oB;MAAA,mC;IACA,oB;MAAA,OAAe,E;IACf,oB;MAAA,OAA6B,kB;IAEP,kBAAtB,cAAU,IAAV,EAAgB,IAAhB,C;IbzDA,oD;aChGJ,8B;IYyJ+B,CbzD3B,YayD2B,SbzD3B,GAAM,WAAN,C;IayD8C,IbzD9C,CACO,WADP,C;IayDA,ObxDO,W;EawDP,C;;IAM8B,W;EAAA,C;;IAF9B,oB;MAAA,mC;IAEA,oB;MAAA,OAA6B,kB;IAED,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;IbjEA,oD;aChGJ,8B;IYiKqC,CbjEjC,YaiEiC,SbjEjC,GAAM,WAAN,C;IACO,WagEkD,mB;IAAkB,IbjE3E,CACO,WADP,C;IaiEA,ObhEO,W;EagEP,C;;IAM8B,W;EAAA,C;;IAF9B,oB;MAAA,mC;IAEA,oB;MAAA,OAA6B,kB;IAED,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;IbzEA,oD;aChGJ,8B;IYyKqC,CbzEjC,YayEiC,SbzEjC,GAAM,WAAN,C;IACO,WawEkD,mB;IAAkB,IbzE3E,CACO,WADP,C;IayEA,ObxEO,W;EawEP,C;;IAM8B,W;EAAA,C;;IAF9B,oB;MAAA,mC;IAEA,oB;MAAA,OAA6B,kB;IAED,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;IbjFA,oD;aChGJ,8B;IYiLqC,CbjFjC,YaiFiC,SbjFjC,GAAM,WAAN,C;IACO,WagFkD,mB;IAAkB,IbjF3E,CACO,WADP,C;IaiFA,ObhFO,W;EagFP,C;;IEnKA,qB;MAAA,QAAgB,E;IjBgCT,Q;IARP,W;IACA,IAF+D,IAE3D,QAAJ,C;MACI,UAH2D,I;;;MAKhC,aAAR,mCAAG,KTyIsC,c;MSzI5D,UrB7BoC,WqB6Ba,qBrB7Bb,CIqqB8C,yBiBxoBA,IjBwoBA,C;MiBvoBlF,IAAY,QAAR,OAAQ,CAAZ,C;QAAuB,UAAU,K;MACjC,IAAI,gBAAW,QAAX,CAAJ,C;QAAyB,UAAU,G;;IiB7Bv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,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,0D;EAAA,C;;;IACA,yB;IAAA,uD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,yD;EAAA,C;;;IACA,yB;IAAA,uD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,wE;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;MAGwC,gBAA5B,QAAS,eAAc,GAAd,C;MlB71BrB,SkB81BQ,UAAU,KAAI,gBAAJ,C;MlB91BlB,SkB+1BQ,eAAc,uB;MAFV,OlB51BL,S;IkB41BK,C;;;;;;;;IA16BhB,w1pC;EAAA,C;;;IAAA,a;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,8B;QAAA,wD;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,W;QAAA,qC;MAAA,W;QAAA,qC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,gC;QAAA,0D;MAAA,qC;QAAA,+D;MAAA,kC;QAAA,4D;MAAA,mC;QAAA,6D;MAAA,oC;QAAA,8D;MAAA,kC;QAAA,4D;MAAA,mC;QAAA,6D;MAAA,2B;QAAA,qD;MAAA,6B;QAAA,uD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,8B;QAAA,wD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,2B;QAAA,qD;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,0B;QAAA,oD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,sB;QAAA,gD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,2B;QAAA,qD;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,+B;QAAA,yD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,sB;QAAA,gD;MAAA,gB;QAAA,0C;MAAA,2B;QAAA,qD;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,+B;QAAA,yD;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,Y;QAAA,sC;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,2B;QAAA,qD;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,2B;QAAA,qD;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,0B;QAAA,oD;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,2B;QAAA,qD;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,8B;QAAA,wD;MAAA,qB;QAAA,+C;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,4B;QAAA,sD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,mC;QAAA,6D;MAAA,mC;QAAA,6D;MAAA,yB;QAAA,mD;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,U;QAAA,oC;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,0B;QAAA,oD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,a;QAAA,uC;MAAA,+B;QAAA,yD;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,uB;QAAA,iD;MAAA,yB;QAAA,mD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,W;QAAA,qC;MAAA,gB;QAAA,0C;MAAA,2B;QAAA,qD;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,+B;QAAA,yD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,6B;QAAA,uD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,yB;QAAA,mD;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,0B;QAAA,oD;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,W;QAAA,qC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,yB;QAAA,mD;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,a;QAAA,uC;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,4B;QAAA,sD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,4B;QAAA,sD;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,+B;QAAA,yD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,+B;QAAA,yD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,gC;QAAA,0D;MAAA,+B;QAAA,yD;MAAA,+B;QAAA,yD;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,8B;QAAA,wD;MAAA,iB;QAAA,2C;MAAA,0B;QAAA,oD;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,0B;QAAA,oD;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,yB;QAAA,mD;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,8B;QAAA,wD;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,U;QAAA,oC;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,4B;QAAA,sD;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,6B;QAAA,uD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,6B;QAAA,uD;MAAA,4B;QAAA,sD;MAAA,4B;QAAA,sD;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,kB;QAAA,4C;MAAA,Y;QAAA,sC;MAAA,8B;QAAA,wD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,mC;QAAA,6D;MAAA,gC;QAAA,0D;MAAA,gB;QAAA,0C;MAAA,6B;QAAA,uD;MAAA,+B;QAAA,yD;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,gC;QAAA,0D;MAAA,gC;QAAA,0D;MAAA,2B;QAAA,qD;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,gC;QAAA,0D;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,6B;QAAA,uD;MAAA,mD;QAAA,6E;MAAA,8B;QAAA,wD;MAAA,4B;QAAA,sD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,uB;QAAA,iD;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,W;QAAA,qC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,W;QAAA,qC;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,8B;QAAA,wD;MAAA,6B;QAAA,uD;MAAA,8B;QAAA,wD;MAAA,6B;QAAA,uD;MAAA,Y;QAAA,sC;MAAA,yB;QAAA,mD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,+B;QAAA,yD;MAAA,gC;QAAA,0D;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,4B;QAAA,sD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,W;QAAA,qC;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,W;QAAA,qC;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,iC;QAAA,2D;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,U;QAAA,oC;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,W;QAAA,qC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,6B;QAAA,uD;MAAA,0B;QAAA,oD;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAA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AJ,GAAW,UAAX,GAA2B,I;IAClD,C;;;;;aAEJ,4E;IAAA,C;;MAAA,6EnBtEJ,QmBsEI,C;IAAA,C;;;IAEI,gBAAW,I;EACf,C;;IA1DqC,OAAA,EAAG,W;EAAW,C;;IAgEf,sC;EAAA,C;;IAExB,kCAAc,a;EAClB,C;;;;;;;;;;;IAM2G,OAAA,EAAG,W;EAAW,C;;IAAqC,W;EAAA,C;;IAAhF,yB;MAAA,YAA2B,iB;IAAmB,oB;MAAA,OAAiC,mB;IACvH,kBAA1C,eAAW,OAAX,EAAoB,SAApB,EAA+B,SAA/B,C;IpBOJ,oD;aChGJ,8B;ImByFuD,CpBOnD,YoBPmD,SpBOnD,GAAM,WAAN,C;IoBPsE,IpBOtE,CACO,WADP,C;IoBPI,OpBQG,W;EoBRH,C;;IAGgI,OAAA,EAAG,W;EAAW,C;;IAAqC,W;EAAA,C;;IAAhF,yB;MAAA,YAA2B,mB;IAAmB,oB;MAAA,OAAiC,mB;IACnI,kBAA/C,eAAW,OAAX,EAAoB,QAAS,MAA7B,EAAoC,SAApC,C;IpBZJ,WoBY2D,uB;IpBG3D,oD;aChGJ,8B;ImB6FqF,CpBGjF,YoBHiF,SpBGjF,GAdO,WAcP,C;IoBHoG,IpBGpG,CAdO,WAcP,C;IoBHI,OpBXG,W;EoBWH,C;;IAGwH,OAAA,EAAG,W;EAAW,C;;IAAqC,W;EAAA,C;;IAAhF,yB;MAAA,YAA2B,mB;IAAmB,oB;MAAA,OAAiC,mB;IAC3H,kBAA/C,eAAW,OAAX,EAAoB,QAAS,MAA7B,EAAoC,SAApC,C;IpBhBJ,WoBgB2D,uB;IpBD3D,oD;aChGJ,8B;ImBiGqF,CpBDjF,YoBCiF,SpBDjF,GAdO,WAcP,C;IoBCoG,IpBDpG,CAdO,WAcP,C;IoBCI,OpBfG,W;EoBeH,C;qHAGR,yB;IAAA,6B;IAAA,qD;IAAA,oE;IAAA,0C;;MACiI,OAAA,EAAG,W;IAAW,C;;MAAqC,W;IAAA,C;IADpL,kE;MAC2F,yB;QAAA,YAAoC,iB;MAAmB,oB;QAAA,OAAiC,mB;MAChH,kBAA3D,oBAA2B,OAAhB,YAAgB,CAA3B,EAAqC,SAArC,EAAgD,SAAhD,C;MpBNJ,oD;eChGJ,8B;MmBsGwE,CpBNpE,YoBMoE,S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MAAA,wB;;IAAA,kC;EAAA,C;;IArByB,kC;IAAA,0C;EAAA,C;;IAQZ,gB;IAND,YAAY,wB;IACZ,IAAI,eAAS,gCAAc,MAAvB,KAAgC,eAAS,wBAAT,CAApC,C;MACI,2BAAY,K;MACZ,yCAAsB,K;;IAG1B,KAAC,iEAAD,U;;MAA+B,sC;MAC3B,QAAQ,cAAR,C;aACI,E;aAAA,E;UAAU,oB;UAAV,K;;;EAGZ,C;;;;;;;;;;;IAc6E,W;EAAA,C;;IAAhD,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA4B,e;IACrE,kBAAf,aAAS,IAAT,C;I1BxBA,oD;aChGJ,8B;IyBwHwB,C1BxBpB,Y0BwBoB,S1BxBpB,GAAM,WAAN,C;I0BwBuC,I1BxBvC,CACO,WADP,C;I0BwBA,O1BvBO,W;E0BuBP,C;;IAGkG,W;EAAA,C;;IAA7B,oB;MAAA,OAA4B,iB;IAC5E,kBAArB,aAAS,IAAK,MAAd,C;I1B5BA,oD;aChGJ,8B;IyB4H8B,C1B5B1B,Y0B4B0B,S1B5B1B,GAAM,WAAN,C;IACO,W0B2B2C,mB;IAAkB,I1B5BpE,CACO,WADP,C;I0B4BA,O1B3BO,W;E0B2BP,C;;IAG0F,W;EAAA,C;;IAA7B,oB;MAAA,OAA4B,iB;IACpE,kBAArB,aAAS,IAAK,MAAd,C;I1BhCA,oD;aChGJ,8B;IyBgI8B,C1BhC1B,Y0BgC0B,S1BhC1B,GAAM,WAAN,C;IACO,W0B+B2C,mB;IAAkB,I1BhCpE,CACO,WADP,C;I0BgCA,O1B/BO,W;E0B+BP,C;;IAGoG,W;EAAA,C;;IAA7B,oB;MAAA,OAA4B,iB;IAC9E,kBAArB,aAAS,IAAK,MAAd,C;I1BpCA,oD;aChGJ,8B;IyBoI8B,C1BpC1B,Y0BoC0B,S1BpC1B,GAAM,WAAN,C;IACO,W0BmC2C,mB;IAAkB,I1BpCpE,CACO,WADP,C;I0BoCA,O1BnCO,W;E0BmCP,C;;IC/EA,gC;IAxCA,qB;MAAA,QAAgB,E;IAChB,oB;M7BgCO,Q;MARP,W;MACA,IAF+D,IAE3D,QAAJ,C;QACI,UAH2D,I;;;QAKhC,aAAR,kCAAG,KTyIsC,c;QSzI5D,UrB7BoC,WqB6Ba,qBrB7Bb,CIq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"}