@mixin no-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

body, html {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
  color: #333;
  background: #f3f3f3;
  font-family: Roboto, Arial, sans-serif;
}

* {
  box-sizing: border-box;
}

body {
  overflow-y: scroll;
}

.entry-box {
  border-radius: 0.2rem;
  overflow: hidden;
  border: solid 1px rgba(#000, 0.4);
  box-shadow: 0 1px 4px rgba(#000, 0.3);
  position: relative;
  margin: 0.5rem 0.5rem 1rem;

  &.hide {
    display: none;
  }
}

.entry {
  background-color: #fff;
  border-top: solid 1px rgba(#000, 0.2);
  position: relative;

  &::before {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    width: 1rem;
    content: '';
    display: block;
  }

  &.entry-error::before {
    background-color: #F44336;
  }

  &.entry-warn::before {
    background-color: #FFC107;
  }

  &.entry-info::before {
    background-color: #2196F3;
  }

  &.entry-accept::before {
    background-color: #66BB6A;
  }

  &:first-child {
    border-top: none;
  }

  padding-top: 0.2rem;
  padding-bottom: 1rem;

  span {
    padding-right: 1rem;
    min-width: 20%;
    flex-grow: 1;

    &:nth-child(1) {
      flex-grow: 3;
    }

    &:nth-child(2) {
      flex-grow: 3;
    }

    &:nth-child(3) {
      flex-grow: 1;
    }
  }

  div {
    display: flex;
    flex-wrap: wrap;
    line-height: 1rem;
    padding-right: 1rem;
    padding-left: 2rem;
  }

  .delete {
    @include no-select();

    position: absolute;
    right: 0;
    top: 0;
    transition: opacity 0.2s;
    width: 2rem;
    height: 2rem;
    opacity: 0.54;
    padding: 0;

    &:hover {
      opacity: 1;
    }

    i {
      width: 2rem;
      text-align: center;
      line-height: 2rem;
      height: 2rem;
    }
  }
}

.field {
  position: relative;
  padding-top: 1.5rem;
  display: block;
  padding-left: 0.5rem;
  padding-right: 0.5rem;
  cursor: default;
  min-width: 4rem;

  &.clickable {
    cursor: pointer;
  }

  &::before {
    content: attr(data-title);
    position: absolute;
    top: 0.6rem;
    left: 0.5rem;
    right: 0.5rem;
    font-size: 0.7rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &::after {
    content: attr(data-extra);
    position: absolute;
    top: 0.6rem;
    left: 4rem;
    right: 1rem;
    font-size: 0.7rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &:empty {
    opacity: 0.4;
  }
}

.tooltip {
  position: absolute;
  left: 50%;
  top: 50%;
  line-height: 2rem;
  background-color: rgba(#000, 0.7);
  color: rgba(#fff, 0.8);
  border: solid 1px rgba(#000, 0.5);
  box-shadow: 0 1px 4px rgba(#000, 0.5);
  border-radius: 0.2rem;
  padding: 0 0.6rem;
  transform: translate(-50%, -50%);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  z-index: 3;
}

$levels: "error", "warn", "info", "accept";

.container {
  position: relative;

  @each $level in $levels {
    &.hide-#{$level} {
      .entry-#{$level} {
        display: none;
      }
    }
  }
}

@function powerset($list) {
  @if length($list) == 0 {
    @return (());
  }

  $new-list: ();
  $first: nth($list, 1);

  @if length($list) > 1 {
    @for $i from 2 through length($list) {
      $new-list: append($new-list, nth($list, $i));
    }
  }

  $sub-powerset: powerset($new-list);

  $result: ();

  @if length($sub-powerset) > 0 {
    @each $e in $sub-powerset {
      $result: append($result, $e);
      $result: append($result, append($e, $first));
    }
  } @else {
    $result: ((), ($first));
  }

  @return $result
}

@function to-string($list, $glue: '', $is-nested: false) {
  $result: "";

  @if length($list) > 0 {
    @for $i from 1 through length($list) {
      $e: nth($list, $i);

      @if type-of($e) == list {
        $result: $result#{to-string($e, $glue, false)};
      } @else {
        $result: if(
                        $i != length($list) or $is-nested,
                        "#{$result}#{$e}#{$glue}",
                        "#{$result}#{$e}"
        );
      }
    }
  } @else {
    $result: "";
  }

  @return "#{$result}";
}

@each $set in powerset($levels) {
  @if length($set) > 0 {
    $container-positive: "";
    $container-negative: "";
    $box-positive: "";
    $box-negative: "";
    @each $level in $levels {
      @if index($set, $level) == null {
        $container-negative: "#{$container-negative}:not(.hide-#{$level})";
        $box-negative: "#{$box-negative}:not(.contains-#{$level})";
      } @else {
        $container-positive: "#{$container-positive}.hide-#{$level}";
        //$box-positive: "#{$box-positive}.contains-#{$level}";
      }
    }
    .container#{$container-positive}#{$container-negative} {
      .entry-box#{$box-positive}#{$box-negative} {
        display: none;
      }
    }
  }
}

.container-stats {
  z-index: 2;
  overflow: hidden;
  display: flex;
  flex-wrap: wrap;
  position: relative;
  background-color: #fff;
  border-bottom: solid 1px rgba(#000, 0.1);
  padding: 0 0.5rem;

  div {
    flex-grow: 1;
    border-right: solid 1px rgba(#000, 0.1);
    padding-bottom: 0.5rem;
    padding-top: 1rem;

    &::before {
      content: attr(data-title);
      padding-left: 0.5rem;
    }

    &:last-child {
      border-right: none;
    }

    span {
      display: block;
    }
  }
}

.container-header {
  position: sticky;
  top: 0;
  display: block;
  width: 100%;
  height: 3rem;
  line-height: 3rem;
  background-color: #fff;
  border-bottom: solid 1px rgba(#000, 0.5);
  box-shadow: 0 1px 4px 1px rgba(#000, 0.4);
  z-index: 1;
  overflow: hidden;
  white-space: nowrap;

  span {
    padding: 0 1rem;
    position: relative;
    cursor: pointer;
    float: left;
    @include no-select();

    &.active::before {
      content: '';
      position: absolute;
      top: 50%;
      margin-top: 0.7rem;
      left: 1rem;
      right: 1rem;
      height: 0.1rem;
      background-color: rgba(#000, 0.5);
    }

    &.right {
      float: right;
    }
  }
}

.container-body {
  padding-top: 0.5rem;

  & > div {
    display: none;

    &.active {
      display: block;
    }
  }
}

.feature {
  @include no-select();

  padding: 0 !important;
  margin-top: 0.2rem;

  input {
    display: none;
  }

  label {
    position: relative;
    display: inline-block;
    min-width: 112px;
    cursor: pointer;
    text-align: left;
    padding: 6px 0 6px 44px;
  }

  label:before, label:after {
    content: "";
    position: absolute;
    margin: 0;
    outline: 0;
    top: 50%;
    -ms-transform: translate(0, -50%);
    -webkit-transform: translate(0, -50%);
    transform: translate(0, -50%);
    -webkit-transition: all 0.3s ease;
    transition: all 0.3s ease;
  }

  label:before {
    left: 1px;
    width: 26px;
    height: 10px;
    background-color: #9E9E9E;
    border-radius: 5px;
  }

  label:after {
    left: 0;
    width: 16px;
    height: 16px;
    background-color: #FAFAFA;
    border-radius: 50%;
    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.14), 0 2px 2px 0 rgba(0, 0, 0, 0.098), 0 1px 5px 0 rgba(0, 0, 0, 0.084);
  }

  input:checked + label:before {
    background-color: #A5D6A7;
  }

  input:checked + label:after {
    background-color: #4CAF50;
    -ms-transform: translate(80%, -50%);
    -webkit-transform: translate(80%, -50%);
    transform: translate(80%, -50%);
  }
}

.selection {
  position: fixed;
  bottom: -5rem;
  line-height: 2rem;
  border-radius: 0.2rem;
  background-color: #fff;
  border: solid 1px rgba(#000, 0.4);
  box-shadow: 0 1px 4px rgba(#000, 0.3);
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  z-index: 5;
  padding: 0.8rem 1rem 1rem;
  transition: bottom 0.2s;

  &.active {
    bottom: -0.2rem;
  }

  * {
    display: block;
    margin-right: 1rem;

    &:last-child {
      margin-right: 0;
    }
  }

  .field {
    padding-top: 1rem;
    margin-top: -0.5rem;
    margin-bottom: -2rem;
    width: 14rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    &::before, &::after {
      top: 0;
    }
  }
}